import numpy as np
import pylab as pb
import ssmodel, ideBase, ide, bases

def setup():
	dim=1
	space = np.arange(0,20,0.2)
	T=400
	obs_locns = np.arange(0.5,21,0.5)
	min_field, max_field, inc = 1.8, 18, 1.8
	#Define field
	field_bases = [bases.gaussianBasis(dim,centre,1) for centre in np.arange(min_field,max_field+inc,inc)]
	field_weights = [0]*len(field_bases)
	field_weights[6] = 1
	f = ideBase.field(dim,field_bases,field_weights)
	#Define Kernel
	#--------------
	#This is the connectivity kernel
	kernel_bases = [bases.gaussianBasis(dim,0,.1),bases.gaussianBasis(dim,0,.5),bases.gaussianBasis(dim,0,1)]
	kernel_weights = [1,-1,.5] 
	#-------------------------------
	#This is  the kernel from Mike paper
	#------------------------------------------------------------------
	#kernel_bases = [bases.gaussianBasis(dim,centre,.1) for centre in [-.5,0,0.5]] 
	#kernel_weights =[-1,1,.5] 

	k = ideBase.kernel(dim,kernel_bases,kernel_weights)
	#noise
	ny = len(obs_locns)
	obs_noise_covariance =.2*np.eye(ny,ny)
	field_noise_variance =.8
	model=ide.ide(k,f,space,obs_locns,obs_noise_covariance,field_noise_variance,T,1)
	return model


def generate_observation(model):
	'''Generates observations and states from the model defined in setup'''
	model.gen_ssmodel()
	X,Y=model.simulate()
	return X,Y


def kernel_estimate(model):
	'''estimate the kernel using the observation generated by generate_observation'''
	X,Y=generate_observation(model)
	model.em(Y)
	
def plot_kernel(model):
	'''plot the kernel'''
	u=np.linspace(-3,3,100)
	z=[]	
	for i in u:
		z.append(float(model.kernel.evaluate(i)))
	pb.plot(u,z)
	pb.show()
	
