#Enter following lines in python
import numpy,pylab,ssmodel
#Model
A=numpy.matrix([[0.9079,0.8765],[-0.1753,0.7326]])
C=numpy.matrix([[1,0],[0,-1]])
Sw=numpy.matrix([[0.9**2,0],[0,0.9**2]])
Sv=numpy.matrix([[0.45**2,0],[0,.45**2]])
model=ssmodel.ssmodel(A,C,Sw,Sv,50)
#simulate state space model
model.simulate()
#store simulated states in X_real
X_real=model.X
#estimate states using kalman filter 
model.kfilter()
#store estimated states using Kalman filter
X_est_kalman=model.X
#estimate states using RTS 
model.rtssmooth()
X_est_rts=model.X

#plot real and estimated states
t=range(50)
x_real1=numpy.zeros(50)
x_real2=numpy.zeros(50)
x_est_k1=numpy.zeros(50)
x_est_k2=numpy.zeros(50)
x_est_r1=numpy.zeros(50)
x_est_r2=numpy.zeros(50)

for i in range(50):
	x_real1[i]=X_real[i][0]
	x_real2[i]=X_real[i][1]
	x_est_k1[i]=X_est_kalman[i][0]
	x_est_k2[i]=X_est_kalman[i][1]
	x_est_r1[i]=X_est_rts[i][0]
	x_est_r2[i]=X_est_rts[i][1]

pylab.figure()
pylab.plot(t,x_real1,'b',t,x_est_k1,':r',t,x_est_r1,':k')
pylab.figure()
pylab.plot(t,x_real2,'b',t,x_est_k2,':r',t,x_est_r2,':k')
pylab.show()
