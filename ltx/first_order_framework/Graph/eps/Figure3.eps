%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: ExperimentalFigure.pdf
%%Creator: Adobe Acrobat 8.0
%%For: andrew
%%CreationDate: 1/7/10, 15:02:59
%%BoundingBox: 0 0 236 364
%%HiResBoundingBox: 0 0 236 364
%%CropBox: 0 0 236 364
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 3374 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreateDate="2010-06-24T17:19:59+01:00"
   xap:CreatorTool="matplotlib 0.91.2, http://matplotlib.sf.net"
   xap:ModifyDate="2010-07-01T15:02:13+01:00"
   xap:MetadataDate="2010-07-01T15:02:13+01:00"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:ee54144f-c6cb-b64f-87ad-f763a7bc9ee9"
   xapMM:InstanceID="uuid:9e7276a6-db3a-e34e-b0c2-91b0e5e0153e"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -364 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 364 li
236 364 li
236 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2 362 mo
233.437 362 li
233.437 2 li
2 2 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
1 gry
f
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
2 362 mo
233.437 362 li
233.437 2 li
2 2 li
cp
@
83.98 105.4 mo
172.98 105.4 li
172.98 16.4 li
83.98 16.4 li
cp
f
83.98 105.4 mo
172.98 105.4 li
172.98 16.4 li
83.98 16.4 li
cp
0 gry
@
83.9802 105.4 mo
172.972 105.4 li
172.972 16.408 li
83.9802 16.408 li
cp
gsave
/1 
[/DeviceRGB] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 364 ]ct
[88.992 0 0 88.992 83.9802 258.6 ]ct
snap_to_device
<<
/T 1
/W 371 
/H 371 
/M[371 0 0 -371 0 371 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [cf /ASCII85Decode fl dup/DCTDecode fl]
/O 2
>>
%%BeginBinary: 1
img
s4IA0!"_al8O`[\!WW7B!HS5@s6]js6"FnCAH67k!!!!"s4[O,!!WQ/"9\i3"9\o7"pP8;$4$kA#RUtI
$47+I$k<[S$k*OQ%L`gY&.f<[',2,p'GDB)*#ok=+!2RH+!2RH*ruTN"pbG>'+PKc)ANi!)BTk9)B'\>
+!2RH+!2RH+!2RH+!2RO-71&d+"Sro/1`>'/1`>'/1`>'/1`>'/1gh:!"fJ;Erg=a!>,;5&HMtG!WU(=
U&Y/n#6=i+!<E0#!!!!!!!!-*!s/Z-!!`c9$4?k7!WiH)!<E3%!!!!!!!!!"!!36*"U52;#mq%O!!30'
!s/T,"pY55!X8^I!<N?8"98TK&hu[L"qtDhEIefZOeE!pYsK\O;UOGZ(1QbYEe<g-6Sq`)U9\9M_DO_/
PG>HB(K=pe_p[NM-A)U3(`A!k77O)[<mt%s)Y2q[`73l?AT`]lV7":mjn35/L6e^F`n';G2b-q^GDDN_
\&[+`pGb]GBR#?#W49q$kkHSe8QfbQM4(?Rak>qS.QU1*C3kc+Wk-@,lM;(m!WiB(!sJi2"U5)8!s<B@
!!3`7"<eC45m:+!@3PnqJWV^]Z1&IDdGZ<:'iJL]nM;FI6\6):;^J/JZGHifdP^#PK,7LN#RLhT)(%71
)CK';<B'KDZbn1?e)U%QPbb\)eE$75FbQ*W[Dg\XogVtoG(u<[[`6n\p.&1sGDDN_\&[+`pGb]GBR#?#
W49q$kkI/0=_W/<RAma=g$/;^3_ERjHA\/k]#ralqZ#7L$j-M1!YGMH!'^IR?/7bR?l3NRLCD,s4p-fX
iaI/ER2k_R3_^]n41f>i!$m_1gbTEg:?+.MHuU*l4qio2SHdMbj&J+9f5!'uh::gGb']VsR1t7<)<W$T
Wl6LEflgDg+K^iONK7oI%b&T7Dl%Uk9PW5CRI0*\cP<V9V:!Kn^7j4?@K:[KX^QA<3T,5H;5VSJ&\Hc]
ZfBs_Up+"W/_*H5c(8%)3E+*7*c0:l;N/8B3bF^ZCcZEAY[3rp:D1W5HY5:;M)0DEdY*UX*jfRRc)-4^
4PgaZ2#.UITcjZ<FLk191"GB.>"lu2M+0W4D=Qo]GIj<59Z*To`oFLDFS`(/X09jIa>tJV7e"[ZQS]4S
;lIYid0Al%3P36a@d>BS$C;kFq0`km2Ub,,JoD-=i^enuDlt:ZHsO'oVT1%96<:sGa\fTFk5PEQ'(9os
+m41DDZ%#%k<Ymd4][;&0qYE#5M8AEBB)7"G5aT/<^l+U1A!Q-B<H#s7ob?TDR6^V6=XKu5:fsm+APHt
9_5H$FgsC@ml-:IV3'0TFMqaAGm\2Dp<KQMZ5qchMbBB3->;_bQ-M<Nic717%6d(=P1JNfAa/@o'2acU
61]/q2X3)U/lRBZ8PU]<F?-AN7(XuQ+qT<oD+h@eJl"MGW(kTS_Ss'350S\^kIt>d#[e-Z["-oeG'$F`
T3^o/Bq,$M6e#T")IoZiHAf4Ajs$=$5o_HI70H,qL1mu"hJZQA2[lIa@T.nJ7RpbYa[?naM,q#lBp$IR
AHa&/LD^DJp+kDcg[tErc/BY&D".t*^(IYS)1>r-A65VNUV`R9m^6?l%koWN:^o2i.G'C5[V>C7gS34d
g1ANVEup6r7H4JNP!d9<oBe3Q`]LppSN$nB?u)&2N.gal)!99r(oLD<$;3]Nqm/_nm8"5dAK8%b6Xc]7
<1k,Hp:"rWhX9i$UH/.'mb5c\SMPrd0%lO`HCY:PM"F1C'_l;iWR].0:Sktf+E]h)-<_=0bWIms'(f?Z
DZ^L"4LYu(J6i,[CP,bDoX\AYgRB(jo'hZ;_+3=N(i'Efh]BF&4PPJ@i/gf2$-YpqSj>'O[/9)3!,n>(
fRYZU;1MA&[_==cS?'R^FIJfFN7/'/=6ac)!%:SPX#FKQULB-$\B.7KndbCmWU*.Zo33k_B%sZh??1>I
G@a5mIDc+e4"eh1R8_5noKk!<`,s;F7B#2Hju!uj8R9Lpepuo_!)LKTi0^)]Wp9"P"9@,[`I\97`rK!V
lfkn3ZY,%%6_B,B9,lA,RS*K0Rk-:MG1q2\.6Q=3PP%;X[Ur#l@F`\YE<L0Gjc<H4OF8?.oc9kGok;kK
KSLmoTQrjPb+:-X*9;Hf[l=EE`5SauR.>P-SY=#?MLH//:#!D/b#c3hm&^T9/])N2:rES^[X#<f[5):8
H+np(ls[[=+cYIf!qIF^@Z7UT[r-OD7is"n#$4-,R94Nm+S2.tUZ(F30_!A_Zff7J7pQ30V?tK25Sj\s
Km8VmFg(o"kp/m9+u>b>m.C,[E?uOiX<ZH41CHlo:LVr/!2l?&1<f1(M9Z$g+:#1!_B9%6n4NFTidU7J
$%W>%1.4KuH`#K0<0][k@->ZQG,I$sCr]5*U2DEgC,=#UU"%6-q<&(6jC&F)#[.^2`U;E$E>KfY8hS-J
%6bs0jZ.=HN;/3'dV-`!6ST!BJm_FOKSdTU3b=[E[bX&?Z"s+/NAG:%4.HC`SYT[PAdJ6<nI`X-=AD49
@V1A?%X;g61ol[jDqd,fLi2Fa=SGM'Z931IJ]7-82/%]A!h&bRGmM7^\m1Z+O/MS7Bq15uC\TL#0Y%B^
AS&lNB*I#&Y?/?Jd.VsG8[K%-3"FL+CU^b=^<5N<7i^\ICH11C#A<P/8MUkMZIE@Qh)E>00,C/8GNQCB
#$W`b18TbV2rO(,-nC8^P4G9i;kJ`Th(NPI:NN:MC=B%RC0g6:D\Q$mCgoO_@j_qQ1@[9/)";Lu$oj@]
?]gVs$WO?6EMqY0VIJYB$`qlmP@FHEA8$!\H&g>%F&8;dN9e);;cN9jrB8kA4>kF%7B?IoQ.9Sm5Yl%8
]4XL-f8!4m:Vp#aSMm/.S)$!0(D9X).37Q:8a2_85,]%I%7MB]68E`_H'U=<F`J_.+VeeSIWY@7?>K4>
W$0]s3mpsM+"V_[g\'_ag)[gNe]km)Ak-:*qGc3/0&6/QL`P?1ZMQS:UT__gTEj46q_r56q$;BRZ9'80
M-oS_S!:&]l+#!OmZ4^>!A048%<A2XX"QM;MjonrqmKq/?\r:YgFt#=R!EStm/;fR#^kNC1XLOL!4B1g
-).rYL21m/`CdBDfB[&3Bcr5lSDLDE9q^/AWS@9M:MeYASOr+RR5e<Fk)8LdD4=4FRL\p!ZpZ$8bB9,X
rHW\>SeiOCOQ#>l>%elk[/G9*P?(7oEqY#2RP3rTMDj8p;rVd4Nu1QqD//CajdSss4stEHa2Z*e24bQ?
2OO-fmVuqmI>5HopqKj"2N<`F$@?]o#,fH8N5;*KSSh.:,%]9BLc<JOJr<;Zga+VB;'A$`6t8ts,=l06
Y?\PpB'q75QN$pk),0dEnno-,)j5h-El-XMI!1JFmSi($GUYeiJ]:N2r]0W-X0mG#GCEN3Q\nbb1s6t4
Bh[GHA$rd-]=f8@`#tsS5s_"OC%dT(=0LuX"]FN%:H=t@:D)qM)K$6OQT:$B4.'J_D_EZG*X7U)%O>U8
1Ak=B8#Xj7@4@UW57hu:%h+ugP1).^)_P/2S-9-LT;['H#cDHj?,D>[8E;9pJ^;4"EGNoWkqqdkNhOe<
XL0q7.GG0SfQAX.NK4E`P[qsT%]<-l#\f&iPD.D!kJjphW6N&K>JTHF)GW-p[BFE%C&;5J\ubjsI1Xh1
qe#.egKX8l)NMr16;)#rMJ#5Om@Cf!>lC!ZOp52JRH^27?+n*8[/U+Qf1.0K?J/(\Bm=s7)#G\=U,q1)
iD$XQX7hm<X.>0R0;:Wl:-GpLWpQu'X0^:K7gDF];,]Khd+.["%qk.:&:3:5a3g>,#4`S<m*2Nl3pV*4
1M9:T(*;L(/g6%oX84bbI+q.e`<UB'584u)Mrn>.=-m91enR$GgSrctD\Psjo1%5YZ3L!G3G%\d'=GFn
ak8k7H0!r<'_6RQbMhZA=K.Qteo<P+ddX7?c$if83ugG<.HBJEXB;R7^RX3gI(#:cdl)GmgeE&U@t\o"
qR76B1M%'AiXQ`"BIg*q@[gbtAGU26@GBBdCZMtd':O))W6_C2jR0B\VoD3p3qH8GI.LpD&"rVS?P8r?
Xl"G0\'Bb%Mi$?dg^,MMpS[mqL1\V#D-8_SR+ln\Pkb7Y%*"liW[Ec`[IZ>V6-JcA>acRKL7ZkP9iKUf
I)O-ZKsH#NMK`e3cjjJpftbeq:$o&CDbS*@8oSf^UrEdk,GnsGDC"dV\"f&F@E+h6^W"YbG>[(<N:-Va
K<sijP7)X!1Q:]a<tTc8cdQidCjQTP[:b?\1qo6<_p:3h2",P>W@kcCKlFi^\&4Dd!,m8qoVPpQEB/IY
)ads7DI8E,%4sGKm+s@NMf!C_C3'5ma^a9>]/O9P7+rNhV^ge*S][L(UIX:HokBi(oY)Gj)70*LUN'')
BC\h77^:[;-^o^JcQ[]hLSL>o[VMni\QlKVdE7Md?W9]#R>7,%_NV.m3j5,m"0PK@FP2O8,$dC1l.:F*
1*ITXU"R(a&?Do'IQY@baGb@HAF,@Q,\2*_W9]dZe8WOZCAT?5,s`V9o5U\[d,sp\]`h&m]aW$^;;7Rs
q$m-LUd!J5eTR:KZI<u>oMo"mRd"U4SFNB5C&T*a:]&_%rrBZ/p$%mMm,&@pEFIQ@#FZS'rFIt]bY4Ro
i9sG(ZMS+oc%gS.6U+XdGkh!RBsep@.J.N"m1(g/GkS`keaGULSR.IaE-m!app"!Df2qSk6->\ljd@s\
;/u7BH7tS3`Y9i^55aTOg*]CkdWhrcdBu3?EVQSAI*q)siOkLjkUQ:%Q:g7XofVAa>RQJ=1*MD-).fX)
--Ya7P08WZeP[/cWLN8rK$Pf9X4G]/98Xe$dcnA!j2oY_4%>8g0m3!qo.k`Vqm3Ve%b(*1dA_-.-5Gp<
LM?HV99[p"=)%McloWEL+'I^5F&=+=5.g1<^;/RcSnle<5(=+%S%d4pFS<5"N59)6j4cMTS[-G9iDW%_
,Yb[VNs\(rD@Mh@NOd\RaY]LUN!e^V;i>99-LbZZ1u,t1Mc1O9g8M>P1>C;bRAS:k/r*AhKVpM<]XrV1
LFg`W0!:K>!(DC$pgebqT?amH!RFQ`KUBJ$O!kW07kHMeWmM\#F/IKDKiOa&ffM$W59@P(<cE+cS$Pbm
_qGB#R/L4N'_(lmrr>Egia\Fj\W44DRWe>W4M4?o=irJSp!'"8@GO6O6!m:"5.)kdpuF:L]e*Ei38nKC
(L3XQk,oR$!.+4LVi%3GI\fJSVU4>,q<)KgL.W(O6_,!^6mOcThP4+\H*es@:U=u7(j:HN<DmSo#&_bi
Ncm""4],%hF._(Bi4"!+cc1XgY!!=l[V;EV-a2mLHrS"k*Fjq7bGW'd@aeQ7Bs`$fa]5dW>Cnka3L)`Z
7F'#L!Z[V/RAft>"`mm1<@:)9dfC,g,d_H'>dacjM!YUn2,\.V0o;!7Efc,W7i?rYdurnYo`-to#"KGb
PigNsKt*_BdIpp['2LdF3r64p>J;uP3t4,ZnH#u>k3X2bXLGnPoHt^0lsJRhDsY3fiQ9>f[DmP'1`c1=
bLqXdEaMW/%b\,k]P#JM&X)+K"38G?qHZUG.J9jdfD(_87GaEZ>U\L5^2<E'&rW?$pm\S(0A<Yh\aAFG
X_'h'I%Gl]T.<5u$N"HlXcF.9G.sbAfl_OLUXF.p-YR:G[Z&b]`&&GdJm."W2L=Ll**`t+>eF`q<0<Z@
(/PC<e`.ntAOB_f[!BVQeuoA`%n\h+^lXj;lR7^C)ZeZ\bBBa*D<X,<.2!#"Yk>id]4[].]XS8rDqVg:
%6Wt$hI#HliUQ8Rp3*U<oa]0s>s.iDb6NNPn2\i_?LBT6"Od&8d9kT)%UM$DisjN<!(!"LI_;$0mE*6d
d@,3GNbkaS:+3Z9*enm42\MlB>-VtG<umlpTo`b%cK^1ajYcojCI0K!0[;1oSR-1HMQ$$\i"m'u%!5.6
giQ#X*?)1uep:pZq`<MgC[$&o.GlU<Q[KfCBi:s9k.a,lGr`B]8J;fRp!.3W].R=$2eMcV'UNSNhcR&o
f/2-e`t(,;m,$9QbXV1jR@/l7hjMj@#eaQ:[,=2Ge+>)aS<?ZT*'&.=P['2C^'5"_`m*P"="pm#/?^GT
]#^6QE!99t3j-ei-d=_[-PVZJJkgIB.7?Vc2.2TRM9N;h%PYpLGgPTN=.THGBs>[R?p$L5*ST17Xm>j3
9d<5"R3q]4Sf+6NDI5fuI6CNRFZ4JfU$nJp!)q`g@K]##@Zh\*\]gS>E&j?J&WN@FOgkctRU!cK4MPUS
E0b@=*\d'AOG4u/5'P_k5a%q+J9,e.d2<1VeEXtEd;T:q0$5qaO(em$H_HjRI`O-"IaeW2X0=+gFWHh%
F^%!-^L,!Eh;4.ccHf"R!k*C0R1+rkcM"Q7qrRdQU5?k2Ss",ImaKW4X_nq;hmL'XKTf2IfNk:]OD^1q
RQ%C.Gip$E]Qmjtljh\i(gsqIQ(@=WJbrb6Q&Alj(VA)gUa6007e5>sn_<TX*DX*\#?fbXU<dpc;esF?
Cn`maGL!gE["dh@o*t;am,$#3T02KMIG09Eb;T1g_@EaZTZpaV[V@VZ&9`;<RBLiA>fFP5+u=7\BFLPe
Rb['tU$Y,/24^76:C.K$4q2`rhKLl6N/I,E5oH]SC.+e%QAYbV$*C.&2]:b+]fRP4Nl&g[9P;Rh`n^P*
Rf+4akhVTD.>H)])h-(LUQC8*N^AAb9h+?WFE<Q$*5E[L["1r<0?:&4Z"a>I*gTi)Bpf3'EH7)8(oNg&
UEln-3fK@FG,m#GH5;=5@i:ui)jAHgJ\,I$[AGVX]PhI(d1nZ*&F6ia(F=f_fFT]nP;'8</)Mt>RPO*X
F%@`;lE=-Q7mISQGgfodK)"IdDTohT<\6_[<+Ho!Giq5nlshZ.lUTY5*Du?46RUT]c:>6'%j8Fo;5!<]
)VnEEd>-Bmc=H9Y82!c8p5/sPRRLnl:noH<8^uM!amBQu6^fBm+XdP+BtGlLT'hqJgCTb7L6^8ZZ`)8c
AHBEdCGeFi%`=FR`[UB^<K\>5El(RMQWbTfMah6\)MRLG/S;X3H_Tlk(8RL2c>QdR`-WQKckt1sY#"?c
`9&tB(mh\X@M#CQEFU8se?<-46RW!!Z0%!4H@Ci-T90BHa"F/)Z./)K+O,#?#*(B.c!cqQhG^fSdGZPH
#LeWjgZ\:L6p>\GqQNOYcS[fIA(fQD*1eNbXeL?8;FpYVa#DXt,E&=uQEE`X&l!6Yl:9a$/3SpPj3K>L
F\An1\6?6an'0^IZM6I?R3Rkd9_spo=rcC/dYP;$'SeV]o<FOKpWE0=JV.AN+dZp6E^1+S*ODRH"j$'/
7&-6?Efi]Y&4UqPCM@<7D#.dRp6;<a\d!"(hFRb,hqL0h_^&R_6/'j!B_tFABZJg)=beP2A6QBHX'kAN
g`u[tRFh-bN^g//HZ-8"YB1Ja':lRq9,R;GX\P\8Wp=u$X0jopgY'5;9G*RE$YKe"3NhW6]/N>n8r!0L
ESELY/;#*lTB+bH2H"mX?`%\IHE"nhh+kGbNt3N@LRG*dX%V/h%W<Yom(t-lEkk0??@L:Y"dYcH+X"D_
B`Rq7OR4j`SY#_`1h9N!f<n.5/]Zb6kqG]soGUkK`l=ooHp7J]GS53"!1'(\=-h9ZA0m+!KWr`OcB-2\
%"L*k>\,=K!N(TtJbWfJ4U/g&TT6A-(e>*#%&5Fp:-NMcVH9YL1+u>Ojd7fF>0NXkSD0&KI)s5XjL[`F
ea&OjQX.PM*=j.`XBL-bq&Jl9'EuN"%WA_/13K"9"XLalF?O\lVnj5t&[WqM1;-KDR0Q.ng*%_03m%e0
^Dt2:fl39GhH9>BXgQf8.c6',:8b=i/rc7k)Mk6sY!TpO?\lrbDeF(a3LIEG;]_s\W^be`0PBbM!T`>P
f$ma^?#P"13KGf4KK:@R:F*NO/;:C"RTSSYiM`!`]OJFOeB`Y,/Nc"M2Agu_bNnhaMp^aqJkAtIa'@#(
eP8nIg"H^KZ;#ah7<k?+))C@HqJ@K%Pd,N1jl3$$^^sJSdfVI0FnWX&a.lsX?N<gf1oM%AKC6mc,`ASO
G+B+W]Pp4XHY-<J9p/G#51/aZ#BW)r'H1UsfpY*#&_^F6.nX^I6A*!r]pGH44D)2fN0op9X*T/lhi;ju
*mTW+`rMWs[I9KN/+F^r2gDqi*R;hDRSlf!R#Ct$j-`9@`-OA5&Ofl<An0F;P6VJTQVG?<[%bd[k-%uS
3pa\Ml/BJfj82Zg`3ec^L/da"RuIo'mqQ:NAG0<"RW/V?73\Wi9idd(4\h>J35NhT7bMYg#a&iNG(dKS
2\L8Ya0N']2"Ef-X"q%*C?J#*68"-u%$>^+>%]qOff3j*p+/2&>>fMNFWMF`R<%i=^7j2j?tkQ`XNN=r
h%,NBE:nS%=r<bq(MTm"3!B4@&K+!HRa007LF,<$E=8U7b6Fji6c\M>0A"<OkI1`Op<'52a@fh\bOl=3
VR<ET>e%9'Q9kg(2mhq2#7YM@Y:s`cGu;<rh!"C(m5-kK8"1E&C&\1#rV<`[;!e`TBqC`nZ]S;dEuR<7
S6Yi_d?a%+!br))V`ZqE5,02--F0sZ:hcBRR0YF;5%>;hf2"\":W"o"3>Ytj=\5\++tdBpaN<#reH-)[
6K[#qL."/T]0&Z/0q!NXPC_`sWT+snGPF$cNT)a.LB:b*(W+kVp26NAH-KY>,fI*.93Mbj]08PT0ufTg
p%-.-h;Z?um''k19'"RZ46B)^!p3!@$_m5,SWD`lT4c*J3Y2rD:G>Q>LR5>Te!!HLTBY(*ne&<G2'&<L
+i)@/.']4B:e8h@[g"7@D?uL%e#Qlp$B4'=o>_g+gM((OGpY3gc:>5t`*:](E6-I9$@jphm4@DV_m?`J
P)WL3?<#-2;W<$5cbouAq4:+DR;i3gfEd1J3o%7cL-med[5gWX"BK39&%5Q;&tGP;Zo,]FR]0:Qf/MDX
$("/Bf64=[FVuR"V/rEZp0V!KSS)YD<#*@/$-o/1U>[9Y[9C9k3N:gL<i1']Q_abS5#]EJSb\1?Oa0ke
%1\miN<Tqr#-Fq"]W%G+T1osjg0Gsr?"p@`eBEl?BSS)jOs-.eHL=@l=3!0ZggVGTG(q.OoZ[jib+t'.
aS)c&&G'r89XB'OBc?0,G+PmXjQX&NUs^Q^c9ka$MGHa=a2/RB+D.Wm&sKV[b[R=tSD*3ai4@`FEe0dA
Fa]m<$@/as6>];/F$D5]#9B&K_0T`1m2ek'lam3<Pl/Hl6auXLSn"B.6Mf;BiYt#6o'SrVH?eT'(r;-o
\pQ4l_lYd67)K/sMGA"F9NbAMV#H\UYKIh:K2L=l10m)Di>[7!(uqpB+(n'qB"P%`H"Pf(KKUB/8Jo,?
!*d1&\Rt_3L^.S1_9%_,fg]e*+N@P0RcrA/&jCT!Wl,Je)*JeZF$,DSk<#i&!QE[/#e`;lK!6[ac=E3b
j#]Ue#q=pi-qoj[)*GX6>>ecu;42ZNKU5i2?*YMC.@^8WO(UbZelc/@k&9>9:X-"PgFgI6UskY>`<C;p
.,/B+g%rJih9g!0Un17Y=1';3g#sH=W=l>h2IKp!FljmqEnKPdU8^57cQ#p%0/&l3fC@,24@$OV3'gHK
]m$A]a![2b%.dm.PN^6=&[BSeVuZ)TJ4)3\(=]f+6-a,N1PeKIPJo"`g3&bM_5;MPCA+8+41TZS*upK6
HYNuJ]198Qk4KW6c.eCB3'\A)lMEr*kd6d"'i2+k7B+JMoQiV$.96"P9'q6FWSZm\M?PPVG0A/t*2BG7
W]&ST7nfL9S#YibAT^GaGUWB"o<S!nEd42+m2?-]Rc9!Zms@:)LBr-!GA/*BJs,;G\^K`S0F560qXR6"
Bo,3H$p$Ze*(alRM]L='Li'Jnd(i)?%hX*]Qif9!Nc`u1*fE9KV?*bfrr<kPIdGtVLjEn`JmW"$mI6a[
0?YL"ArpY3;R^7\Wh-bqm4<bmSF'I:HN&b:8<[rEkP_lgTO(t.\?_E-Bb_j1juoQ@4D!dLGQA*":^2!O
ZP+^1M\$J?gB7g/1DCDk%_91!(K%.;3EJ79*^C_MY8JifEpWUWHWD+T0sXt]359,^?+k/b_Pp>T.U!jJ
CuDQ:aBqp5;cN@8lXr#aid1B3iuH$%JYpLN0SbMl(/"*]G"ts=2btPNk+(25M]FdI_jCS<r1#*=e8?Rr
M>0h<&Jj&[0t&m<#C=l>g$.]^I5M3NWkcZ@fsfGTfL>p9ITQmCRIQadQr>"<5DX^Y+&sYJ)L?=diN'0.
3NgbqcF^IH:jU]`!*_iOc+rj]I.t$id3t1U75LXcBm?BB)XUO!7HHP=_4qe21MY&N8IfYq\kiL+eETUT
I\G!#b(gr-"Z#`AM&NC?j/04E/\*=b1A(OE__JcaS$TW!G"FP35E`J2Nd&0pgAJF*:=7JYQ^E'%:T$@g
HY9:#0"8cqds<'^W*+8t3nu`$c4%jAFd6[L9/]gSN6L&"\oh/!bnk&.3('CjkB]mcVM.Gqc4dXoeIq0>
ViN>XZa\qE;`qOt4%/TZhUf(j>Z=W-US,mO?*Ce%Sr5o!<?#PUHB'@c%5/(V29PBE[u\F'QJ7aB],XoD
S16kWO)2pu4slejUZU#Y%,'jO[d!J`Tm]bh'(&BYq^Y0*j1A)gG*Q=Sf/qduSt[8^<LW&Jp6r0YhW)RO
FgEu+6LmL/PJ\Xl\!F[XgGTsteCb/U@J\9;bEh%?DmYsgEMV+5%+OoU<VV%Ph;Hg^^=-jH$Y,ih^)t6E
bH#O,Y%GCOdDTk9%t>#NqbpY(V:KC/8#>IY^77d(D"IYWeFD:rd`;*=gcl-sS2RYm;_M"FSOHdIfrL^9
bHQ_LS]\GH.S7`t9%P_N?3ZhXi_sN+RFlZ;4^:+\/gckm3I=*hUE50$,;#+=1S!iL7if50be_+gYMf*%
T%V4'E6,`5B'%sJ5:1t-OId\HCmX;*HCT<\(_,(ejcNa:+*J1?Q5Mb^LGVX!GQdmgm_ej`>T%^oX-s[a
5o`\;54"B];0Ek,dGjH1oj&7`IM)<da%r_EH)9(r$J%&J4LY/DF/I9$qb*Q<M-jG*Y1^8&P2,*/Y)+7=
5'\/J[V3i&H@M1=UT`!(Xa.CIm<R2fY@P#G9[VdPk'YdgZYia=46L%G`TVPpDG-FV)WoKgC"D?'Us!#h
`Ku:qac=sAbC"K:"Z\#*o(/j6oOqs?WOB[3#jT*3c2<R]-op;LVraInAG1cb%jTfaT=JC!p5SD/gTGkC
Zb<9[GE:=u^gOaWQ[%-@r,]X$lhHq@qW,*:8G)o^B/;;XD90o$iafVP^SJb`eE`sL*F>cuZ`Q,X,)kNn
CE:C7cq:UL$Wj?eo%r!IqMX8)??uVo)>J92e`jhnp)74:6-Su;O$daHYFqb139JNlAFXbaHB-LXWt![p
Ak0-(S1/WbRtUIP0$`BWlaY`jQ:hoS2E>?gLR'Pq[aFDc$`hfl35Q/0:0k3$e+V)nk32C0<QgOBl/*4i
RDZN-k0SH"a]30@]eU\Q>Z0_&p.Z#fBrn@@ZX]m"C[0njcu>eIg/"\RZ_YulNV.:&qkc6Lke2Ebk]GP%
Do8TN/Z+S$D4)8a9_.K%*gL7"&[lC86T5Qqc@.*;!TJtmPgs:(-'g*P,ndQ2Au^9O`*J$Rg``qB^Kdde
Qa\<_p5]($P$7"W;5<%Z_Zm<#U>d0!T@M-&GFDY(WsEL0am6HBN&5oW0[h0cIhO'$iGD()L0=;QZ,ab"
8#XX?U>deA2;T5k^Cska+(Xo59_*Ai%!f8RY!)A@(UMn&*G05'I,4JLm9Id5!(3"m:)EL"c^RW-U7Bd!
HR$GlmrU_'A8[Ugg%p6dRbX%p?K8?!rZs\qbjg!Ao4t"c'g:Gd99,ThW68B-6&%#[?BnkMHu;,n*H&^1
e7<m?Q=8ghk;T$a?<=T,<$%*;,qTgBH;,^II&j[J?D<4@9"&m]9eBk"btb/,1_"KI6\U2+`4.C?)L8hs
j,8c/:EfP2?^FH79'r-:oTUE?*imf<:0Zi`iPR$_Mc4RF)EItiN=K8-*?SrbN"i#[%TV7H-a7a+2#6TV
kq:VcYA%<IB;>04YE#2u_sl<t`.!\eV1c@JEQa?m2nW@uI#`S4':TGc;5N1@+BLS;f@'L6FP-A#b3Yt+
@-<sOY*[XEUI1Z.P9cHPS;*e-Goi:VY-FrtED4[+p20G@oc9`3:ifo@^3$q=ahEg#X6hPt0lp[sS9lm"
3.nSVWZha0At-.a^)agk%]>:'K"9%hZ>_rbP7NK)^BguX@BZYOG6>.\a!;m&]e_E,UUN'$_S2#1nheIK
e+7=H@8Q$@=Lfk@Aj4]:%Gc3&ZT&181ssa^dHEH8<:d]W0+Fbe$eII8c-(5">5WK_od/ppG)B>Y_(LGO
k/Ll`9NkkAEDH=\W5HR'"XYaDn;[$@/LKhof.GNI/!2kr;`$mZbC%@V%N))]\KdbNdlDm(a[!NLL)**i
Cmi-5Y'MD]HT)Ce=tMP"c'$oV/9J0eVI\pGn[SFsS1%MfVK<__cf=6R2*1.>,hJQ5k5.g(]NlO9IatU#
FiLEt^2NYXchTWW]rB!$/sBKZl-&VAjrVF=no4/731!(6o3q0<3G*0NiPp%SNc/*FB6!2i?J39j^5mm&
MmKbdK6"E@jdpnSOPqjlq`QP]H#K8:iTbhOS(UZMI8@-E4MpAj;Rt7dNBIJ3C%mfC4_J'$^0pZ+:(Z[_
dboI9PGWX;`mjCGrfUSG666Bc/Un0hVf-_A_A9MUG$UNgr,cZC^=DUTb!i.iC;7IB?cP5:*K+%14Pj@T
aW#/@bZ;9WeTPR97X4UU;6e;LkOi".0&o[,Yc6o"-fl>ObdNjg[TB**aG2+d4g5@jUE[2NB/?XUZO&c)
PI.io\?KeiL*MYd:G7M82_/)!SSr'$0rLE+4BH?3<WI0p4ZBUN),nUlERP0DV[:O.r@BOq7ghkhml<p_
n!VjKcurQrct/XjQ>sW[h66n!iBf`*H`$u0N:QDea>hANdm2VtUZ'L.,_q3E0uWj#H)mF:#mQqiZI8Qj
cF6%@bj.i!;KFK:",dI"IAuJ$Vej.doUV108YeGs4R9C"c1DLgR+YBs3j*M!OWsLfBuGOg1^(A4HpRq?
&s!PLBW[(J`]4>^j(^?f8!5H++q^:b/tQ"'H%+,i_ubP%P]*,5AE]'"&__Q9\k@<l(:i>r<fDo]%<bK)
5C[\p\^p"!n@131>d'V1(1nt^)!*a[9YrtI=Cr=8,14pU%Cmgtjq`AALhqf0,+71iS[4s?G)-___bHg[
OA,'/o8;p!e/Q)>B6J:J0nhUM%GG""1A790UYuR8WLEV"NQfIk1`afiY&rKbU#Mu@m6,(kV&,K4STiBN
Z[4=jB9:[0378c%A1`$(=kRK#-jnYVA0tk1^"4c3bOHItl1=rc9i0;0Pc+/YH)\m`q61c6,K\++\IhSY
l.SX+;k!Z$"EC!&?4nU01n[Nbp<PAYr.63-(M;YR5uuuO!;s1IqcD9S>kW(P-^FM_)*Lcn1A`S:I93^a
<:f4V0E,TF".GeYbqkD(l/%o37srg0SG:"HG35QM(U2'*D.a`Z*tDb,5GL$[IIE8E8Zh"U>8Ph;^`iqt
e(eTFFt[BTkSei4=UAWa=KJ*-+'Si6i\RdYfmmPmdW?*GfbTq:&E!op,;bkWbNH3k/NJAm[TEI4l^X!M
ZRGBbnS3G.?a#pu!9E;"c_[m]+Li03McJH8(llnJ#$LJUe!i@UN8Qd)9,J^G?.mo->gk*P@@Ur<@M4"#
,YZ(Fd1_rE%9O>'CNQAWSS$QEPr$nfS(3-e);:If/a$GN[WU]'US,gW:'Q;9Ms7L]XD36#2VH11G1r>o
(3cDp"`opqaaWX.@Q-6>l(dtT4Hm29qnhdnOgN53iQbp[>0-.ej1K&NUF.u]/P$T@Fdd>Kl/F_UG':/E
0<W`g+G=@Fk7Vq:#me.[WLW]tN[o=ERWrO'[u^r0"km-Y.skUKe;2O"8Q;Y6?@AFj,5"!Gd>U=X##NjI
5KT*AFLti\._`Itl'H,]+!I,Veb73H:pXFU#+='9Ddu<Lnm.sCd?UOeGG&#!cH>Lk)L240YDf89dhsZ'
SX+n'+R1^Wdatsk?MUqt@g.Et2!K%klei_-U>W8<EuQK?5deoM.?2$A03l?CCLTY1E19PZL^J!f*H%cf
1JNYSR+oV=gGobleB3g?:S>KS-?)F'dl:[^eB<c>g%Kk#f-P;PcfUXXH7_+86B$mtgZU?]3hF^B"f6FL
nZI0[@;,)#$aqo?Ft]oQ;j@i==(Z-]Xe&L&1L[kSo2VaBf'2hs!,U`Ta)#e]mE6T02H]JL*M,A[PV"8+
\H9<R8-'LMYQ>6r6:Pi?3UYBSLq5U/ieO2k$2^LgcPcGC2+YE!A7MnZYN'KaS-HGKQe"<k!]9NK!&A8o
:!YRO=i=Z:m-R2N8HkuAk*pf[T9E@tSm?G@Q^0IlCfHOak'f,*HVL[X=\"kIKGH#jMk)f4RL@AhDiOIf
X2UJ;)Y5#[7*_L@%/L46oMLX?4$;;?VHIbiafNR%60J#Tr*tP:4':_PLWPiq>.^(db;FUZ4A8MqQW^2`
W;1JmV*Vk4iqlLc@X1)mX@ad%X(JPi*R6#HR.[gf?EgSLossR:-.lYGGhHu#NYCEu0CA-$m*jJXFt"%;
\0P&nkF)%FmTVjKAa,&/p*fkpSMm.[]2PIN.+BA?Y1`%\c"j>gI/a3#%4$Y30/Qf%kJV#:G"/i2Sm+c(
@lpp<)[As%Oo%X0N1#6TT:\(tAi_Jj8Bu"ZNT4tscdpD6jrTU%jSc?@>\3-+=X'9S6Fk-O\>)!Ze't&Q
MPDJQ=27r"dd[GSd!KCuT^;_?]`,B,:p1TiU!r<1SK<2.MfJ-He<)XmEPREk8nO,_V%Rth2'sf-IC!6A
1_\!Wr_P<heD>.#-P'a>Gr0+"=][FBQZV\cNA"e]q)YWRC.sY$8a_E>LH7"/B0na%*huq"*be'jREr`k
U!hu?!90N3Orru;^KelAXADcS;FfGC'2CnP3mQ6q*j+q[jH=&BHMD*12f-OJc,H?sWV%!4fngd$ip,St
6SRsp=129iAo.bX$KN\7/'f*Y%.MCOOtmnO&Y.0\BemaGT[;tDJeKOZ8nSgk3ZQpN?_H!0iE#VLRAuR*
/\=".Z-j!AA`#P/amAiio:;e^NpM*k\dMg8e,'A=<:IT!RuZ`glM#\:;!4P9o\qKu9bPB_AS*9E2jg<>
G;s%5;(Q`L)J35b!-=nX!j8),0t@N4T.EAIB?M>$UNq=9JuKtT51e<)__45;o7hOeV\nWF1W@&(R?[Dl
T#@<s>sZcCc6H6o(XbAm<t'25?YP*aeT&J5]f$qa`t#+MRRBe@YM_1kR'RK=mHf8cXDgOF8d]1VZ8=RR
GBhGI]4M]\M]ME'TW;cq4Vp7kfl"teO<d#.*ES/`^3oMnVWRG7)a15hKL8KT`h*5mZ),$oY(<`J;ZP:O
3.T#mI(qM8=SM9KkMbpRUXnIb(Us2p?/l\!>k>,ReA;iD/Uj-d4#4!2ZU=Q@3$4BRkd8kM%5V"am@\G>
h9MW[PJeCef$FOoZ[hFld,UHOZg=e#g;:sBA34EQWh16fp1BZlM7.SR="kpV(FM*H.G[Ktk@*!]\ON/$
\+Hp``V$8T0.jN]q[[&WGL*ZVHp153Bm^n^48<H2*GeD=m](OX;[kqHdJ@IiZuX0*7O]9f<[E=uSq#JH
ibdK7Z:g$5JF/j;B`KFP4e>?AMGU*eSF1de13`M8gi65T+EM%gf9j&d]a-#(ih^^tm-S^+4N>-+<e`(n
De##+dn:R:<?ii1`39o:Bq;P3[.s$K9_5(eA9qk6#+lQ]QTdeOO"!)t_hSL-'_5c\9D>N$7V)$uLhbk<
MS+,/qM`A;Y(SjF6VfIqMSXZr8#u#llKtt4.3=<BHR0B\3I]?BM/U#QB_sV-@2QGrSGljGRHj4Fp1+6X
@8J`8(:tj8<j,#R+TZOZ#5QjDH(INpf"rYp>p]+k`"pY!%Z42?-UEno'A7,8p>N!oojrFG+,V&-E9GFj
O+UJdNLTTR0s9jU:FDg`C[sk;(K6-N[@41fJo?jWO(lbITl)_9\+m:Tg"hTs><71U[W5k]`hK(?)`t4F
d-t)]U./)D`,DgW9(/<_/6jcoEDfWKaN$'PV_fG0nCTP+9T8QKKMOH.lV5elH5NjERdFFc#]ju@B-j'^
2N&I_Z]"3V=caf$!qHE6X\,>NSG'B/jce9hApD*EH0rZ+3MW3Xje#&9_:j8W:m5/:DomdnrGsJbfX\V^
AF5nX$6STFHMs0PL\8oX5/PHg3'"T`2gPj.eSS,(0D`#PlqYD?M[kZPHUftqSpApi8Kf6][uPcq@s2C&
f$:b2:.]"Tn?$TihY'=-\;(P**qMr(iInesP?a'rjl-qoEmTG'o$t@ZZ'omXkK-gOo=DJm.XTL)/WZ\W
5A*)og9#i-cL)Ru%#hg`j23lAj[7mcjR4@5L*=6"EEPA5+cG#_lqf"MEA=Jao1c17:1`<s4$.uoE)`Bh
I&DeBhWaQL"DsM1R79[g;^u'lSTCLkN4_";rN.,&8oF$LQ-Ve`]lsWB5/0j:9,gS?4(hiW[7(P]G:oIg
ageE32//6'G)TuRD0YPFq'HmI(##)#p5Z!_M;?s#YY0n;B*sa2_KM5IP4kH9M!V,YN90_2h<]5c!K+02
DRiFu&rU(k9b]b/@smP<1KQ0">I8LiF:=;p=f0^'c"]*-UVQY:aCgQ\XuK'D1Z=Y;;\@Q5[.6?og(JaE
9Jt3<>^:$/H7AenVl"!S.7=Y_?]pO6Q`ZSP1D_uc!'.SL]0)[@W3$'eRU'!1T(d#um)qi<Cbq^6p8j1a
droOo.QB]<#-2)[40:Du0j`"t0l^fqgmjb,'ID3.3p0#d)!)t*]2EX)A"(rpM$XEqH=(,q%&r8E)$Ha;
%]QTfE\I_]+%+_sism>REChC)1<LpFVs_frnl-$&fP(>FVUf'_Oau6cfr`bI,RJ4V_)?pOE]W=cqZe($
/OY2EcFEc?ph!8Ba+RRb)5OaQXHHXC\282XG!&&C'$DqEb;"r[N$B$RNNA9`f-nh21$[/TFNHB<09lh]
WR^<E&^A+W8J9,2oV>IrSCXmN/CGc]8nSiR''>65;inODL^oUA30_sm[T=Np3KGN>lD4taB3+U:6ctJb
B0i3aEYITr6X,nfM/$@:.9\spSHb_>N$6h^c'!JfeFT0=m=#qA4ds=F0dS?b28"QRr%g-'fPndXi0j1G
qW>+1_@c1)br1ePbgGZ"$!RPF%kR(sc(,=_H9=&%0%4[.Y1.I89\?+@ND;_n]jo2g@kg;O3W@OP+bic9
X42Un#Io%KcpnqOm@QOgB<EFikdrJJar)k+S4E.'SZh*A)`k^jC[oV$$[iLJQUOI2!jq#Pr.3>OPmms(
jK0Hfa@F04r2s/$'#J)kbs"QQgh%m1:8:l'&TWDKk'i(5$dEI,)'N;tF/.4XLBGlcd.-a+2PW/T[]"7d
:LmVhjgA:cr%].:FOrEqq\+ENa_la@r%hERm?8[Z[,$d5P.IB=e7V"Ff,9pKde8.jG7g2UR@/6NUVR[6
+D(?<P2L)\J>4am^!R<+T@KMY4%EQ2j4*S0RHaL8&<?Q;SYO*QN]tcEke(,tM#9%AIBGr(%`p)mn#Jt<
57FIcE^7*`,$<ppWi([N0`M,*b*`2/+n*Nl[9maIIC)X`HQKaJ/-'9/:=Ct=+kbj*KQPF`C(/kWJ46b/
`'DQo@L<ak:AM9EBXkW7m9ZrY]DJ$!SZcLGG2_OE;dF3$bVtJ*4aLb>G".!M#FEE.j2bP<X'W?-Kb*47
`fg[e"2*+B"BnQ4F"fF8Nb<<k(H[-QV\W4@?AIr/LR'+!blMOC=)nekn]Y]W%OA:\V)?bXZ29PV0FZor
#,51cp.sM'Ua+DFoV["9Q=ZmlrRn=(C?#f,*dkm]b:N]B#ERe!RFcVlO&m87jcK%.D=k(M)eUn)m@b^m
],55'*0Hs*$.Ccl?fFkN3U&M5FG.>h`="VZDDYJ8=U/:oE6=c!jtAHsY94AAcJ,Ze-qmj;VSV7SbKM#I
E*M<dH-Pb/&B+3%50FUK[m"PPCUs@_SG4,550FO:LWg6TT>rap;XkW#5SFNR=luVha#<)\!QE0W&4K,2
AKM6UZ6FopC'>*Y@n?:PIdAi2!,XcY!cOjtADJEgIdFr%B;cUO<NYm6hS&#F'IkQ0lHUK[op(P5.A'PX
S38r%[LfD5B@!1%B/5m'(YS7V6>seT)<)I-nAE>DeG,^pr,[9+)nr9l23auu?R[*;]D1Mn1mT-JH4(^T
ep_#+*teD@N4Lqi2M9,;Bc>SU58!ea<N+AFT[me(R2s!0X5>X_nD+;H6%'=rfjo5C]_6476VfoIf.N)`
g#MFgka,#DE3I7UjeF1:SVsb#OMb?dq""?%:E>3K*KS&t,Am*[A.&;rKp)`*Sr:LDDf%/+[D<kImYb5;
_er%jk3kg5iootph0jEKl>k+tVsrIbT>Xt<Es#@5_ff3H2i<:&T?mfsA#nX9*A:r17$;t?`^o4?h_#N#
G?B2*DFe@1.HO<;mhefjbPjo'aVf$"R0`T&*2[t[a3!!Ld5\PJo`na>T#JLig&*uH(giB-!%b^P6oZ*J
8nQ[JV;l[/SPK;)kP*6PT<k_rW6_ZMW+fnIDY0Kl_pQtKFkfLqUWa_CHSZ07cYKk,1#60^eO-cgq@).%
3a>VBR:1<.(TB,OIgkQqlKU"V*kR.V;>FTUK>;oU-TukfCsQg4brN0%^uP+ngiH\h[&ES9BA+0P(;<on
a?JXOa0bcucFM!<i;UOhNXt5TlB/5<>Bs<XHirdsXO_RX#?N\cD\YLc4ME#;_ER>Hqchcq)r995HTT:3
T;J0q7btD+eb`<V:@CKDp1qcp\#.["=7Z)*\\!]F5J[h)OpWOPZot8+PFJE#p3-X7aY'ZZ[ss]i%qB83
+lbG)G]LHHc/[f5V`dt`AT2f20i'(d(KSe^Mq7TK*+>4;UMeR+ln/0.D4.s9_W,:N_TT;\,Ln=6rY`&l
BAj>]>H?^pQJPaR)Z0]8J^$UUe6[VPBi4#PMorhR^jX6PQG:\bQYLfC>(;mWF"-*4m)@K?/e0dFIh67=
-+BVA;OPRK[U(?u?7!RT(0b2E7X4+'H>aElU@o(pJgfM\3M4ASrrC?WHKs@KZ-;!Eofh2i--:pWDo,rS
c,Kd(GM6JFDV"E9)rShqd?b<Jbo]i]*V3:1_!*_FAm_J$SN"e_C^uM'VG7>jbJ%G11uNghOS<sa*HKAK
RrMlm,eCOc46CE?3uhAL:s%"/A^V;/q8T/M[.nA<;_X($e#(`-iIOe,T7YNMRU%9YI.Od(HmNUWf/e<i
Ne>Af20MtB4L5F&,Je8(L0SJ;G@#uIc=^$7hWM09r)CZ.]k2fm=]Uk^]A;\XI$eL%ZWD('^2>[iW'(>:
*<\76V93,TD"(8=ael#B*A6NE/o.f1K<!G]TZsjOjW/D<Qg8qAFLXV2j*h(g)I5!6%hmZCXrB^_>Z/2s
BA%^"`EPH#B_Ic%mY#qEpWes5A_0F<QaErrd3gKZH>a+e)NPK:+"XQUY6hGtr'WE]O#?0iGWT\oo5">!
nk3N@WoVVe\G`)TR[jmGRSOUG-SF2Zc)+YiF>dAo9Yep,pXLA-p4upKCr4<K2:]8YQ$jC1`kA\\2mb\1
>eF?t`R/\7o_W6]>O;Y3=/5->B.gV[>j<D2mn.4SWRlT-mQ35Xc5P@<r[4ZiQVVGJACB5`iTskN2FQ56
?G)NaR*sIQDOk*cTZA<@X;nP5-EG&,nXZYQYYZ/0Sto&el^dKSp9t&A]H:g1Dm%_.^ZBC8LHI\GkGEDe
ZkP"GA;>hE?fjR"mb\90SXtaFj15#8dI>eq^/F"g+-(!c':g2q^8^gWjNgng_>*.FD.htc9il(T]aIC%
:S8Ekr,YB3p56GmWG6g(;\,5n1]reW*9[>%d2*M-\Cktp<?"Nf3bD,.f],*MG&/-J,1"_Qdl&r1plT^p
%2<ZlhO+I"[9,O^'P!\--[&QK*HQf!Nm?XJeokr?J0OutRU>.%-YN@O`c$7;9tPd#m`lI]ZdemG*n'`Q
@%,E-ad;@c^)=W5CV;AsU?sU01q\*]W?2HDZMspM>Ej:(Ronpp.Vs/B/oE$E5,3rsZlYbo#:AlJ0<$dc
Dg]Qh>Y.5'YKUNd.?#KB2M9L>E1JujFK&uOT3*s*Q<P'RW7>k'Ph=^ZMl'F6(EPj4?)cO8'=t5/%C<G.
]bSNX52"P-9:Cc',FoSi49=TMjl7cT6!@nMgQUU*VX/PI;HL%d%U%"B>Yh6j-6>rHen=*fI+W/,:S;C[
<5i-gaPT,6"$t`F5o6G$Q^=RJRk4i(7XBtNdBoW-[16pBk2J5hRf-k)/D!XTdYI&1=D<.VJ`8ai[(loh
o2!.Bo<IYRb2TOq3UM:FZ?KfiT!BNC`VAVkp-3).g#P#94Ckg7i;V+#o:R+j>odI[VHSGFldL<nW9l_a
"h>OrE2Tq/JXg&RE*L!'*[FMjZV!#QS\KgA;e4+b=foZbMNiqS1S[$iLFDT(7T#In)mR9&]Q)O[g9"Ea
[aSs#Pt/ZZ*EK?"LI^%q>nYs[n4-dU?=i+ZG@p%uCM#)t?[BAob`+e=(Tl+niCN@11<=oiRlO;g3@2N[
-BDP7_c&GHN4'`j^JHmm`KF-S/o)r7D]>k&a!t&5GmrEkFl""uoD5R:Lk<1Bk):bD3c,+?E"T_.lMDFA
UCGfP^Zu[1567@BfNuu,>IkhMK]6LJGtb^6+1Pr^O4lnVie[*%H3]dcYK,S!cnh9\^M,sHgS(?%fp#N"
!8Fu;H1nl(4sG2oRP)B=b0=k69\&(gSgj8SRZ>?ALEnGErr<R'krV,:m.5M9DeJS39..0Il(*iq?Z::]
:6q]02P1gCc%4Jm$]c8B,gOgZ,<:5#eQI*B9H,1#*7fRIc0u'Y3_&WSi\SWMVNaa?(j4n8Ri9d5Fd_M/
IG'sJ+bS0V4&2Qq/q!_L+T&J7W,kIEH*.#H7mZni#?=K\m3*d:V)3\aE>j@3A#g5U>-_Qs!G$5&]L6d&
9R)hqK!!KF3OR.Z-FU@u&8@BKG:-Ipb!ZnV^fZDiD=gr5@Gq#e3T"ofanW<j60tP$#L@`l7T35c-Sk8T
&Ip-M7R])>4DC<%Ds"ZYY/8VXOtSRRGuHa%/?SRDaMYnk5/2op>;nO<:M6SeMI14t1m/rP?Tds#XI>7_
aL&&\X+hkljq_5"HTH"nBF)SFfNTm\MQ"ZPBVh%?_tL9N#_Iq\on"uj=(ZeD.?Imtm;C\<2/Ib@o,:"6
=7I0l]oUem27(A>-S4GM!nY*+)jMB4);fUMAdDGY_kStYj7<NO8+4^-d15<lBM0cEp:)'$>O`TVG/n68
>E:lf)a:OW(.DL"cI;-:DV_,<L_SBWJP^ERQXn<6]7J[UiG#FqbOKadJS<0Z&Lq+c-SpL=`\&.Z#t\;V
>h<_c_@*!6QOu_S[2I)0N`paW#!5s9VJ%dH-0tFm(_i*IG0_fk'8HcaH>P4n"G0>`=Y%&\F$;XH*KTBY
"^;uNibFV5h^9u3,E&ViLk*S5D$3+@PasOmc0IGr8NXD#WWlCc83h8Qed:D*"r,<o>D/O%;%j=CQA9:B
/@#m-ZC[@/-Y0gN38aF"h4;SrC8W!+j*P-,"eaT'0B=3uFSN8-4^N%R$:WXc)UaL,m*Kq4VIoRH?'C(\
Qk`eHc5SZEP';8$-7F'e15"<cP:VBt\N8MC0]\u[@#gZ*p3*CQo6AR.dfN:c$"0fUcGrN14>>pgHE@@q
:[4G#R?]DW![i154d8Wl+uhQ@kOmZ8/a.:>M]ru6=b6LT*:MrK,Clt&kAhF/]6o!R8qJIP;4=T8h;%8m
:*+:,6@WVbfidI-HEAker4*,DR;L!G,H:t5d2KYe0bTDOe*Cj$T#R>,puHUCocTqsW<XfjjEQK=BKdu#
kHeJdm$g?J$'eqcmi=m3IYC6*;DY<=i%-u,C6D.RbdD9SF;Y(2`Tpo*eKU&/27f6c.nQYE'gmZ",IOC]
DkV=iSuIe:ZA.J0m3$fb6]ZqY(qi7WBI-F?:PBgcfE1r1q,V<bLD*gji=*0Gc8afaj-8d_:F9/&m>fZS
O#HF/ijXU<B6W"aN@DpbbI_,h9]eSk4'M54:ki0Q)=$%9fT?d,niDS=c'#ngk.Bbn7.G354'`Y77O+,&
dHIHQYg#[?P$68>H%Sa,oQQaP-jgaaP-mJ)[WnMc11>uM^0SC:Gh',tY/;-!FIN,;UX=1S9RsN2b%pW(
QUd[8PY3B^<*r=;SD<umE?1KC9V(M$;c7=7JaC`E,K-4#Zr^\'Aj2tW_ZJ."A&aqk8/do;G+K?dH;+T:
+Z-YPRDANt%DArWa>GI!1fK6WSL/$h%.G_20Z+T_S9=@SUP8sL9:8oS3G.UMIBXop+gt7Rk1<,V)2[24
28-R_e3.K]fOjtCO!qup:UW6Zc!!,BG0EZeLP?97?#LG)Lt,bjFgsu3fP#=."ZNS_NtL@]^up6)6V--X
cG-ZldkpTcZ)NKA=XQM+7\<&4]Y85h0Wf,4RqB.;].YVB@G/>fN\l_S$?M<Pfbm)%h(NO&>O&@iMmIFl
\XE=j*2;S<,;u!=4Q,G23f$J.Pm+L.*4(;=A?j-P<"T,+e#$O9f19arG+1o<88O!KngI3BBluEk9_3T`
c0XYVa\29%)3%dGh5Bg[4-O8f;,`fS/VfY2V*%?\HP.51R$3K)?/?#6i*MaI^I+D+Kl_Cj]emV*>e4NH
3#um-jGN&X*k@3-0cZ^S2"E&"_&iJc*+iL5Rj=0j[fi.2Jo8Y?fmG^MDO?hr%%2VOoh_WNe)QS3l8?/?
n0lAnB3X'aB298r3MK+Y6G0Y'dmddW1T6O3Q/UblSU$^2d-tk,\`LRGjn4<"I0[#:G%6u@8Cbq43<AO>
ZA;.*/Qn+o^1Cir".>K(%"h<\i'AS9KXf4Op9(HN.Fe9*[McjH4XV:`bklTi.P*[*=3V]q`94Q*4k[@?
#1&`Q2&Rd@Ge]\iH_EG,h9U/6Qe@fiEJ)\_I\%44Q5=mpGp@J1H+h1S&U1a(j+pN6Y3!h8TbbNsED<Mk
qkg720f*ElE-(;!L0:<dpIWD8R[m2e(JCgT!m>DS\r7*);4:VJkq^NjYb'ef="qo>A@Rp3FF&iiHq3_H
>"Fa\`^ie*20a`Rc1pE*Y=!7c)P`1!Cl_BAi*\MAF+iq0c,adT]@#]t,1GjN\D1nAcT>@;1>aI`m-SU5
&V<D2cK3D`*?FPhd"cq;Y*kWOm.h]_5-)'VWaBghOa#*WZTBCl[X#%&m5^Z1Q-ZML[B"a:fkEMT+:XoP
;6A(eTan=8a[!c4c&SR(`,Y?en`S+B\nu/#*eYNoHWRQK@Wlt/T<,#M:*>W4cT1AE)&ZcPZh7hGD;>1>
.D_a@ODi=F![T2-^5=u$kG!,1A]e#Z`-0/';S#Ee[AX_Q&Gu(2dIp(obN>C!Eba'/JCEL"IRdbtJlf9A
2I,`Fj47XRHpdAJCJjHu!0aq1YKIVZHAkYHk,Tk<)"_m)C.br`KX_K<jrRjQ0^.2NZilFH6qeH[VcSUL
MmLlDN9#k(4U++'b3JOg:$R'e*+VDCf<8L.1d1F-&E=:LfiiW^PCA^^a720Pi!42rBY>VSR:.@QJeKEB
DCmt1R&0eU1/7hQ>hNT),o;'/dmJ[?e*c:C="2>WE4&k?-e>*$/!Th)4SGsS&;m;?+!s<XE8pscE)'II
lu>ihUjMQr;(_T"7Nl#+MCY"N_`8c5[oKMc*7d\*L$P5q%Y@/TSo7og,.X@YS6)k:=q8k$Ed8[KZkL[m
da[FR(7(]ZEb]J_W#miZUOoW(BJX[.1%W[@[%kNWTlr&+8RA*'b-W%f__N:^#+u)VKnU#s^0?n6nncfj
i]<uODNUlp=eLH0-^X4[B]8*.e=;>.1XLIN8d)s`RWc-;LmA)(,<Np(5rn;FL*7OFj<[;Z]U-hX2cAFI
LT/S^7@FgL2lP)8KON+O3\AgbXF:!VAq"e<*8QG$^^b)0S`SOnS<NG&K:fMY3k.51B6,QO4L[p_#MaB#
T<tBMl*WR_ZAT.m&t]I,ZW!L'60d_kC2t$CoNE@O"7FA]lSsfT/@.Y-&."ITn7:N1Qm?3E[Is$CNqp0'
MhjHR(c[+J4Mg:-#:'!)o$N:_bShQtZ99kbWDs-%!"kZ:De$dpm,MWqOp>C>oR2#j!j[8"3'Pp[&8u1)
HCWX:k]KF#UZX#)llnJP/O*oBF)FYGcg>/hp,O-3ofDm_McnP]<fNZ*A9Lf(B2t-m.BpKQ>]hVf5CRep
DTmV3Y9"o4K[R9],e>I-p$p55SY$u5[l0k12Y:8rn2r0lc4dX.",+0D1J/OQ'ti'kZcp$S7Qb=lct]E9
/Y6P[h^k@_6N\IO5-e/)[JTc`QQ#%cq`3@)p3HUK?8`1kCDTWI=7=H'9q]KCi56G+CpgmgX'`Unce8*S
h3.tNT3:J=#*lCLR_7IALq&i`$@eu=E]Fj^n'+V2Z>fm'ACSaQQHnQsMO`h@6aNHtNAe(SBs"_*9]>kQ
"C_biG%PGZKZ0=,=oMReI@r)@kZs8VVjr%,IP,j5RG'(AI4)<TqH3LCIIfOOh"Yf"]2.3?ES0`:o?93"
)[k0TDlbMqI,*XDQ_W!iNs@Mf9L8`Xb^@ea_pr=RHQ][<;^h.4H9C>r/3D6jPkW=5MLEc./@"YWKg"u<
a"HNMC*Oe";C\hc[!HF[noafRE/<Y0Rc#iHl?bb$9TLQff649=9BWuc?1Y>JFtVRA;d%h;,qkGR(8Z)M
drnQH*=dL>UfYSi+u4F#U+n53e.Wsl>HupC0%@lE]f0Qa-Bf8[Pr!sXBFWheZEoqHUm?o:F$Ka:7icd\
O4;T1R@0nj/=dbtB51LJP->"UdWU(kO!g:]%b'G&Qe_LJRG%:O*tFl0?)TM),eh_1l?;KaY(Kn4Nc.(H
EYGl?H0%G_:eLKPc@ZXCLr5]u2;'/#;@b%ke2/7r@d!.;*j+tajZO8-Ijd`+2BRB_2''Hoh[K<.d4g@!
koXia2;('-bGuii,[+o^R7HhDUt%R:9l?se01i4/MhRc/%!0Wt@tpZMcC_G=A6Q?[\\+\Ee-p@T%X'm<
<sPnTl0L*nh/5WQCAlhiL)UXhLI;Oc/UZ#(DS:AkA<)I:1!/+2+dqQ.Dj57@5B^bKI>o,UND>-qS*<+L
13'@D):*'p!\U*.j%b?=)tpTJ4bt<JkE\OaeocFAU!90eZc!f)nM4NsqNDQFd,Db?G5*oQ7n14BXe2!&
lEGmFh-LXI]h?QCXO/HA/%0Q;J@sJCB4i-1KqcmAm;*nWH>OqK`iCsh2p3`#!$i/@Or/)K"$\BDdX)'A
@p?N=;(NqkZZBK/4&%n`pU4e68.03)(7toVkF*d!PER;iQI/71peG<oE@r"n$?`85"Di,];o1nSQnjXb
7\CI@CUGB.#)t<#,9aEALaP=>[YWc+q][<,,:8d0X46jh2=2!$KBdl?L;8(YRkB28GOM#-c\7/&q^3*_
2t`]nn2l+/oF-Z&9'7BPe)HJ>;+mh87#fKaX"MFBPrf9FVZ[Lp?WReNrr>L@k<DJ-m2k-ClJL0GIIhf`
p4&!qb\I$(qPpCU4iTifm.V#[3e#kuWh3MibW,;4PF"Je^8_tcRruubB6G?oSR/q:2Wg3<)M\JC\_D:O
@F,rUem?fc,XWK\eqfEiIpR8DDTLdt-CIMdA6PCH#5OT;*s<Qtij-Y4kOh)#c?=cs"VAZ<$14gB1XA-m
;c`SIQ%J6UKk[&H]-eW4L5m6(V3?p>Usf$t\uea0#()e?I-Q&?ZECW]]mj`t<"n'X4`dX>fmEd9o6Ir<
N3!8PbaCi8MiSbNKhtup)24Ear%>-a0$j&-1pG!,bT+@Fn.'?Z%q5!M77F)-*A^Qkp7S"[IP5?;U9Lp*
[UL=l9Y.b:Ydf!.8T2X*oY%0^3*M?fnBd@!\^>)fE]PdW3"gX3j@0XTeol5*h(7[+=?i2G/l@a;a#d&A
da^>r/7,fOCU9@i]B<=na&.0M'IX/)HE>QGL[NEI4CXlT&d20s2[g31pLV2cRE17\Ci3Q/Ce*BMq([KZ
B>u4<XEDO?S"I_Yq/i?+X$2>23.oFKh>[I]@S]DM:U@iBEN5G=rk&fkn=q%kJM!.GQ->&AEoK&U=sO@=
25bGZC8^90f$D_90/(73CUS5r[6NK6R1d1!mnHU6B97;f>0?Ma%"(l@R!C.*.+[lY3tKJR"K(odokV!Y
?'j;N't^BpB^$hRo&,\G&)]7BdrtJTXHX2O..Y/\g&)%jA(t6o>\ogcp!>\tcepS;g:,VNSmnl-OhgVe
1;*R[/"9@tR8%NLplW"+rMS?OK:AL,e!Woh=N#114Qj+pS5M"ef\/."2G/*BnJk<3mGj_>G]DdJohNHR
cjql&/a#&SpW_9E*='qQ3u%mRlQ5km_!Lh<9:^fWn2s14T-Pg59fEeI[*e)b8V^TNeaPu3rC9]C?1ZN,
#I/Nhg#>(p[!1ZQDfsr4^DGlcZdSOfFEJfmLoFmdqNUci*/:Mur/c%B)K-Ab55D1M@rV'JHUl=tjjt75
gG1TkS\fY/jjj-bHVqN<#d/;29eQb^2E9KZm'?5Mk2HuO\`,I\AWkV5b^E'](7?2rQB8iec6'IWc*nC)
6'5?2RHE>3.jaP/.Q'c9C1f8f*u!#]T*cY%>$!XgPG@-8;qcQ#)bDmpc5#5"#I=4blXu=0C:M]j2'-cM
?MW&\m/@h2SP5rmDef46F$\M^\0C"tVo=cVJL\(R5OCU0%#`k`DP)jj9!&;<>.njRlni"=`?%aA.@:ao
`9cHUTug.B/@$-54[onq29D\9WpGO]e&h<Z\8@7@\%[iGl(4*k\h5IWrET,bB!8>#aE%3"cu_FA_?S9i
/3H@V?f1fnR;6'kY[QH"b75!kdV%#m[3><\?Ymq(p]I-/:PKT-nlWD0I5$,&OIp7V%W#_24<7?k5;#=,
01]sZ8^%U6]>Aj'o'Q;=Z<nf3J)+UQnkNJO[J9TkG1RO0[cbiN$N)`Y[Um?Z`8tL\nb#h=:ZL1U/CqsI
Ma\qOHY#\t9XE0YBpJ)\A.EdXWD.JO.[/JFiL!g)9gQeKl8YO1I29kVCUS3<[B9';=+G:'A[X=58nX=\
eu&"$f4JI$,F1BLjtgbP:AYfq_N^-`1UOij_puZSkW$.%4h%k;E-Ap;F]l=/qC&bL[VTsWc^TKLZ@%n]
Vm^2)[_1Bup.(=0dsd\ImCg'5*m!6%\(16\dkk7bg#="-mq6f.YEB[tld:9mVK4cj?7&1hHR#f\[U;/a
[T/4UlgL2!_8j1O]p7:+1$$1D9A`m4rUXs*`PN[k9o"6FhR6s6\Qge`(KBOAf/S!b')7K)bOfgD!UE3N
[V^,4mg`dfqb+9Z'TZ.sk?YFDI@onA"*`&f?UI8Ahe9[gnE4efm;)"Olbd">Uj?"p%\pE"X&T%3`&>8B
[VBl!mAt#k]!gb.V@>GlMG=WqRe'4T9f%'mf@gA;;MW]b-#&i.C9B,5UL[B4Y6Q"XH*VET[2dr,4[$:U
S?HVjq!GO3U5Epof,jb-p4m2KSkh_Im62#[hd#p#B^@85ljmq.V:YR))Xj45AG.YcD!L],U#N>::K6F]
o=E:lIg%loW@cT&3D=YcRnZp%K3he^)311>,oO^GeiuKJ4P"+3C200trNdSKI2fI<;$b.$X.34lHJ[OJ
R\6PJ@)\/\kH3\NH2;frdc`[H#.q6WpIaoC37iQM%`.M$Xe$K>qa0\%q3P+?bC&tH`pDOhF?!pn4QB8g
rC14%q:oB,:_(YQP)qS"qXY<fR2KMP(FM%!,0P)!0@_2oY%]cI^BuTjH+9\Ef1XKi&:!@Qg0W-NAF?_M
pna*WBcLV,S[4L0HW@sIDIbg2N*RSZoKIEmF#Q\X?^`:nS/iI7U#gc%^B`ei/rSFi0!/akJsQE:K^&@U
Nbr:\f@?m(WHrhoO6h<U5NSs2dk'e+jiW%uj+-j:ok9Y%I>3UC8R=WA@-bF*iQ[<m``Z?7C[%K+c6'Ik
7`!p5kd4ESe&uFg\`UT+WoBN(p26@S#c/4QU!#VDm]jW\S*!HHDE_Q&B/?6fLFq9o\0n<GduR5CUMr@Y
N]tn_EoG\6I1k5:]diK=#@#1fm6=u]jHa.uLXSW\IMl"DM!q\kJPtRIooD!.%(uT?%'p_$j_ne*m&pm]
Spd\U^9ld5^2Gj^:)LUU"2ieFqTl:WF!H<kg0lo-=LUGBgWTcM*t\>@P*V/AL<\EG%SWotf9N,kaDNdB
i%UNO/_W@O`"'lX_WuZ]d.Vs(ra2_Ap9.kl?HXD1QYbo.^=%i1GthYPVn&M!e$`f5g-I?o/3<jPULqrF
ZFKV\T2p"!K-#nj5s`sU[(W6QH+7%K%gYHs%7M_:#+&BTZg$\MdbAY_c0c$@LB;FhLM1oNdk]sMLbO&)
KK\l]ds-k7Krf-=8,G[BbZXX@+%JO*,.IJ@^W\n>"0qcn%MFE*eV*Uj&&1"`>n;_<Y#rb<-&g/Tg;ZGb
N49VpbqYMVd.PUgDQF,LSmF+pFR*tI\\r[:YY$4N6)X\KZ5ZY0)<JQ84untDm)\\7,LP_cb%JQ02l4Ea
L'gi'9'1Sd5\*69Wn1&rFj8/]^34pkfd,.p-e^_[=1]'r2/s-[LhEQ-+(armcSqehjrS*rNHdZPLjf*_
]q;%!g!&g-#o(18U$B7.h"T(n!/&-0POeVp4S%3P[i\@QCZWAK?eQGfli(5>rr@/#9]18==\pb+$#sUT
F/N5qN,>.NgR@S6h<[3Z9>gmE*<;olL":!1T/X('ke.t+d>%%Tl*[BO>]!N"aTju54hhEjHU"n&[s=Ng
B9J!-KDC!*hSZbeX/;M$'o((b0B&<qm>L8ica*u)WfI\.0-.1Wd!IUQMV)t6R/4PIoQ+s!p1`MV_$)o5
,MG;W`I#9nK<sjO7n<'-j0b>9.D9V_9>^p*m?mG:(>4]ZLR%+nXWF*ke*=9fT;e6V9&Yarjd6J+lgWB7
m*j!H?F?bjE-E2&dpY!bAY@Ikf$"Y*o1G]bb\cg<]fpt5V8M!a,EiYg4P1^Ub^JY5)Lg!UcGPTN/5&jk
rFS81j-s:7?4cI3WWG#?95nI,)Y_J._h9n;]M_LHpreW6bpmltH0gO_17gEPNK_3E/:d=PXIfq_XILV"
R4ahM,\:`2n',`p!pTA[,;+r$8_$['jh>JNj.A[0]$AW\\gJ*TOLJY[J]f+2d->s--_e3/7/_jF1ZTQ^
FSdO4U>j>o#%hSW;]T.UYHu/n-r,Ab1SjC)8Wi0,3rM%!6j0M>F0X-:d!8>j"dC9g%rC-2a?Xk#A%E:t
C8RE)_l0<iQu8'ng.6!G7W(':Lpo]91$e.Nf!KLfCbpaU3t+,9)(i!1p=h/S`]?!td0YN(SNG9$:Z%OC
NFXcJ1)!FLoS;/4k*K*&E/OgpPkc\mH<<dVph)[lmJ)dtVsLD:F_tp4%C;)^*nD"6H_TlU&su(W7WKE\
5b-]+97Xl/Ul`-=+ser*&n;UqltCUgO0c)\`m03BORA:gc;qR?U38/X-FS05e&a6:ReaQmAEQEFo?mF_
8-Nhafso8jjP&I`noFMdhjoLk(k^H([,O4]4[%KRe=O4=P%'uBDub1hPG5/<^*>Z;fZ?s8hU:76FRo>Z
/Q6KVT4g(dMp5t@+3_$k;uo$mO*9)@E^#K8n,`Vq/omD=14(#o8B)%gJ8^XjN^^q:jG?fuLUM(W]Q*6$
FW<1#V8RUj^h'-bJoSiA@jpijN*3(8d?>8kQ>mr`Q/bDXEP*]kMrTatVIOAK'&i!6Bs:*cOt@5D3K7@<
PKi=`GQ?s=Pg*1gALDh`#f4KY%VFtq&jrbNj9!\L^3-!;Vg2!cFV+ARQ3RUSQ[iG?F5<l,)g\*pbVir0
DN7.dTd+C(G'Ol"De%jbViGQ]3kP<,f/ijIM$%Cro^E<W4mg2eWt'"@k3j!/>b!@W+:PP3DT=L85Rns"
i^@"&A6PT#>kpB^JL-WH-od9RC39c*BnKs>diKBdDFY?q)D'(F1JdhFQUCSiPuP,Z,EXu2-3lA<NIk<n
VYNpG''%7lP&"hqk+<Duc6,),EBu[lopVB4*a)FCcO=5AJJ_:pi0c5]g*-lj")R2u.RY)2m5T`4CoU&e
h.X+q&Fl4%7*)(GA=VIC<=p$G4Zn[l2WTfAZm-3uP*$#qX@"Gk1N<'#!GIdO-)=W=9//7@]@-E0+PR>P
5c4gFh8WZ_\$1RPO"jCG1ls.`SC_NQ6'$=EDNhDJ8NV[H1o485I<TUL>o09`G!,Vr@YR(a3P@ptc:=A=
`RuF[OsOR63bG]F\oU!h\7jn4Ml6WuKV]mF6t-kcMIpH/AB6a@VC;a6i9*bdoE]a@DYD+n,]Xfkl!9!&
MKnR;%jU\\WkPA03U*)t@VONh0H3-OrM2<McBO*j^]Mb'Edsu:R4PaXK@;rR'dZfH1S4!EIdQ:*VV^:)
XY!I6K=BuZ\udeZNl`mPc?X>CfuWoYRVE+j8nN]&4-R:sQD1Y<R@C+mib-D5RBp=_'7i9(Gla6?1+b[<
$Q_U%3-<V$)7:%a"H/[HdnBub3f&s$'.n90XM[4<@AM'V,[rIfSA(m@pn!O@Out<N'[17KOdhk`&J.d$
l!3-0FN8$df4mVZB<HBg$oIP/gpX'dbh9o>&eZK.D,%($YAD)DSt!#@R*njoRmV.MJF/m#N#ZJSdX)d4
"[%RaH3M,t+Ebu%7B;5kS9ii1!U#o+KljXZF;T.>0gqkVQCTLJIIeiX&L"5a,bj\5ksMRnWTFoX@`Ld!
l#r)e/)cr17R14ga@.i[ZZp(@)a=ls_HeMGJY;oFEUc&+o/Lod^1g$mQbUC%%*=1`3P,\_UBB%"P>.Dd
Khbl.#<!LEA917Dfh*\nb-Dt+F6bQ@XG9T%/NIDQ>Z3bU-EgV`o[JO714!am*8Z$DWf5G=(!_S&GTM'2
37*]u-TX@NaM`.A)75Qh==qdDAjj7',!=R(g%$oZWZV:Z1L6?TGNS6HG#9KJ9cQO';uEgLk2_QA-__YQ
/R,AhipEh"WsNqpqjLXRQ`8,KG1L0RaMldf4V:N6@_E^;)ZJ79:#9Qq#.]Fh\@+V0k(r<oSo4Q.%qJ-M
)hGhAY$%W+o4]?JNqbpLE:M(GUJ`6M#ojB0l*U&GVUT7;<$#&a^'u(ZSR-/<44GNu,<"8''8[4&5%mJ5
QZ8c&SYp#@:oBTG&dugopLqh:E?7.)]nMr@\c%^H)L3Bt@lF>e%X(^k'(st+nQV_ib[9`2b4En%3o'8'
W-M"X<-9I2B////A)Y)OV^u@ba.f83A-Y5T[q5q!2O5`0A.X0Zo5;sN2mgqK"@+<%W0e@f@SJ;bF"[b(
EAMSL(9VJY#aYW:+\C=FfjMZBi+C,@LQYhQj%Z9PeS6sP.4j69DI!at*\D!fQt>/3RdCm9j$g$)*?;g(
EdF8oj*GQ+XDfe+"Zka)oLFbLHGRIPQ;$La=um.O=fSc^G-5`P@c;G)Z>hdj??8g0Ma^$JROr>8h;4<B
$`8eA`?.,,pa$tW;;'[k"H-F1/YthQ=)S,,pa)@aHOUd+`7:.WWqfe#fW$%'B'0B(;&d2$QX,J9Ri8j.
XPTkm)>gaK%=#$nh\LSBF'0TN/cuX?T=YE]`jrR-CBtp/HT_Gl8(^%L@cZ'-ol5"fYn!_9d!%^qIdF-,
1%/lV:rV;al7(AUA_G!3:P6Qmc1>W&6N'I!4M"4Kj;isrg9.Q;1>07$Ql0mU#EuL5gHrHYob\@9)3KPI
P$Gn]W9p38_Q86"2H[=+>f3JhG,^g.7?Fr\P=Za3/2_Ih]F+>U=_&(a@uSZOM,%#mndV?Z$\!^#ate.1
l+[aA7u;&\Wheb[qa+mik=sWk+Xaq78F,eWq"6G,[_pc1.8A*i&lu42k%6a/*4U/+%n*G\bRp[brr@l!
Ln'Xlk2P_Y@1L"]YM"!kjCa"dS!so/KR"njG-KGX;L\P[c_fZ2W6kl+CFMmVEsP-W6*D7O1GAX1RggF/
)8(0,AhgY,o2@^[#)#N0QFBs^5fn>&d'e&-DT]K[FBS:b[53(GrN+2'As(K\QEEYJj]CYeB;WIa]$3]>
-5#Bu%ptk2CL$4Q-THf?>!1Rn4MT5`X$lkAX2V5sHbI7r/a/d4E;QP_"-D&KnU\qGbuBLF/q]qq>Yc8d
)9I'JBL'V-V2Xt?D"g\XUe3)-?/#.;.376QNsXgQh@W&D2RqP6ZUQDolV,f=]69S,S3T(_A0Hoi$B)''
o_BMVHtYO?1SiAsWR,Es+=:PRX3kC5H(A8E"U1$hRr#ZLR(Cp_O=6K-h_a'S(a7UHogBL/:%7i$?W!K,
np3tJha;"(Z4QC$q(ePRDJ4;AWQi/L8&?9QI8uSc="KY$(:_\I>!1@#NB8^G<sG(oP^&aXA]!=eU098u
phL9RZ7O`g@cu,-#@XIrB`b+,28#Z\S,6fq2]N>UUXAeb]?os,MafQdIdFnBV^OZurXRXE4PCiXZNp2Q
liU1RoPBk2mEJs%0%mH!rRioh4M!T?rOM(*oECkErRieSrQQG-^1^Gg#5-;K*Kbal'Kr<[_l,&W[?ckd
KSLnhjdAN:VP6;E0XH*a4.ON#]-YJkQU?jq@0gsK]4OrGZPL\>BEgBM>18TM#5rV6m4oi&qm1jE,+=%)
c;-'cfm:mqP/(1\<i0A"0eU]6^ksB1/!V!8d2ZOg"+;=`=Q9\BS[O\*fET*jZs9q_UXS`r<ej?o*dOm`
WSo4GpLcdgm-uH=O%'uIrbcn^kO-TZ4#dD8&JSiHjsQUeT=ZPuU(M:ZLe405CAc4T\Y@\aV]W9bE/17R
cW!:!RRkKKnGT@:droZc%,?#B/oRBU[-H(f6>d'(H8f?u"Ft_kG(3^-e9-B`Pcs&;J_C!f,mRR5=[ER:
ncHR\B-,,.^tNq/hO3WC>h<^IK,]B3dNWNj?$.0/&F00/GU?7hj]%GQj-8WlmLHDS"QZb!jYVeEKC@&k
ZeAnoh2XU<bL&DZdFKEur,\:Wqa,=GF7=?k>"p3M#bYffWU0eL]1b7/'kQ,W\I"[FZ%2nf36EP#QJn28
q$a@a,GSYf$J(ooZ',s&JKuf4f/MNXR#6!slp.3k9^D<ghHO3<#Zc^A-r5X[.E@+PA.!YCQVYU;*c;Uj
[ic0kY+K?0F5a5D46ln@^cOH=l\iGKje%eM$pQFV<MMFrAu6b)_bVIR1$4Nr"1cmG6>;gKa)4T68o4.D
]NTZ%EbD84C)jQDL`!A6X.kDAo1Q%KnEolEneF;nZWAd(##<_iW'jZCoZXs2O:.&;[Km3NG#pU`I_gu6
2Q+"E$K&$,ao;?.na:D3QO<th>N6S`^DupJI?EgUo+<lY/$Cf!PV56"-T64]+4J?UL6IEs3m5`rV*6QN
jt;,'nnXgL##D+&rF28I\]np^Se\XGaDFk@1PG.T7u)"MfiU@/<k*WG]sELElF^3FHRH/1Ck[pHk%S)K
jG*,3%1`S.1)XlA=,S.7S:,%E#fW+19[=VA9t\J?B+@m(nlFGh<%r:5fk>N;0_6ACMK@%^OAkA6OctY5
+S.^l976?1cpliUZgb56-7:^'/iHEmVck@!n]WRa>l>*+Sse\A2,*005W3eQg$3lV<>4Jal.So:g9Ke4
Yl2A^Ve&ZuYF]p]-kq;:DD8?A<pUE+5'*k*q;rUgk6^BZk<2>@Z!K=B_o.au8s1U+ELT=JB&CdJcFgPL
X2d5lduOsL?#DhAB5%l+B:nn3\&,U_fpY\LP8N[MZ\I(Tk7:Y$cuq&_Cp!AJ3R;:(mPE,On9,$BjLGnY
0u&s_cSm>%PMsQFWELo]LG+K3?)Ya$KKPE;c/tKg`p%UaSch,[e%T]Rp/_gdlE^,M$0KUH*]YZm09[7H
\!j$r"5bf=G%$.r1Da_EF`!V6$s7m6jNGPuR<*GCa\Ja:Nmd6g_R\4\--#QQN)Z!Ghg/i%SMhK9'LT&+
e:B[$a%H=kJ+@L&8<9S`DlE7PI%r<LL+R&,F(kQG):*)JG2J/m;^bR)9n&h.K11C>.[81!>k[S?@A]jT
/CPXe]g/AT[ViJIh+i6pX)FD/EI(l+Gs+]SgGM$^:=BD9E./eV8fkHS)1!!ek'im`\67+u3EnO=(-<"Y
=#qgYZT#a?r'ue&C:/kX?]KHV2#Fi9oY.1aFaMDVhnEoHii'Io=DA7s8!B'?fBS%klSVP6oRAMGGitXk
mX>OZL)q[GDt$[fS%#e,Df=8H/h00Pf,SS?EY+i^l.qi'iM<AI\b.3l^$t0<#C2p`$s=hXpL*)$;0a3u
[:N3:<i0u+Yhh<leE3j8S[h)1j-]Xae8<@UC24r#g?+UlKl]lb)3*[$Ed]ICFe4qcH(W92MgPWp3PWpV
C$Dj_'oY);8+I2#k/_>-:6O)>(X#'`p]oSq$WXA$B+Ne2'?dru:-T$]Z_#b5mD80!FcLB*Z`s(!G3t`g
GrXmT?)O^77a0XsVK?++K(<-]p;VF_NpA$r2L;i@A"Xo*en"aNbC%,HBDPALG@d5_jC+Y%&WW#-b\#Uf
B.-DbIH>C&L3!6k0&6bG(4W6Ndla\b/ZmlQ)!%26g#a<LH+oKqA!3c1Z_$ISf>8NLa*c%X_hbf`bsb&f
=XY_i5A043]Ull=QJG?U8^>ekF>mDdQFC#.7=2%\AFK<VBqXga..VJJ[2)YuO"m$JgHU.(,M67,)fa&X
)/&(6,sERJjp%a:gZ[>dY73P"e3-uRSGok"]Io2rp%F>i/!r;<]ID+)i_-Z`piE.q\5@C;M-Ck3IEm#i
;<SM(,Li!V`GnSpRGid`r%*UuZK)%`B_C)n(mc4\2G%Co`!s&'m;C@HGBs].O,Z#O%rC75rM+dIVa[8]
MP`FH"Ef)eCp_tGH'^H.*1#m_OJEkadcjK=rhF$IBQIZ3>[;_g792@lI\R+mFq!-"'t2@6Cc*S[M_2oR
.PZVO9$TOb%jZ;BcBhVL*DWM,AP^au^Ws@HP^$]k<G>/#nX"GD3N/U2O3V;nn!<rbU>ubh7@!)*59;mu
T3JAK\p[VZbKr(-?V?F4k+9q3ijUj:/ga-uI'^tBB\gCTfNC0_%B/OJ[<Bi&*;CUAdHbKKA#&lr>'J/f
T8Ye!X`pU)=Em:>919@qb4_F-LaemTFh2Si[trR,nlnN3;\!&6'u?Ao@1P61W2+\#McH\J4ca2uVhR4:
X]*Dm=XW2+E`fVlDd0"1K86I+hG+"M,Os!FlC?c(93kE'?<QnLnC!p'TADX-?aS[(rJd`*l*j?;m*?KC
c>.j(^8\BLidb+'bcMtn[k:H,YP*_ITW^$DVd/RM0<dE3-^3/*a,@@1NE9)Z1=nYoZMQGq")"1H/j,H:
2+I88qK&mg_h'LI,=)=<I,.LYk#okn\E9I/]XqssNnMYMSo/GD<d:%?K$p(Krm8iGh>[IaD+VBekF-2F
c1FcVbJQs;.@NPWbIkrrg![Uac%_8a$$A;Agd)#rY&uc3E4jc14@stN>`e,Uft+1,ju&TVXD:b>W+/Ni
].[5octE!qKPLt[2q+=0P'g]jBgmdC0/umXQ>C`^4r\)p/_?uBI,qnH%lT6aJWd"8Ec[9LHqtB/gchIp
:5;%:R,s(E-,uFuS[561g(b1XE7%%jUJbu/ali%e7lL/2ZQdlc4Z*;/b''+c=?F&11ji4*3Ob$$3%i_1
EL3ipll7/aNQ4''ppf/R*1RB^R[KA9d+aV\el!,pX.:;i6V`D>XL'79=#s&6R[jYX;.sU/NbtJfiXW?X
h+]O$.T[*tca^=%WhPK1ihNYj2-lbY*M/m/d2*aBbmpWfL0`)s0,R\#o#qF+]I,TU0+kt"HXo@+I+eN"
-9SX438_l-m.Z"kkkD`^!r2]'6\E>UfHo;"Y&%YO8bS^PH8PDH%+T+)=A3dT1?jaTI;'e$9]S9208j`"
6Oj7I)1q#fg)Zc*gXPG0itA\(.IbRj]*:d=kV2`"O&`6"Q.QM$ll!jWaNNrNR-))["D1[EbW*eIe96Yh
LLX7fggPsDVc/n/7b61=aPjANFB>PoAfb5")jcIa_:<b\,99%nF4ep1OWN05lCfi(&p@Wo1GF/33VTpl
p4BlP[lX.9=(KS,Qe=Cn(DA04pmk<PY;aE8G>.3WI`b3'E:W9?Q`<o&kK&t(&q/q(4X[Q?4WS]_/Fmp4
<Tfu`O;6omH-V1<fK:/o&*0/K?KiKNRMOlG(iSl4XBhC5*_ip+dhO^P(Ci4<Mh!)3i!IY^YGtRN0QZ@7
"i/BHKX2[?f8grYO6p4c%Bp\^7T!k+gH=6!oq:'hp-+H%R&Ju6*j8BcpDQ1DD5GL!1&tU]Zt+k,Rkq;6
!-,;fCo!e9jCt)'>4EC22e0q9nFKP!Br(-I)3*H1Za!:4fe'nDjVnPMcKhc_BPkB$G)'VN1LQ[>K(C^i
4aUh7G$f%'L56oP08Ia!04rInqc5!Ve,mba>qt<u>3@]qh4kX"6p*q9*!\IZ7q`,\#)K9:]gcGim2ue%
PI&@<-Ic+oCh)29\[XE]dqu4c#GqpCWPoopZ1`GU6q8=?fqd-_Hq/%Oe*nOs5bg1S[&5?rR'd#5=XE!5
%*??<ZH:Ll2er[FQWgu@?,gt)05'D%lSE^FLk.V@[rIo84bdIoen<<EInD58)6h07L+]qdm7-79"g(7,
@+!GZ7hJB`W!%m'fGu9YP"$(O>&)4((8E`jm0B;QE\Kb81(-,@7HL$ECZ43\W9iq[,EhFmXYYOq.1fh_
ZEueD?1m=Qc!Q94\+3mh:86C0E#InQ[h!iKkLn(Q?9:,RE.]Z(^3eRFfNBDu/JN;3S9nb,X,E1IjW8:o
nB7T*nQ^?J37MKKo^b!OLh5f1jO?dB;"(@el>njHM\FL9oCG+LLJea'"-mVJ*\\S'EU.WdW;*2A#5P"D
Bk*4!Z,*B'qP"]r)5bNE0U&ku,:L(ABndP9g<WJC;3IphD"R:WbHK5074u-aoW(o]2M8?rQ_UA,At41P
NE=>\#:c=:q:Tq8@_gTl`8Jn,O^\*aS.sP6pl+G+p-pJ1!"59nd:_oW>*k\Klc)7TOdd=O4>?aNF/RD]
WuJ\B"iHNq>OTgs*-__X]1dN:gm<JW\p$BPDne*'$rtEk3`lF)+(K^\asuK1ac8JGS6Yh5,KZBfXR9,d
\YmtS%mR,q4UXT,0Ed?sFno\eRamV?b]N'#dqnXDg!"Y`SY#mr5I=:rH(SqcQM\AIAE"OX>Y$*BE`8*a
gZYknQHuNUFfn%jUg<[W+HSk1XiFUp*6=/3DF!RHH7abPNT@#-_^npjk)>k%&KXNo^"dWudj`<gOiTJ'
]'U17%aL2:_:q$=bLK?F]>4-KOs$<Y];nJimXXJoG##V6F*LI-^d6W_of,J.%,:c-8#r`\Ul2^625Luq
dIrTt7e_)[**qe'd!01PWm;j=kk+XZH7ShWp<@74bYL0-q+sR.N!$sF*mm.;%YT$X0S.t1Nk!95>dRs'
(,4`(-PXeJ7S!df/CO%n2qfi*LdS#hC:I/7rDZ3krr=&*]/-c;CM-)8Sk8K(?W,G_<fDM*lEm+S#kUS7
AFDe<hao3_*6t.F*-sB^)$J7@jD''40sX+Xki(SPQ\%L?2*E]SN,=:o\jn<7/;N4FT,>M%@2OS2ln72]
$99*Ff3sNQG%V),RJ)[bBKGk5/FE?l9=`DC%"T'F1XP<Op:mJ#YBr4DA'%N*^W^an`q8%?mUPtIA$p#9
WQi)qTEa2BM2R.Q.FWDYBp3AaA^.04\[mc%A7GW+RRb4lnE+VX=caZIa``\r0ti\C#tiZ-hTaPi;oa'9
%N@t-rBXaMkT,a..^tVn',62_V\PoN^D8@QXr0lY@npBPh_=q/*Z2l@__Wo=ZHnV$/Y7+=q/M=jHeGoA
3@7<A.drlCZVgVET&W>oo9:1Q0_Fh$OO#O<2LUuG"W<(P@_N`-G':#46Jcdj1c(,r/SN:XWUHF`m,?!J
ShIH[?sZ4`*Cf05;N9_.RFun6At>i1iJpO>S).p>D-r4jc*hFbK@ODXiuJc32&hnIfrrLWoQ+N?J5TP4
OS-cdb!`QiLdg#`4Kh&?%!!S^:0GFWP%csGj2e@11>J=c7N8q0<i[6>d.@bgjDcGX4g*CH(@t_Rd?3,G
\fI80UQEbkZo,'Gk]>c>P:*_41sQcBEq*AEm-J7\EG@b9H.Qj6D=2a!JOk2c[et39KLk8"I@VdT@QL:0
[@th"![[.hZ%6C`>hsHD*8&:O.GM`[.9fT:l)14",FU=FCXbikK/_60EtB]V,S(LKHV5\?&t?mSVj;7C
32T6EcMLs$4"+<f9^Oo#(0Ys3d)h<pXYahF2c.>X\t_B&Yg43OQl=4%=$''E*)Z4:SE9FtCls#Q*dAB&
EB2;/39"6C%N,FV!h$5QM#uiK&KtYWVI\ra-]+T^S'lt\Fue"EIR,CfT%@I,M+TEo"DW0oTlrO@C#V3H
;A*BKoA!?USF?>2*^,srOEn+1U:c]"c/`Gr/n?>g,IGW5Xgr$rVcSa-H&Q=VP?D#1.9t<d4$s[babE5!
I;%K!q.1I]F<r9$@?aD&]s`#lF+&ZtA/sB'*0:ra'Y@Q1\u>.-/n@5FT]fI5+eeDO3UPW2j9p.'.#q,p
7`d#Onikmrr4Gh*q`3A4TcMbS*Z:XKL0(5N=2OdZ:=_9<\l$EEk<"XVCdJZ0jjQI`l<[T)^6'4pT>*CG
G!'5/K3aBP"mENb1GA2TgGMmg#A8bX=QA4@j:1^[m"nAJK'c+LFIqnCe^$YMN7C]7g/-prcYH_OSTZS]
%YKL/[-L=K:AM'[]jsMk]0=K[.2G/^dthY&p9q3J7J%Y>d9-`JMoCZi>iYG$;TS]aB6JAl0UD^&rV0Rq
3@K_a]1M^,HnrcZ-&u)%:McUC9];3uIr"as!:5g5G5T8Jhd`8$m#JGLZM>TL3dF%sSfR"k=i[S^:OMkb
`6S`jmUotXC>Mm3'^K'u9\JaR2c!q@:adG*1sq%EGr[r2/7<0qJ7`[=A92b^bX=5t0Bg_5U8i\/aOFdU
4FGs+]2_42WVM%e-t?:.p^H828%##jGBlnXUF`=L3n#nkOTs]nc7cOdFr/E!@a?jP3eL6#rlG!nSCMf,
-.U/Wg%cr<,3+BD[V7T;kYJ7c_5!M],@IIqCU=L_DaC'0K%m(V=#o'`&UP#3buD`+HUa^%aD'hLfk@c*
@]s>dQ+e=8ZPc1n\E4bZm4QA2i/s:9b@/??l2\iM2#CffD=[uL1<^dQ[C'V(S\oEF);TI"PXl&)4'tu<
.94X.'rfLQZZJLm[G$HMP[3P]Q2%\^drosg#g&12Zd_jOnRatoZNG;*A;YYHG-+@Vj#^VSphsejft+/"
Bt_0EVKr1ABkbe.m5mNs'dHbL7WNe@8A.1e,nSOV9SNtO9trRtEM2K%K]cFiRCtoJ]1WpY-bWGF1Xc.:
.%pD1C?%EM;cU.Z'=N+UT;[QgJ=*:hkmI(D57G;(g(BBH17gkT40m8/>&F%I1YQ-@(uF[uP7Cig'4fQ,
7`4`@?RK^ne_A-NVKsf+Z)U]mZR<)+?8A-3+'7.eKR#;C>/H(d);]O[\e>0i80KtR@FN1@=('K<9QH.e
DTWS3$1=4[(oS;#2-TAUE^7.S;A0bfFPTCj;9=Q<cY[hQ*4?@S6eY[_"Fo%jJ"JQIa:do^rrA@+4@`)m
,Su81BC7e+kLA9/X0jtXN+[@:q-Q`^J//,'B.^3TjZS77G-8Cg^"H?lY_iK;m66t;kjX#"Y)0jAkAY4N
FT%i00s.$3?(=Qf#%.p`\e?L)`ioam9Ie`*3iPR!7gLN494\@:B_uFH1Db,cH?e-rolr_]piatGe`W0o
D=ik+_%8sHe?1-!+=h%8N(fj<m-IR<_FO:0rj9EJFj-Hf4:^<.J]:iQNH$D)KH?P`a@(%RQgIKu$q`-c
4_6JkNd'@+lcqP=J(dU2CqRg6H6A^,U4_(+HUkDjUh*cCrYbJa+P3u4LQrPBcMmkQj.!*_d-E[&Yqp/<
-fI:5B#dCHGN+;=bI/a#BLdHN;i3QPYO)bR0m_`C1cWecT_l'Ym@@t3#F!?21WVr61ef/OJU1smG3<^;
1+h4..*FM?D.OV=D"GBhmHg?K?Dg0CZ(-(`6kBj0\Y[F&GtI;gZ$$rdP=6W8(h&26jH:nD4?XZD%YSB<
T[0*7j\.]f#Tp3Xl3MHQZBPoHKpo75Qr'=iU<r19OLC]%1Xe#INB?q#-,PJGZ\]`rN(-/Yip/Bkj%eQE
89fcTg.Yo8%hIC#RD"\@AV_UEJ(W`^[s\2U[04V4`q:dV>0n8]I`R7!#4F.DKSa/aV=_r:Rl\5@(c0!]
'e:;"9rhMZoT>>"\3OVO5+lG_:3&M,Tc:H)A\cKjjonh6o'Y2YOaB5eAa4uHLuX<K3"91#$([[F8"(bL
G0<is^(?Bq[@Et2o21_^-TVa`1(k*Xg(B0u9!4BskG*2a8HA6CX,];6AG0^b>%^p6e]KLs-imN*_$)l3
\$S4l;7Ab]VAU%OCKT/Q+D2)9rNSNB^U!_b8s.u#!.C]h8mS]dT!)!4`>-Kaju=5l)09BB?*0<OHZ4=)
Z)Se,%8tFk%4H;Gq\Q[.XLpI#ZXjH6QsQ\g1<<U"nBX\mm=%(Uk3;"U)-%rG4i@giUNOhgAWJ*^\&/sP
79f'/;3/$YK:fJ)Aa13oKN8$P:#1:LjWDRRI$_h]q)k1O\#I;_n"25lep*@UhfW8Q*t7RuL(C8e&Y0Dm
ZNbj7&%-hZ-=#;@RV)R":"Z+$Y-59-e=,C-[):Rk0!?pA)(<._c(5q/$a7gSib;UKbDr$rj@%b1%VU2b
'o-qbfdNUfqT'I4?I?[+8UIV]ePQT6]bj:oWVGX4P>T5\T0quDGG$3ZBV8TZVrO0I<U"^If%_,YS#:p7
S[/NGY$ocE[20IX/3H5D_m-Pu5&o>0NnDpdUl1gKFna3^llC9R4;V[BnEoApB_(/CHOg#GdX*p[%&k8>
YN5<0XU$(3IQ>keeQ^G\f30QFqIiIsGO`iKRI2Y1rCt8rhH[JJWLQ1kjo*kX]Q<)V?Ak\Y$ZL1+qg19'
]jG>[ifHSla/4OQT51?M+%P[g(DKb/m;0_jYMkVaK8JjbrKmje9m!jo__)e9;a/8+37I>TeDE"OjPY0,
T$%^@@Vip'T%jFC&Q6>)A226^SLurP"iQp5k%"Y-]Q(029>VsO=s6V.0QBN;[^n"=P(miUkk2WV,ncRj
*iroLB%KQ,k8]"shUChB\l5PA_5k"j04FRr2"5pmU#7IP>HeLYD"O=@esquhc_6CZoQ-]IUlS\tU#$]j
q5Wg60,mqjiNnFM\uOoogHCoP\+Y!VUn0q:<+hb;q_STq[F'/Ki<YKCCsj=0)'.)UPDr%7IM83!(6512
::"#A.;cuPkB#=&H4LnI3UEH-Z[%TP#>[A62UQ;6ja1bj%D=-"6].2e>oS+eB+(f-M#)U/k_/1D]CQ\+
?2jm5ejE)AoF*mI#RGcA0cB%&?N(h*0mGdbf6/!q3@F=*emfcsQ)3l#L2Rm^Ia3qt3aE:jKrOk1=5!T&
O[@nDZo]+7P#$5^V'`PkIWh9Sm0T0Bo6RKe&cu>A-Z@$d>q]o[LInGj_Pd5EG^_Z<q<&^g:JdDE*;Nf1
rTJ[Q<W1TCDS##)p.*R#]rUfKh`>U9cY$-9Rhl]1:1RjSk2a@H30>n;bo^WiG<-4JN&efLY9N\2Q-:c'
rRPs+rrB`Zrm1EB8N6On1?eZhnfL2<A+h\s?W_G3c:+doq:G=)7t^2XWBKEloZkG>q;5t1?s[RG^Sa4:
ZMHPOT@)fQh+u?XgcV0p"*tdXkN@l/ksi;LH@M:\b3'GmrrClA6\G9uIpr?J%.RZ\rp[V)A,S^F5M`be
>0lXZ;!`\*M<_iol-,\_-`thf6c7Y0PAJo!OkVb)QW'qqO_21"T-BQp:ST4mFPPOAhc$!QDW_f]!ri7I
Q_$rDqGU$NUG:ifC4;><gA_.rIT\3dh?T215",X%d/>ugI=or=Y1_sS2;d-6=6r,30:@Z&pWgMli^RU0
8'`o4c!&,.Vu;n+/%0^>+1(sBrnm($o<-I:MqR=)"AntUccc4+G!:TtH5tZ&rh/S"In<;2cI9+KQ]^YF
BQKYfno\tHD#7iagYH2BZ$IP#TA%R446o)UoO56-nsiLOl+$p\PPt=QjdM7,]3"X2]f5hrbs;9ujL\@T
.Dl)bF.8^2e/pg??=a.Yh`K-+jR@Sobpp9iSZ[U/b\HsIo3gQBs4I~>
%%EndBinary
grestore
np
gsave
127.48 105.9 mo
128.48 105.9 li
128.48 100.9 li
127.48 100.9 li
cp
clp
127.98 105.4 mo
127.98 101.4 li
0 gry
@
grestore
gsave
127.48 20.9 mo
128.48 20.9 li
128.48 15.9 li
127.48 15.9 li
cp
clp
127.98 20.4 mo
127.98 16.4 li
0 gry
@
grestore
0 gry
true set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /AYGAAA+NimbusSanL-Regu def/FontInfo 7 dict dup begin/Notice (Copyright \\050URW\\051++,Copyright 1999 by \\050URW\\051++ Design & Development) def/Weight (Regular) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 48 /zero putdup 49 /one putdup 83 /S putdup 97 /a putdup 99 /c putdup 101 /e putdup 112 /p putdef/UniqueID 5020902 def/FontBBox {-174 -285 1001 953} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 0 524 544 729 749 686 709] def/BlueScale 0.0396249 def/StdHW [78] def/StdVW [85] def/StemSnapH [69 74 78 83] def/StemSnapV [78 85 94] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59DFAA60C2> |-/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE99CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C577426BB5FA04F8E4DB> |-/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A897151E1AAB5D613DEBEA5766F929AE7> |-/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F0077774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D409ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37AD180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CEAFDD358A2DD60445> |-/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F10FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E00493971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D3491A9F18F05171ED970B25AFE0F35A1> |-/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB35844C37D3215D325D86E3D5BDD66C6> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu /AYGAAA+NimbusSanL-Regu findfont ct_VMDictPut/PBVMPL+NimbusSanL-Regu*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one 33{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 10{/.notdef}rp /p 143{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf126.265 114.935 mo(010)[42.2808 4.42329 0 ]xshPBVMPL+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf114.359 125.239 mo(Space)[6.63536 5.5294 5.52939 4.98151 0 ]xshPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf68.464 108.096 mo(-10)[2.64604 4.42329 0 ]xshgsave
83.4802 60.9 mo
88.4802 60.9 li
88.4802 59.9 li
83.4802 59.9 li
cp
clp
83.9802 60.4 mo
87.9802 60.4 li
@
grestore
gsave
168.48 60.9 mo
173.48 60.9 li
173.48 59.9 li
168.48 59.9 li
cp
clp
168.98 60.4 mo
172.98 60.4 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf75.549 63.596 mo(0)sh71.118 19.096 mo(10)[4.42329 0 ]xshPBVMPL+NimbusSanL-Regu*1 [0 -9.963 -9.963 0 0 0 ]msf61.3415 75.0219 mo(Space)[-6.63538 -5.52939 -5.52939 -4.98151 0 ]ysh83.9802 105.4 mo
172.98 105.4 li
172.98 16.4 li
83.9802 16.4 li
83.9802 105.4 li
@
true set_gvm
%ADOBeginSubsetFont: TZBBAA+NimbusSanL-Bold Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /TZBBAA+NimbusSanL-Bold def/FontInfo 7 dict dup begin/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdef/UniqueID 5020904 def/FontBBox {-173 -307 1003 949} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 0 540 560 729 749 701 724] def/BlueScale 0.0396249 def/StdHW [118] def/StdVW [141] def/StemSnapH [106 114 118 127] def/StemSnapV [141 151] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/A <1C60D8A8C9B6079F1E495237AA3F64441E4A131C11FB3E8512A0B86473A2F60C423CF878E88E0F4833552CCA1B70C921FDFE4A9F47B1CA4B5C61C70FFA4765A82B6DBE934516EF> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPM+NimbusSanL-Bold /TZBBAA+NimbusSanL-Bold findfont ct_VMDictPut/PBVMPM+NimbusSanL-Bold*1 [65{/.notdef}rp /A 190{/.notdef}rp]PBVMPM+NimbusSanL-Bold nfPBVMPM+NimbusSanL-Bold*1 [11.955 0 0 -11.955 0 0 ]msf12.78 14.175 mo(A)sh183.389 97.6859 mo
183.389 97.3879 li
183.389 21.7479 li
183.389 21.4509 li
187.201 21.4509 li
187.201 21.7479 li
187.201 97.3879 li
187.201 97.6859 li
183.389 97.6859 li
cp
1 gry
f
0.01 lw
183.389 97.6859 mo
183.389 97.3879 li
183.389 21.7479 li
183.389 21.4509 li
187.201 21.4509 li
187.201 21.7479 li
187.201 97.3879 li
187.201 97.6859 li
183.389 97.6859 li
cp
@
gsave
183.389 97.686 mo
187.201 97.686 li
187.201 21.451 li
183.389 21.451 li
cp
clp
183.389 97.686 mo
187.201 97.686 li
187.201 97.388 li
183.389 97.388 li
cp
0 0 0.5 rgb
f
183.389 97.388 mo
187.201 97.388 li
187.201 97.09 li
183.389 97.09 li
cp
0 0 0.518 rgb
f
183.389 97.09 mo
187.201 97.09 li
187.201 96.792 li
183.389 96.792 li
cp
0 0 0.536 rgb
f
183.389 96.792 mo
187.201 96.792 li
187.201 96.494 li
183.389 96.494 li
cp
0 0 0.553 rgb
f
183.389 96.495 mo
187.201 96.495 li
187.201 96.197 li
183.389 96.197 li
cp
0 0 0.571 rgb
f
183.389 96.197 mo
187.201 96.197 li
187.201 95.899 li
183.389 95.899 li
cp
0 0 0.589 rgb
f
183.389 95.899 mo
187.201 95.899 li
187.201 95.601 li
183.389 95.601 li
cp
0 0 0.607 rgb
f
183.389 95.601 mo
187.201 95.601 li
187.201 95.303 li
183.389 95.303 li
cp
0 0 0.625 rgb
f
183.389 95.304 mo
187.201 95.304 li
187.201 95.006 li
183.389 95.006 li
cp
0 0 0.643 rgb
f
183.389 95.006 mo
187.201 95.006 li
187.201 94.708 li
183.389 94.708 li
cp
0 0 0.66 rgb
f
183.389 94.708 mo
187.201 94.708 li
187.201 94.41 li
183.389 94.41 li
cp
0 0 0.678 rgb
f
183.389 94.41 mo
187.201 94.41 li
187.201 94.112 li
183.389 94.112 li
cp
0 0 0.696 rgb
f
183.389 94.112 mo
187.201 94.112 li
187.201 93.814 li
183.389 93.814 li
cp
0 0 0.714 rgb
f
183.389 93.815 mo
187.201 93.815 li
187.201 93.517 li
183.389 93.517 li
cp
0 0 0.732 rgb
f
183.389 93.517 mo
187.201 93.517 li
187.201 93.219 li
183.389 93.219 li
cp
0 0 0.75 rgb
f
183.389 93.219 mo
187.201 93.219 li
187.201 92.921 li
183.389 92.921 li
cp
0 0 0.767 rgb
f
183.389 92.921 mo
187.201 92.921 li
187.201 92.623 li
183.389 92.623 li
cp
0 0 0.785 rgb
f
183.389 92.623 mo
187.201 92.623 li
187.201 92.325 li
183.389 92.325 li
cp
0 0 0.803 rgb
f
183.389 92.326 mo
187.201 92.326 li
187.201 92.028 li
183.389 92.028 li
cp
0 0 0.821 rgb
f
183.389 92.028 mo
187.201 92.028 li
187.201 91.73 li
183.389 91.73 li
cp
0 0 0.839 rgb
f
183.389 91.73 mo
187.201 91.73 li
187.201 91.432 li
183.389 91.432 li
cp
0 0 0.857 rgb
f
183.389 91.432 mo
187.201 91.432 li
187.201 91.134 li
183.389 91.134 li
cp
0 0 0.874 rgb
f
183.389 91.134 mo
187.201 91.134 li
187.201 90.836 li
183.389 90.836 li
cp
0 0 0.892 rgb
f
183.389 90.837 mo
187.201 90.837 li
187.201 90.539 li
183.389 90.539 li
cp
0 0 0.91 rgb
f
183.389 90.539 mo
187.201 90.539 li
187.201 90.241 li
183.389 90.241 li
cp
0 0 0.928 rgb
f
183.389 90.241 mo
187.201 90.241 li
187.201 89.943 li
183.389 89.943 li
cp
0 0 0.946 rgb
f
183.389 89.943 mo
187.201 89.943 li
187.201 89.645 li
183.389 89.645 li
cp
0 0 0.963 rgb
f
183.389 89.645 mo
187.201 89.645 li
187.201 89.347 li
183.389 89.347 li
cp
0 0 0.981 rgb
f
183.389 89.348 mo
187.201 89.348 li
187.201 89.05 li
183.389 89.05 li
cp
0 0 0.999 rgb
f
183.389 89.05 mo
187.201 89.05 li
187.201 88.752 li
183.389 88.752 li
cp
0 0 1 rgb
f
183.389 88.752 mo
187.201 88.752 li
187.201 88.454 li
183.389 88.454 li
cp
f
183.389 88.454 mo
187.201 88.454 li
187.201 88.156 li
183.389 88.156 li
cp
f
183.389 88.156 mo
187.201 88.156 li
187.201 87.858 li
183.389 87.858 li
cp
0 0.002 1 rgb
f
183.389 87.859 mo
187.201 87.859 li
187.201 87.561 li
183.389 87.561 li
cp
0 0.018 1 rgb
f
183.389 87.561 mo
187.201 87.561 li
187.201 87.263 li
183.389 87.263 li
cp
0 0.033 1 rgb
f
183.389 87.263 mo
187.201 87.263 li
187.201 86.965 li
183.389 86.965 li
cp
0 0.049 1 rgb
f
183.389 86.965 mo
187.201 86.965 li
187.201 86.667 li
183.389 86.667 li
cp
0 0.065 1 rgb
f
183.389 86.667 mo
187.201 86.667 li
187.201 86.369 li
183.389 86.369 li
cp
0 0.08 1 rgb
f
183.389 86.37 mo
187.201 86.37 li
187.201 86.072 li
183.389 86.072 li
cp
0 0.096 1 rgb
f
183.389 86.072 mo
187.201 86.072 li
187.201 85.774 li
183.389 85.774 li
cp
0 0.112 1 rgb
f
183.389 85.774 mo
187.201 85.774 li
187.201 85.476 li
183.389 85.476 li
cp
0 0.127 1 rgb
f
183.389 85.476 mo
187.201 85.476 li
187.201 85.178 li
183.389 85.178 li
cp
0 0.143 1 rgb
f
183.389 85.179 mo
187.201 85.179 li
187.201 84.881 li
183.389 84.881 li
cp
0 0.159 1 rgb
f
183.389 84.881 mo
187.201 84.881 li
187.201 84.583 li
183.389 84.583 li
cp
0 0.175 1 rgb
f
183.389 84.583 mo
187.201 84.583 li
187.201 84.285 li
183.389 84.285 li
cp
0 0.19 1 rgb
f
183.389 84.285 mo
187.201 84.285 li
187.201 83.987 li
183.389 83.987 li
cp
0 0.206 1 rgb
f
183.389 83.987 mo
187.201 83.987 li
187.201 83.689 li
183.389 83.689 li
cp
0 0.222 1 rgb
f
183.389 83.69 mo
187.201 83.69 li
187.201 83.392 li
183.389 83.392 li
cp
0 0.237 1 rgb
f
183.389 83.392 mo
187.201 83.392 li
187.201 83.094 li
183.389 83.094 li
cp
0 0.253 1 rgb
f
183.389 83.094 mo
187.201 83.094 li
187.201 82.796 li
183.389 82.796 li
cp
0 0.269 1 rgb
f
183.389 82.796 mo
187.201 82.796 li
187.201 82.498 li
183.389 82.498 li
cp
0 0.284 1 rgb
f
183.389 82.498 mo
187.201 82.498 li
187.201 82.2 li
183.389 82.2 li
cp
0 0.3 1 rgb
f
183.389 82.201 mo
187.201 82.201 li
187.201 81.903 li
183.389 81.903 li
cp
0 0.316 1 rgb
f
183.389 81.903 mo
187.201 81.903 li
187.201 81.605 li
183.389 81.605 li
cp
0 0.331 1 rgb
f
183.389 81.605 mo
187.201 81.605 li
187.201 81.307 li
183.389 81.307 li
cp
0 0.347 1 rgb
f
183.389 81.307 mo
187.201 81.307 li
187.201 81.009 li
183.389 81.009 li
cp
0 0.363 1 rgb
f
183.389 81.009 mo
187.201 81.009 li
187.201 80.711 li
183.389 80.711 li
cp
0 0.378 1 rgb
f
183.389 80.712 mo
187.201 80.712 li
187.201 80.414 li
183.389 80.414 li
cp
0 0.394 1 rgb
f
183.389 80.414 mo
187.201 80.414 li
187.201 80.116 li
183.389 80.116 li
cp
0 0.41 1 rgb
f
183.389 80.116 mo
187.201 80.116 li
187.201 79.818 li
183.389 79.818 li
cp
0 0.425 1 rgb
f
183.389 79.818 mo
187.201 79.818 li
187.201 79.52 li
183.389 79.52 li
cp
0 0.441 1 rgb
f
183.389 79.52 mo
187.201 79.52 li
187.201 79.222 li
183.389 79.222 li
cp
0 0.457 1 rgb
f
183.389 79.223 mo
187.201 79.223 li
187.201 78.925 li
183.389 78.925 li
cp
0 0.473 1 rgb
f
183.389 78.925 mo
187.201 78.925 li
187.201 78.627 li
183.389 78.627 li
cp
0 0.488 1 rgb
f
183.389 78.627 mo
187.201 78.627 li
187.201 78.329 li
183.389 78.329 li
cp
0 0.504 1 rgb
f
183.389 78.329 mo
187.201 78.329 li
187.201 78.031 li
183.389 78.031 li
cp
0 0.52 1 rgb
f
183.389 78.031 mo
187.201 78.031 li
187.201 77.733 li
183.389 77.733 li
cp
0 0.535 1 rgb
f
183.389 77.734 mo
187.201 77.734 li
187.201 77.436 li
183.389 77.436 li
cp
0 0.551 1 rgb
f
183.389 77.436 mo
187.201 77.436 li
187.201 77.138 li
183.389 77.138 li
cp
0 0.567 1 rgb
f
183.389 77.138 mo
187.201 77.138 li
187.201 76.84 li
183.389 76.84 li
cp
0 0.582 1 rgb
f
183.389 76.84 mo
187.201 76.84 li
187.201 76.542 li
183.389 76.542 li
cp
0 0.598 1 rgb
f
183.389 76.542 mo
187.201 76.542 li
187.201 76.244 li
183.389 76.244 li
cp
0 0.614 1 rgb
f
183.389 76.245 mo
187.201 76.245 li
187.201 75.947 li
183.389 75.947 li
cp
0 0.629 1 rgb
f
183.389 75.947 mo
187.201 75.947 li
187.201 75.649 li
183.389 75.649 li
cp
0 0.645 1 rgb
f
183.389 75.649 mo
187.201 75.649 li
187.201 75.351 li
183.389 75.351 li
cp
0 0.661 1 rgb
f
183.389 75.351 mo
187.201 75.351 li
187.201 75.053 li
183.389 75.053 li
cp
0 0.676 1 rgb
f
183.389 75.054 mo
187.201 75.054 li
187.201 74.756 li
183.389 74.756 li
cp
0 0.692 1 rgb
f
183.389 74.756 mo
187.201 74.756 li
187.201 74.458 li
183.389 74.458 li
cp
0 0.708 1 rgb
f
183.389 74.458 mo
187.201 74.458 li
187.201 74.16 li
183.389 74.16 li
cp
0 0.724 1 rgb
f
183.389 74.16 mo
187.201 74.16 li
187.201 73.862 li
183.389 73.862 li
cp
0 0.739 1 rgb
f
183.389 73.862 mo
187.201 73.862 li
187.201 73.564 li
183.389 73.564 li
cp
0 0.755 1 rgb
f
183.389 73.565 mo
187.201 73.565 li
187.201 73.267 li
183.389 73.267 li
cp
0 0.771 1 rgb
f
183.389 73.267 mo
187.201 73.267 li
187.201 72.969 li
183.389 72.969 li
cp
0 0.786 1 rgb
f
183.389 72.969 mo
187.201 72.969 li
187.201 72.671 li
183.389 72.671 li
cp
0 0.802 1 rgb
f
183.389 72.671 mo
187.201 72.671 li
187.201 72.373 li
183.389 72.373 li
cp
0 0.818 1 rgb
f
183.389 72.373 mo
187.201 72.373 li
187.201 72.075 li
183.389 72.075 li
cp
0 0.833 1 rgb
f
183.389 72.076 mo
187.201 72.076 li
187.201 71.778 li
183.389 71.778 li
cp
0 0.849 1 rgb
f
183.389 71.778 mo
187.201 71.778 li
187.201 71.48 li
183.389 71.48 li
cp
0 0.865 0.996 rgb
f
183.389 71.48 mo
187.201 71.48 li
187.201 71.182 li
183.389 71.182 li
cp
0 0.88 0.984 rgb
f
183.389 71.182 mo
187.201 71.182 li
187.201 70.884 li
183.389 70.884 li
cp
0 0.896 0.971 rgb
f
183.389 70.884 mo
187.201 70.884 li
187.201 70.586 li
183.389 70.586 li
cp
0.009 0.912 0.958 rgb
f
183.389 70.587 mo
187.201 70.587 li
187.201 70.289 li
183.389 70.289 li
cp
0.022 0.927 0.946 rgb
f
183.389 70.289 mo
187.201 70.289 li
187.201 69.991 li
183.389 69.991 li
cp
0.035 0.943 0.933 rgb
f
183.389 69.991 mo
187.201 69.991 li
187.201 69.693 li
183.389 69.693 li
cp
0.047 0.959 0.92 rgb
f
183.389 69.693 mo
187.201 69.693 li
187.201 69.395 li
183.389 69.395 li
cp
0.06 0.975 0.908 rgb
f
183.389 69.395 mo
187.201 69.395 li
187.201 69.097 li
183.389 69.097 li
cp
0.073 0.99 0.895 rgb
f
183.389 69.098 mo
187.201 69.098 li
187.201 68.8 li
183.389 68.8 li
cp
0.085 1 0.882 rgb
f
183.389 68.8 mo
187.201 68.8 li
187.201 68.502 li
183.389 68.502 li
cp
0.098 1 0.87 rgb
f
183.389 68.502 mo
187.201 68.502 li
187.201 68.204 li
183.389 68.204 li
cp
0.111 1 0.857 rgb
f
183.389 68.204 mo
187.201 68.204 li
187.201 67.906 li
183.389 67.906 li
cp
0.123 1 0.844 rgb
f
183.389 67.906 mo
187.201 67.906 li
187.201 67.608 li
183.389 67.608 li
cp
0.136 1 0.832 rgb
f
183.389 67.609 mo
187.201 67.609 li
187.201 67.311 li
183.389 67.311 li
cp
0.149 1 0.819 rgb
f
183.389 67.311 mo
187.201 67.311 li
187.201 67.013 li
183.389 67.013 li
cp
0.161 1 0.806 rgb
f
183.389 67.013 mo
187.201 67.013 li
187.201 66.715 li
183.389 66.715 li
cp
0.174 1 0.794 rgb
f
183.389 66.715 mo
187.201 66.715 li
187.201 66.417 li
183.389 66.417 li
cp
0.187 1 0.781 rgb
f
183.389 66.417 mo
187.201 66.417 li
187.201 66.119 li
183.389 66.119 li
cp
0.199 1 0.768 rgb
f
183.389 66.12 mo
187.201 66.12 li
187.201 65.822 li
183.389 65.822 li
cp
0.212 1 0.756 rgb
f
183.389 65.822 mo
187.201 65.822 li
187.201 65.524 li
183.389 65.524 li
cp
0.225 1 0.743 rgb
f
183.389 65.524 mo
187.201 65.524 li
187.201 65.226 li
183.389 65.226 li
cp
0.237 1 0.731 rgb
f
183.389 65.226 mo
187.201 65.226 li
187.201 64.928 li
183.389 64.928 li
cp
0.25 1 0.718 rgb
f
183.389 64.929 mo
187.201 64.929 li
187.201 64.631 li
183.389 64.631 li
cp
0.262 1 0.705 rgb
f
183.389 64.631 mo
187.201 64.631 li
187.201 64.333 li
183.389 64.333 li
cp
0.275 1 0.693 rgb
f
183.389 64.333 mo
187.201 64.333 li
187.201 64.035 li
183.389 64.035 li
cp
0.288 1 0.68 rgb
f
183.389 64.035 mo
187.201 64.035 li
187.201 63.737 li
183.389 63.737 li
cp
0.3 1 0.667 rgb
f
183.389 63.737 mo
187.201 63.737 li
187.201 63.439 li
183.389 63.439 li
cp
0.313 1 0.655 rgb
f
183.389 63.44 mo
187.201 63.44 li
187.201 63.142 li
183.389 63.142 li
cp
0.326 1 0.642 rgb
f
183.389 63.142 mo
187.201 63.142 li
187.201 62.844 li
183.389 62.844 li
cp
0.338 1 0.629 rgb
f
183.389 62.844 mo
187.201 62.844 li
187.201 62.546 li
183.389 62.546 li
cp
0.351 1 0.617 rgb
f
183.389 62.546 mo
187.201 62.546 li
187.201 62.248 li
183.389 62.248 li
cp
0.364 1 0.604 rgb
f
183.389 62.248 mo
187.201 62.248 li
187.201 61.95 li
183.389 61.95 li
cp
0.376 1 0.591 rgb
f
183.389 61.951 mo
187.201 61.951 li
187.201 61.653 li
183.389 61.653 li
cp
0.389 1 0.579 rgb
f
183.389 61.653 mo
187.201 61.653 li
187.201 61.355 li
183.389 61.355 li
cp
0.402 1 0.566 rgb
f
183.389 61.355 mo
187.201 61.355 li
187.201 61.057 li
183.389 61.057 li
cp
0.414 1 0.553 rgb
f
183.389 61.057 mo
187.201 61.057 li
187.201 60.759 li
183.389 60.759 li
cp
0.427 1 0.541 rgb
f
183.389 60.759 mo
187.201 60.759 li
187.201 60.461 li
183.389 60.461 li
cp
0.44 1 0.528 rgb
f
183.389 60.462 mo
187.201 60.462 li
187.201 60.164 li
183.389 60.164 li
cp
0.452 1 0.516 rgb
f
183.389 60.164 mo
187.201 60.164 li
187.201 59.866 li
183.389 59.866 li
cp
0.465 1 0.503 rgb
f
183.389 59.866 mo
187.201 59.866 li
187.201 59.568 li
183.389 59.568 li
cp
0.478 1 0.49 rgb
f
183.389 59.568 mo
187.201 59.568 li
187.201 59.27 li
183.389 59.27 li
cp
0.49 1 0.478 rgb
f
183.389 59.27 mo
187.201 59.27 li
187.201 58.972 li
183.389 58.972 li
cp
0.503 1 0.465 rgb
f
183.389 58.973 mo
187.201 58.973 li
187.201 58.675 li
183.389 58.675 li
cp
0.516 1 0.452 rgb
f
183.389 58.675 mo
187.201 58.675 li
187.201 58.377 li
183.389 58.377 li
cp
0.528 1 0.44 rgb
f
183.389 58.377 mo
187.201 58.377 li
187.201 58.079 li
183.389 58.079 li
cp
0.541 1 0.427 rgb
f
183.389 58.079 mo
187.201 58.079 li
187.201 57.781 li
183.389 57.781 li
cp
0.553 1 0.414 rgb
f
183.389 57.781 mo
187.201 57.781 li
187.201 57.483 li
183.389 57.483 li
cp
0.566 1 0.402 rgb
f
183.389 57.484 mo
187.201 57.484 li
187.201 57.186 li
183.389 57.186 li
cp
0.579 1 0.389 rgb
f
183.389 57.186 mo
187.201 57.186 li
187.201 56.888 li
183.389 56.888 li
cp
0.591 1 0.376 rgb
f
183.389 56.888 mo
187.201 56.888 li
187.201 56.59 li
183.389 56.59 li
cp
0.604 1 0.364 rgb
f
183.389 56.59 mo
187.201 56.59 li
187.201 56.292 li
183.389 56.292 li
cp
0.617 1 0.351 rgb
f
183.389 56.292 mo
187.201 56.292 li
187.201 55.994 li
183.389 55.994 li
cp
0.629 1 0.338 rgb
f
183.389 55.995 mo
187.201 55.995 li
187.201 55.697 li
183.389 55.697 li
cp
0.642 1 0.326 rgb
f
183.389 55.697 mo
187.201 55.697 li
187.201 55.399 li
183.389 55.399 li
cp
0.655 1 0.313 rgb
f
183.389 55.399 mo
187.201 55.399 li
187.201 55.101 li
183.389 55.101 li
cp
0.667 1 0.3 rgb
f
183.389 55.101 mo
187.201 55.101 li
187.201 54.803 li
183.389 54.803 li
cp
0.68 1 0.288 rgb
f
183.389 54.804 mo
187.201 54.804 li
187.201 54.506 li
183.389 54.506 li
cp
0.693 1 0.275 rgb
f
183.389 54.506 mo
187.201 54.506 li
187.201 54.208 li
183.389 54.208 li
cp
0.705 1 0.262 rgb
f
183.389 54.208 mo
187.201 54.208 li
187.201 53.91 li
183.389 53.91 li
cp
0.718 1 0.25 rgb
f
183.389 53.91 mo
187.201 53.91 li
187.201 53.612 li
183.389 53.612 li
cp
0.731 1 0.237 rgb
f
183.389 53.612 mo
187.201 53.612 li
187.201 53.314 li
183.389 53.314 li
cp
0.743 1 0.225 rgb
f
183.389 53.315 mo
187.201 53.315 li
187.201 53.017 li
183.389 53.017 li
cp
0.756 1 0.212 rgb
f
183.389 53.017 mo
187.201 53.017 li
187.201 52.719 li
183.389 52.719 li
cp
0.768 1 0.199 rgb
f
183.389 52.719 mo
187.201 52.719 li
187.201 52.421 li
183.389 52.421 li
cp
0.781 1 0.187 rgb
f
183.389 52.421 mo
187.201 52.421 li
187.201 52.123 li
183.389 52.123 li
cp
0.794 1 0.174 rgb
f
183.389 52.123 mo
187.201 52.123 li
187.201 51.825 li
183.389 51.825 li
cp
0.806 1 0.161 rgb
f
183.389 51.826 mo
187.201 51.826 li
187.201 51.528 li
183.389 51.528 li
cp
0.819 1 0.149 rgb
f
183.389 51.528 mo
187.201 51.528 li
187.201 51.23 li
183.389 51.23 li
cp
0.832 1 0.136 rgb
f
183.389 51.23 mo
187.201 51.23 li
187.201 50.932 li
183.389 50.932 li
cp
0.844 1 0.123 rgb
f
183.389 50.932 mo
187.201 50.932 li
187.201 50.634 li
183.389 50.634 li
cp
0.857 1 0.111 rgb
f
183.389 50.634 mo
187.201 50.634 li
187.201 50.336 li
183.389 50.336 li
cp
0.87 1 0.098 rgb
f
183.389 50.337 mo
187.201 50.337 li
187.201 50.039 li
183.389 50.039 li
cp
0.882 1 0.085 rgb
f
183.389 50.039 mo
187.201 50.039 li
187.201 49.741 li
183.389 49.741 li
cp
0.895 1 0.073 rgb
f
183.389 49.741 mo
187.201 49.741 li
187.201 49.443 li
183.389 49.443 li
cp
0.908 1 0.06 rgb
f
183.389 49.443 mo
187.201 49.443 li
187.201 49.145 li
183.389 49.145 li
cp
0.92 1 0.047 rgb
f
183.389 49.145 mo
187.201 49.145 li
187.201 48.847 li
183.389 48.847 li
cp
0.933 1 0.035 rgb
f
183.389 48.848 mo
187.201 48.848 li
187.201 48.55 li
183.389 48.55 li
cp
0.946 0.988 0.022 rgb
f
183.389 48.55 mo
187.201 48.55 li
187.201 48.252 li
183.389 48.252 li
cp
0.958 0.974 0.009 rgb
f
183.389 48.252 mo
187.201 48.252 li
187.201 47.954 li
183.389 47.954 li
cp
0.971 0.959 0 rgb
f
183.389 47.954 mo
187.201 47.954 li
187.201 47.656 li
183.389 47.656 li
cp
0.984 0.945 0 rgb
f
183.389 47.656 mo
187.201 47.656 li
187.201 47.358 li
183.389 47.358 li
cp
0.996 0.93 0 rgb
f
183.389 47.359 mo
187.201 47.359 li
187.201 47.061 li
183.389 47.061 li
cp
1 0.916 0 rgb
f
183.389 47.061 mo
187.201 47.061 li
187.201 46.763 li
183.389 46.763 li
cp
1 0.901 0 rgb
f
183.389 46.763 mo
187.201 46.763 li
187.201 46.465 li
183.389 46.465 li
cp
1 0.887 0 rgb
f
183.389 46.465 mo
187.201 46.465 li
187.201 46.167 li
183.389 46.167 li
cp
1 0.872 0 rgb
f
183.389 46.167 mo
187.201 46.167 li
187.201 45.869 li
183.389 45.869 li
cp
1 0.858 0 rgb
f
183.389 45.87 mo
187.201 45.87 li
187.201 45.572 li
183.389 45.572 li
cp
1 0.843 0 rgb
f
183.389 45.572 mo
187.201 45.572 li
187.201 45.274 li
183.389 45.274 li
cp
1 0.829 0 rgb
f
183.389 45.274 mo
187.201 45.274 li
187.201 44.976 li
183.389 44.976 li
cp
1 0.814 0 rgb
f
183.389 44.976 mo
187.201 44.976 li
187.201 44.678 li
183.389 44.678 li
cp
1 0.8 0 rgb
f
183.389 44.679 mo
187.201 44.679 li
187.201 44.381 li
183.389 44.381 li
cp
1 0.785 0 rgb
f
183.389 44.381 mo
187.201 44.381 li
187.201 44.083 li
183.389 44.083 li
cp
1 0.771 0 rgb
f
183.389 44.083 mo
187.201 44.083 li
187.201 43.785 li
183.389 43.785 li
cp
1 0.756 0 rgb
f
183.389 43.785 mo
187.201 43.785 li
187.201 43.487 li
183.389 43.487 li
cp
1 0.741 0 rgb
f
183.389 43.487 mo
187.201 43.487 li
187.201 43.189 li
183.389 43.189 li
cp
1 0.727 0 rgb
f
183.389 43.19 mo
187.201 43.19 li
187.201 42.892 li
183.389 42.892 li
cp
1 0.712 0 rgb
f
183.389 42.892 mo
187.201 42.892 li
187.201 42.594 li
183.389 42.594 li
cp
1 0.698 0 rgb
f
183.389 42.594 mo
187.201 42.594 li
187.201 42.296 li
183.389 42.296 li
cp
1 0.683 0 rgb
f
183.389 42.296 mo
187.201 42.296 li
187.201 41.998 li
183.389 41.998 li
cp
1 0.669 0 rgb
f
183.389 41.998 mo
187.201 41.998 li
187.201 41.7 li
183.389 41.7 li
cp
1 0.654 0 rgb
f
183.389 41.701 mo
187.201 41.701 li
187.201 41.403 li
183.389 41.403 li
cp
1 0.64 0 rgb
f
183.389 41.403 mo
187.201 41.403 li
187.201 41.105 li
183.389 41.105 li
cp
1 0.625 0 rgb
f
183.389 41.105 mo
187.201 41.105 li
187.201 40.807 li
183.389 40.807 li
cp
1 0.611 0 rgb
f
183.389 40.807 mo
187.201 40.807 li
187.201 40.509 li
183.389 40.509 li
cp
1 0.596 0 rgb
f
183.389 40.509 mo
187.201 40.509 li
187.201 40.211 li
183.389 40.211 li
cp
1 0.582 0 rgb
f
183.389 40.212 mo
187.201 40.212 li
187.201 39.914 li
183.389 39.914 li
cp
1 0.567 0 rgb
f
183.389 39.914 mo
187.201 39.914 li
187.201 39.616 li
183.389 39.616 li
cp
1 0.553 0 rgb
f
183.389 39.616 mo
187.201 39.616 li
187.201 39.318 li
183.389 39.318 li
cp
1 0.538 0 rgb
f
183.389 39.318 mo
187.201 39.318 li
187.201 39.02 li
183.389 39.02 li
cp
1 0.524 0 rgb
f
183.389 39.02 mo
187.201 39.02 li
187.201 38.722 li
183.389 38.722 li
cp
1 0.509 0 rgb
f
183.389 38.723 mo
187.201 38.723 li
187.201 38.425 li
183.389 38.425 li
cp
1 0.495 0 rgb
f
183.389 38.425 mo
187.201 38.425 li
187.201 38.127 li
183.389 38.127 li
cp
1 0.48 0 rgb
f
183.389 38.127 mo
187.201 38.127 li
187.201 37.829 li
183.389 37.829 li
cp
1 0.465 0 rgb
f
183.389 37.829 mo
187.201 37.829 li
187.201 37.531 li
183.389 37.531 li
cp
1 0.451 0 rgb
f
183.389 37.531 mo
187.201 37.531 li
187.201 37.233 li
183.389 37.233 li
cp
1 0.436 0 rgb
f
183.389 37.234 mo
187.201 37.234 li
187.201 36.936 li
183.389 36.936 li
cp
1 0.422 0 rgb
f
183.389 36.936 mo
187.201 36.936 li
187.201 36.638 li
183.389 36.638 li
cp
1 0.407 0 rgb
f
183.389 36.638 mo
187.201 36.638 li
187.201 36.34 li
183.389 36.34 li
cp
1 0.393 0 rgb
f
183.389 36.34 mo
187.201 36.34 li
187.201 36.042 li
183.389 36.042 li
cp
1 0.378 0 rgb
f
183.389 36.042 mo
187.201 36.042 li
187.201 35.744 li
183.389 35.744 li
cp
1 0.364 0 rgb
f
183.389 35.745 mo
187.201 35.745 li
187.201 35.447 li
183.389 35.447 li
cp
1 0.349 0 rgb
f
183.389 35.447 mo
187.201 35.447 li
187.201 35.149 li
183.389 35.149 li
cp
1 0.335 0 rgb
f
183.389 35.149 mo
187.201 35.149 li
187.201 34.851 li
183.389 34.851 li
cp
1 0.32 0 rgb
f
183.389 34.851 mo
187.201 34.851 li
187.201 34.553 li
183.389 34.553 li
cp
1 0.306 0 rgb
f
183.389 34.554 mo
187.201 34.554 li
187.201 34.256 li
183.389 34.256 li
cp
1 0.291 0 rgb
f
183.389 34.256 mo
187.201 34.256 li
187.201 33.958 li
183.389 33.958 li
cp
1 0.277 0 rgb
f
183.389 33.958 mo
187.201 33.958 li
187.201 33.66 li
183.389 33.66 li
cp
1 0.262 0 rgb
f
183.389 33.66 mo
187.201 33.66 li
187.201 33.362 li
183.389 33.362 li
cp
1 0.248 0 rgb
f
183.389 33.362 mo
187.201 33.362 li
187.201 33.064 li
183.389 33.064 li
cp
1 0.233 0 rgb
f
183.389 33.065 mo
187.201 33.065 li
187.201 32.767 li
183.389 32.767 li
cp
1 0.219 0 rgb
f
183.389 32.767 mo
187.201 32.767 li
187.201 32.469 li
183.389 32.469 li
cp
1 0.204 0 rgb
f
183.389 32.469 mo
187.201 32.469 li
187.201 32.171 li
183.389 32.171 li
cp
1 0.19 0 rgb
f
183.389 32.171 mo
187.201 32.171 li
187.201 31.873 li
183.389 31.873 li
cp
1 0.175 0 rgb
f
183.389 31.873 mo
187.201 31.873 li
187.201 31.575 li
183.389 31.575 li
cp
1 0.16 0 rgb
f
183.389 31.576 mo
187.201 31.576 li
187.201 31.278 li
183.389 31.278 li
cp
1 0.146 0 rgb
f
183.389 31.278 mo
187.201 31.278 li
187.201 30.98 li
183.389 30.98 li
cp
1 0.131 0 rgb
f
183.389 30.98 mo
187.201 30.98 li
187.201 30.682 li
183.389 30.682 li
cp
1 0.117 0 rgb
f
183.389 30.682 mo
187.201 30.682 li
187.201 30.384 li
183.389 30.384 li
cp
1 0.102 0 rgb
f
183.389 30.384 mo
187.201 30.384 li
187.201 30.086 li
183.389 30.086 li
cp
1 0.088 0 rgb
f
183.389 30.087 mo
187.201 30.087 li
187.201 29.789 li
183.389 29.789 li
cp
0.999 0.073 0 rgb
f
183.389 29.789 mo
187.201 29.789 li
187.201 29.491 li
183.389 29.491 li
cp
0.981 0.059 0 rgb
f
183.389 29.491 mo
187.201 29.491 li
187.201 29.193 li
183.389 29.193 li
cp
0.963 0.044 0 rgb
f
183.389 29.193 mo
187.201 29.193 li
187.201 28.895 li
183.389 28.895 li
cp
0.946 0.03 0 rgb
f
183.389 28.895 mo
187.201 28.895 li
187.201 28.597 li
183.389 28.597 li
cp
0.928 0.015 0 rgb
f
183.389 28.598 mo
187.201 28.598 li
187.201 28.3 li
183.389 28.3 li
cp
0.91 0.001 0 rgb
f
183.389 28.3 mo
187.201 28.3 li
187.201 28.002 li
183.389 28.002 li
cp
0.892 0 0 rgb
f
183.389 28.002 mo
187.201 28.002 li
187.201 27.704 li
183.389 27.704 li
cp
0.874 0 0 rgb
f
183.389 27.704 mo
187.201 27.704 li
187.201 27.406 li
183.389 27.406 li
cp
0.857 0 0 rgb
f
183.389 27.406 mo
187.201 27.406 li
187.201 27.108 li
183.389 27.108 li
cp
0.839 0 0 rgb
f
183.389 27.109 mo
187.201 27.109 li
187.201 26.811 li
183.389 26.811 li
cp
0.821 0 0 rgb
f
183.389 26.811 mo
187.201 26.811 li
187.201 26.513 li
183.389 26.513 li
cp
0.803 0 0 rgb
f
183.389 26.513 mo
187.201 26.513 li
187.201 26.215 li
183.389 26.215 li
cp
0.785 0 0 rgb
f
183.389 26.215 mo
187.201 26.215 li
187.201 25.917 li
183.389 25.917 li
cp
0.767 0 0 rgb
f
183.389 25.917 mo
187.201 25.917 li
187.201 25.619 li
183.389 25.619 li
cp
0.75 0 0 rgb
f
183.389 25.62 mo
187.201 25.62 li
187.201 25.322 li
183.389 25.322 li
cp
0.732 0 0 rgb
f
183.389 25.322 mo
187.201 25.322 li
187.201 25.024 li
183.389 25.024 li
cp
0.714 0 0 rgb
f
183.389 25.024 mo
187.201 25.024 li
187.201 24.726 li
183.389 24.726 li
cp
0.696 0 0 rgb
f
183.389 24.726 mo
187.201 24.726 li
187.201 24.428 li
183.389 24.428 li
cp
0.678 0 0 rgb
f
183.389 24.429 mo
187.201 24.429 li
187.201 24.131 li
183.389 24.131 li
cp
0.66 0 0 rgb
f
183.389 24.131 mo
187.201 24.131 li
187.201 23.833 li
183.389 23.833 li
cp
0.643 0 0 rgb
f
183.389 23.833 mo
187.201 23.833 li
187.201 23.535 li
183.389 23.535 li
cp
0.625 0 0 rgb
f
183.389 23.535 mo
187.201 23.535 li
187.201 23.237 li
183.389 23.237 li
cp
0.607 0 0 rgb
f
183.389 23.237 mo
187.201 23.237 li
187.201 22.939 li
183.389 22.939 li
cp
0.589 0 0 rgb
f
183.389 22.94 mo
187.201 22.94 li
187.201 22.642 li
183.389 22.642 li
cp
0.571 0 0 rgb
f
183.389 22.642 mo
187.201 22.642 li
187.201 22.344 li
183.389 22.344 li
cp
0.553 0 0 rgb
f
183.389 22.344 mo
187.201 22.344 li
187.201 22.046 li
183.389 22.046 li
cp
0.536 0 0 rgb
f
183.389 22.046 mo
187.201 22.046 li
187.201 21.748 li
183.389 21.748 li
cp
0.518 0 0 rgb
f
183.389 21.748 mo
187.201 21.748 li
187.201 21.45 li
183.389 21.45 li
cp
0.5 0 0 rgb
f
grestore
1 lw
183.389 97.6859 mo
183.389 97.3879 li
183.389 21.7479 li
183.389 21.4509 li
187.201 21.4509 li
187.201 21.7479 li
187.201 97.3879 li
187.201 97.6859 li
183.389 97.6859 li
0 gry
@
gsave
182.7 91.4322 mo
187.7 91.4322 li
187.7 90.4322 li
182.7 90.4322 li
cp
clp
183.2 90.9322 mo
187.2 90.9322 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: FWBQMX+CMSY8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /FWBQMX+CMSY8 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 0 /minus putdup 161 /minus putdef/UniqueID 5000818 def/FontBBox {-30 -955 1185 779} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 704] def/OtherBlues [-126 -118] def/BlueScale 0.0396249 def/StdHW [46] def/StdVW [89] def/StemSnapH [46 61] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B08A953C5C2645FEB08D0F605D4538696964B7A1C2728DEF7C170C67D122DB85A4226362FADE57C92E833FF0895D3F> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPN+CMSY8 /FWBQMX+CMSY8 findfont ct_VMDictPut/PBVMPN+CMSY8*1 [161{/.notdef}rp /minus 94{/.notdef}rp]PBVMPN+CMSY8 nfPBVMPN+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf191.2 93.441 mo(\241)shtrue set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPL+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B35143997141C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E31F3559988F254DAAC1F1AB8281F76> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPL+NimbusSanL-Regu /Encoding getdup 46 /period putdup 53 /five putpop%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one 3{/.notdef}rp /five 29{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 10{/.notdef}rp /p 143{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf197.783 93.441 mo(1.5)[4.42329 2.20763 0 ]xshgsave
182.7 61.4411 mo
187.7 61.4411 li
187.7 60.4411 li
182.7 60.4411 li
cp
clp
183.2 60.9411 mo
187.2 60.9411 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf191.2 64.137 mo(0.0)[4.42329 2.20763 0 ]xshgsave
182.7 21.4529 mo
187.7 21.4529 li
187.7 20.4529 li
182.7 20.4529 li
cp
clp
183.2 20.9529 mo
187.2 20.9529 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPL+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C131F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C63EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0CCC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPL+NimbusSanL-Regu /Encoding getdup 50 /two putpop%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 29{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 10{/.notdef}rp /p 143{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf191.2 24.149 mo(2.0)[4.42329 2.20763 0 ]xshgsave
30.467 221.1 mo
226.494 221.1 li
226.494 132.1 li
30.467 132.1 li
cp
clp
0 lc
128.874 221.1 mo
152.492 221.1 li
@
128.874 221.1 mo
128.874 207.662 li
@
0.5 lw
2 lc
30.4667 193.577 mo
30.8607 193.331 li
31.2537 192.18 li
31.6477 193.807 li
32.0417 196.924 li
32.4347 194.515 li
32.8287 193.209 li
33.2217 192.725 li
33.6157 193.039 li
34.0097 192.121 li
34.4027 191.347 li
34.7967 191.06 li
35.1907 191.941 li
35.5837 193.448 li
35.9777 193.039 li
36.3707 192.568 li
36.7647 193.865 li
37.1587 191.06 li
37.5517 190.647 li
37.9457 193.094 li
38.3397 193.608 li
38.7327 193.521 li
39.1267 193.602 li
39.5197 192.411 li
39.9137 192.35 li
40.3077 189.817 li
40.7007 189.809 li
41.0947 191.481 li
41.4887 190.889 li
41.8817 189.911 li
42.2757 190.349 li
42.6687 191.259 li
43.0627 190.414 li
43.4567 192.418 li
43.8497 192.03 li
44.2437 193.93 li
44.6377 193.993 li
45.0307 194.151 li
45.4247 194.996 li
45.8187 194.415 li
46.2117 195.383 li
46.6057 194.985 li
46.9987 195.534 li
47.3927 195.146 li
47.7867 194.76 li
48.1797 193.519 li
48.5737 192.316 li
48.9677 192.72 li
49.3607 191.438 li
49.7547 194.661 li
50.1477 193.498 li
50.5417 192.858 li
50.9357 194.633 li
51.3287 194.394 li
51.7227 194.113 li
52.1167 196.281 li
52.5097 197.855 li
52.9037 197.412 li
53.2967 197.524 li
53.6907 197.198 li
54.0847 198.689 li
54.4777 198.118 li
54.8717 196.488 li
55.2657 196.33 li
55.6587 196.36 li
56.0527 197.887 li
56.4457 195.317 li
56.8397 197.578 li
57.2337 195.074 li
57.6267 195.029 li
58.0207 195.491 li
58.4147 194.645 li
58.8077 195.208 li
59.2017 192.786 li
59.5957 190.818 li
59.9887 190.125 li
60.3827 192.055 li
60.7757 191.36 li
61.1697 191.347 li
61.5637 192.445 li
61.9567 193.599 li
62.3507 189.958 li
62.7447 193.385 li
63.1377 192.736 li
63.5317 190.38 li
63.9247 189.381 li
64.3187 190.53 li
64.7127 189.306 li
65.1057 190.247 li
65.4997 189.546 li
65.8937 191.248 li
66.2867 193.144 li
66.6807 193.527 li
67.0737 197.442 li
67.4677 198.288 li
67.8617 196.823 li
68.2547 193.962 li
68.6487 195.938 li
69.0427 196.391 li
69.4357 197.074 li
69.8297 194.665 li
70.2227 196.072 li
70.6167 196.719 li
71.0107 197.82 li
71.4037 197.906 li
71.7977 196.387 li
72.1917 196.084 li
72.5847 197.584 li
72.9787 196.553 li
73.3727 196.061 li
73.7657 198.202 li
74.1597 195.173 li
74.5527 194.067 li
74.9467 192.028 li
75.3407 190.978 li
75.7337 192.36 li
76.1277 191.43 li
76.5217 191.123 li
76.9147 192.233 li
77.3087 192.866 li
77.7017 190.72 li
78.0957 188.767 li
78.4897 190.122 li
78.8827 189.701 li
79.2767 190.071 li
79.6707 191.423 li
80.0637 189.164 li
80.4577 190.349 li
80.8507 189.745 li
81.2447 191.116 li
81.6387 192.384 li
82.0317 191.048 li
82.4257 193.877 li
82.8197 192.798 li
83.2127 192.976 li
83.6067 192.731 li
83.9997 192.511 li
84.3937 191.585 li
84.7877 190.654 li
85.1807 190.892 li
85.5747 191.13 li
85.9687 190.286 li
86.3617 190.602 li
86.7557 191.573 li
87.1497 191.842 li
87.5427 191.186 li
87.9367 190.89 li
88.3297 189.266 li
88.7237 190.154 li
89.1177 192.862 li
89.5107 193.722 li
89.9047 190.934 li
90.2987 191.983 li
90.6917 194.249 li
91.0857 195.434 li
91.4787 197.263 li
91.8727 197.476 li
92.2667 196.313 li
92.6597 194.346 li
93.0537 195.406 li
93.4477 195.039 li
93.8407 196.048 li
94.2347 195.402 li
94.6277 196.748 li
95.0217 196.18 li
95.4157 195.866 li
95.8087 195.478 li
96.2027 195.106 li
96.5967 196.307 li
96.9897 195.46 li
97.3837 195.479 li
97.7767 194.221 li
98.1707 194.664 li
98.5647 193.44 li
98.9577 192.144 li
99.3517 194.053 li
99.7457 194.613 li
100.139 193.126 li
100.533 194.815 li
100.927 193.525 li
101.32 194.214 li
101.714 193.661 li
102.107 193.364 li
102.501 193.639 li
102.895 194.026 li
103.288 192.777 li
103.682 192.177 li
104.076 195.799 li
104.469 194.55 li
104.863 195.26 li
105.256 194.662 li
105.65 193.075 li
106.044 192.633 li
106.437 193.729 li
106.831 193.692 li
107.225 196.003 li
107.618 193.527 li
108.012 195.165 li
108.405 195.5 li
108.799 195.665 li
109.193 195.686 li
109.586 196.993 li
109.98 194.876 li
110.374 195.425 li
110.767 194.768 li
111.161 194.463 li
111.554 195.469 li
111.948 196.891 li
112.342 199.314 li
112.735 194.891 li
113.129 195.311 li
113.523 195.275 li
113.916 197.587 li
114.31 195.295 li
114.703 195.301 li
115.097 196.309 li
115.491 197.58 li
115.884 198.904 li
116.278 199.493 li
116.672 198.716 li
117.065 197.544 li
117.459 195.313 li
117.853 196.222 li
118.246 196.658 li
118.64 196.671 li
119.033 197.071 li
119.427 195.578 li
119.821 195.454 li
120.214 197.598 li
120.608 197.67 li
121.002 198.166 li
121.395 197.333 li
121.789 197.304 li
122.182 196.418 li
122.576 194.696 li
122.97 198.058 li
123.363 197.244 li
123.757 196.428 li
124.151 197.898 li
124.544 196.502 li
124.938 194.419 li
125.331 194.963 li
125.725 194.695 li
126.119 197.511 li
126.512 195.915 li
126.906 198.5 li
127.3 196.443 li
127.693 195.562 li
128.087 193.434 li
128.48 194.286 li
128.874 195.652 li
129.268 195.542 li
129.661 196.469 li
130.055 194.665 li
130.449 194.622 li
130.842 196.093 li
131.236 194.015 li
131.63 192.274 li
132.023 192.168 li
132.417 193.946 li
132.81 192.609 li
133.204 194.176 li
133.598 194.501 li
133.991 194.987 li
134.385 193.304 li
134.779 193.915 li
135.172 193.262 li
135.566 194.101 li
135.959 194.367 li
136.353 193.521 li
136.747 193.688 li
137.14 195.585 li
137.534 197.337 li
137.928 195.371 li
138.321 197.566 li
138.715 195.885 li
139.108 196.507 li
139.502 196.858 li
139.896 195.454 li
140.289 195.884 li
140.683 198.162 li
141.077 197.603 li
141.47 198.917 li
141.864 196.024 li
142.257 196.629 li
142.651 196.031 li
143.045 192.943 li
143.438 194.775 li
143.832 194.935 li
144.226 193.93 li
144.619 195.125 li
145.013 194.566 li
145.407 195.556 li
145.8 196.401 li
146.194 194.38 li
146.587 195.854 li
146.981 195.087 li
147.375 195.263 li
147.768 195.439 li
148.162 197.432 li
148.556 195.174 li
148.949 193.267 li
149.343 192.114 li
149.736 192.585 li
150.13 192.694 li
150.524 195.588 li
150.917 194.026 li
151.311 193.807 li
151.705 194.831 li
152.098 194.531 li
152.492 193.59 li
152.885 194.998 li
153.279 194.884 li
153.673 197.01 li
154.066 195.188 li
154.46 197.651 li
154.854 195.974 li
155.247 193.818 li
155.641 194.269 li
156.034 193.191 li
156.428 195.647 li
156.822 193.365 li
157.215 192.259 li
157.609 192.723 li
158.003 194.297 li
158.396 194.917 li
158.79 193.173 li
159.184 194.791 li
159.577 191.736 li
159.971 191.913 li
160.364 193.487 li
160.758 190.917 li
161.152 192.373 li
161.545 191.703 li
161.939 192.666 li
162.333 195.196 li
162.726 194.25 li
163.12 193.291 li
163.513 193.839 li
163.907 193.938 li
164.301 192.319 li
164.694 194.315 li
165.088 193.874 li
165.482 193.895 li
165.875 194.405 li
166.269 193.189 li
166.662 192.446 li
167.056 193.654 li
167.45 195.485 li
167.843 194.419 li
168.237 194.102 li
168.631 195.652 li
169.024 195.527 li
169.418 194.163 li
169.811 193.374 li
170.205 193.862 li
170.599 192.182 li
170.992 192.885 li
171.386 193.083 li
171.78 192.726 li
172.173 193.583 li
172.567 192.608 li
172.96 192.068 li
173.354 190.565 li
173.748 191.344 li
174.141 189.591 li
174.535 191.159 li
174.929 192.238 li
175.322 191.417 li
175.716 194.675 li
176.11 193.709 li
176.503 195.561 li
176.897 194.841 li
177.29 195.855 li
177.684 193.997 li
178.078 195.85 li
178.471 195.661 li
178.865 195.861 li
179.259 195.486 li
179.652 196.759 li
180.046 196.638 li
180.439 194.593 li
180.833 193.576 li
181.227 192.551 li
181.62 192.248 li
182.014 192.84 li
182.408 189.771 li
182.801 191.084 li
183.195 190.856 li
183.588 192.84 li
183.982 195.066 li
184.376 195.15 li
184.769 194.946 li
185.163 196.629 li
185.557 196.285 li
185.95 196.454 li
186.344 196.381 li
186.738 196.682 li
187.131 196.458 li
187.525 195.613 li
187.918 199.035 li
188.312 197.344 li
188.706 194.925 li
189.099 195.835 li
189.493 196.936 li
189.887 196.747 li
190.28 195.344 li
190.674 195.591 li
191.067 196.357 li
191.461 195.367 li
191.855 194.848 li
192.248 194.903 li
192.642 196.049 li
193.036 194.348 li
193.429 194.109 li
193.823 194.038 li
194.216 194.543 li
194.61 192.423 li
195.004 195.582 li
195.397 195.352 li
195.791 197.103 li
196.185 197.039 li
196.578 196.974 li
196.972 197.209 li
197.365 194.008 li
197.759 193.718 li
198.153 194.043 li
198.546 192.23 li
198.94 193.742 li
199.334 193.521 li
199.727 195.722 li
200.121 195.11 li
200.515 195.199 li
200.908 195.218 li
201.302 196.405 li
201.695 195.343 li
202.089 196.065 li
202.483 195.741 li
202.876 194.895 li
203.27 196.26 li
203.664 196.125 li
204.057 195.442 li
204.451 195.434 li
204.844 195.256 li
205.238 195.617 li
205.632 195.896 li
206.025 193.731 li
206.419 192.122 li
206.813 192.045 li
207.206 191.996 li
207.6 191.711 li
207.993 191.686 li
208.387 192.813 li
208.781 193.38 li
209.174 192.85 li
209.568 193.875 li
209.962 193.144 li
210.355 193.895 li
210.749 194.725 li
211.142 195.631 li
211.536 192.242 li
211.93 193.818 li
212.323 195.425 li
212.717 193.841 li
213.111 193.875 li
213.504 194.279 li
213.898 194.058 li
214.291 194.608 li
214.685 194.393 li
215.079 193.591 li
215.472 193.421 li
215.866 193.287 li
216.26 194.035 li
216.653 194.112 li
217.047 194.804 li
217.441 194.546 li
217.834 193.959 li
218.228 193.311 li
218.621 193.061 li
219.015 192.584 li
219.409 193.494 li
219.802 192.256 li
220.196 192.997 li
220.59 194.489 li
220.983 193.337 li
221.377 194.924 li
221.77 193.215 li
222.164 192.03 li
222.558 191.798 li
222.951 193.305 li
223.345 193.539 li
223.739 193.412 li
224.132 193.726 li
224.526 192.532 li
224.919 193.48 li
225.313 195.606 li
225.707 195.022 li
226.1 196.778 li
226.494 196.737 li
@
30.4667 183.283 mo
30.8607 180.671 li
31.2537 182.106 li
31.6477 183.31 li
32.0417 182.789 li
32.4347 182.561 li
32.8287 182.118 li
33.2217 181.442 li
33.6157 180.279 li
34.0097 182.936 li
34.4027 180.768 li
34.7967 180.266 li
35.1907 179.133 li
35.5837 181.207 li
35.9777 181.783 li
36.3707 180.144 li
36.7647 178.476 li
37.1587 179.502 li
37.5517 180.157 li
37.9457 177.766 li
38.3397 177.072 li
38.7327 177.405 li
39.1267 178.119 li
39.5197 175.422 li
39.9137 178.083 li
40.3077 177.849 li
40.7007 178.227 li
41.0947 179.13 li
41.4887 178.388 li
41.8817 176.848 li
42.2757 177.342 li
42.6687 178.337 li
43.0627 178.655 li
43.4567 178.971 li
43.8497 178.2 li
44.2437 177.844 li
44.6377 180.296 li
45.0307 181.478 li
45.4247 182.211 li
45.8187 181.127 li
46.2117 179.51 li
46.6057 179.487 li
46.9987 178.884 li
47.3927 180.388 li
47.7867 178.987 li
48.1797 176.065 li
48.5737 176.592 li
48.9677 176.031 li
49.3607 176.386 li
49.7547 174.181 li
50.1477 177.003 li
50.5417 176.747 li
50.9357 176.852 li
51.3287 177.039 li
51.7227 178.345 li
52.1167 180.354 li
52.5097 179.511 li
52.9037 181.575 li
53.2967 183.011 li
53.6907 184.206 li
54.0847 184.822 li
54.4777 184.748 li
54.8717 184.489 li
55.2657 183.885 li
55.6587 181.804 li
56.0527 184.652 li
56.4457 182.148 li
56.8397 183.769 li
57.2337 182.668 li
57.6267 182.51 li
58.0207 181.204 li
58.4147 182.8 li
58.8077 180.894 li
59.2017 180.376 li
59.5957 179.527 li
59.9887 179.136 li
60.3827 177.591 li
60.7757 178.528 li
61.1697 179.752 li
61.5637 180.274 li
61.9567 179.402 li
62.3507 179.901 li
62.7447 182.498 li
63.1377 180.207 li
63.5317 180.894 li
63.9247 178.989 li
64.3187 179.839 li
64.7127 181.301 li
65.1057 180.09 li
65.4997 179.446 li
65.8937 178.528 li
66.2867 179.58 li
66.6807 180.53 li
67.0737 180.814 li
67.4677 180.636 li
67.8617 179.703 li
68.2547 177.23 li
68.6487 180.205 li
69.0427 179.725 li
69.4357 179.484 li
69.8297 179.319 li
70.2227 179.421 li
70.6167 177.817 li
71.0107 182.668 li
71.4037 181.388 li
71.7977 182.115 li
72.1917 179.581 li
72.5847 183.28 li
72.9787 180.962 li
73.3727 181.471 li
73.7657 180.62 li
74.1597 179.583 li
74.5527 177.012 li
74.9467 178.804 li
75.3407 177.577 li
75.7337 180.021 li
76.1277 178.454 li
76.5217 178.444 li
76.9147 178.61 li
77.3087 177.169 li
77.7017 177.642 li
78.0957 177.071 li
78.4897 175.025 li
78.8827 176.136 li
79.2767 176.367 li
79.6707 177.274 li
80.0637 176.481 li
80.4577 176.448 li
80.8507 177.112 li
81.2447 177.439 li
81.6387 178.697 li
82.0317 176.055 li
82.4257 179.872 li
82.8197 179.221 li
83.2127 179.574 li
83.6067 179.915 li
83.9997 179.881 li
84.3937 176.07 li
84.7877 177.526 li
85.1807 175.262 li
85.5747 174.77 li
85.9687 177.327 li
86.3617 174.616 li
86.7557 177.455 li
87.1497 177.45 li
87.5427 177.193 li
87.9367 176.074 li
88.3297 175.732 li
88.7237 176.197 li
89.1177 177.167 li
89.5107 178.416 li
89.9047 178.152 li
90.2987 178.625 li
90.6917 178.345 li
91.0857 180.114 li
91.4787 180.975 li
91.8727 181.035 li
92.2667 182.168 li
92.6597 181.365 li
93.0537 181.805 li
93.4477 179.484 li
93.8407 181.606 li
94.2347 180.996 li
94.6277 180.348 li
95.0217 181.993 li
95.4157 183.526 li
95.8087 182.485 li
96.2027 183.161 li
96.5967 183.062 li
96.9897 183.714 li
97.3837 183.821 li
97.7767 183.765 li
98.1707 183.46 li
98.5647 183.195 li
98.9577 180.942 li
99.3517 180.882 li
99.7457 181.943 li
100.139 182.858 li
100.533 179.945 li
100.927 180.547 li
101.32 181.977 li
101.714 182.025 li
102.107 181.123 li
102.501 180.964 li
102.895 181.441 li
103.288 181.731 li
103.682 181.081 li
104.076 179.239 li
104.469 182.618 li
104.863 183.854 li
105.256 181.697 li
105.65 180.997 li
106.044 180.295 li
106.437 184.617 li
106.831 184.421 li
107.225 184.293 li
107.618 184.878 li
108.012 182.9 li
108.405 183.477 li
108.799 184.229 li
109.193 183.769 li
109.586 184.489 li
109.98 181.685 li
110.374 184.205 li
110.767 182.003 li
111.161 182.867 li
111.554 184.144 li
111.948 186.592 li
112.342 186.661 li
112.735 183.712 li
113.129 181.728 li
113.523 182.553 li
113.916 180.758 li
114.31 179.644 li
114.703 181.558 li
115.097 180.542 li
115.491 182.995 li
115.884 182.315 li
116.278 184.064 li
116.672 182.451 li
117.065 182.542 li
117.459 181.962 li
117.853 182.309 li
118.246 181.232 li
118.64 184.117 li
119.033 181.83 li
119.427 181.961 li
119.821 181.263 li
120.214 181.739 li
120.608 183.294 li
121.002 182.756 li
121.395 182.265 li
121.789 183.437 li
122.182 182.966 li
122.576 181.722 li
122.97 179.297 li
123.363 179.782 li
123.757 178.218 li
124.151 178.901 li
124.544 178.031 li
124.938 176.695 li
125.331 176.165 li
125.725 175.477 li
126.119 177.426 li
126.512 177.239 li
126.906 178.082 li
127.3 177.685 li
127.693 177.188 li
128.087 176.245 li
128.48 176.116 li
128.874 178.256 li
129.268 177.18 li
129.661 176.004 li
130.055 177.138 li
130.449 174.599 li
130.842 176.888 li
131.236 177.66 li
131.63 176.134 li
132.023 179.191 li
132.417 177.899 li
132.81 178.574 li
133.204 180.795 li
133.598 181.648 li
133.991 182.515 li
134.385 183.845 li
134.779 182.521 li
135.172 183.03 li
135.566 183.827 li
135.959 182.446 li
136.353 182.717 li
136.747 184.026 li
137.14 183.568 li
137.534 183.015 li
137.928 183.398 li
138.321 184.891 li
138.715 184.645 li
139.108 184.048 li
139.502 182.908 li
139.896 183.001 li
140.289 181.469 li
140.683 183.516 li
141.077 182.711 li
141.47 182.135 li
141.864 179.974 li
142.257 181.19 li
142.651 178.278 li
143.045 176.359 li
143.438 178.51 li
143.832 177.745 li
144.226 177.599 li
144.619 178.96 li
145.013 177.107 li
145.407 178.133 li
145.8 176.683 li
146.194 176.973 li
146.587 176.732 li
146.981 177.283 li
147.375 176.73 li
147.768 178.155 li
148.162 179.011 li
148.556 176.461 li
148.949 176.295 li
149.343 175.753 li
149.736 175.216 li
150.13 176.998 li
150.524 180.202 li
150.917 179.892 li
151.311 181.447 li
151.705 185.961 li
152.098 184.903 li
152.492 186.078 li
152.885 185.612 li
153.279 186.084 li
153.673 186.362 li
154.066 185.765 li
154.46 185.204 li
154.854 184.788 li
155.247 184.095 li
155.641 181.729 li
156.034 183.416 li
156.428 182.221 li
156.822 182.04 li
157.215 181.193 li
157.609 181.506 li
158.003 182.879 li
158.396 181.907 li
158.79 182.622 li
159.184 180.682 li
159.577 182.936 li
159.971 181.92 li
160.364 181.182 li
160.758 183.641 li
161.152 182.004 li
161.545 183.065 li
161.939 182.384 li
162.333 183.73 li
162.726 185.086 li
163.12 181.969 li
163.513 183.244 li
163.907 181.854 li
164.301 181.324 li
164.694 182.7 li
165.088 182.947 li
165.482 182.862 li
165.875 183.733 li
166.269 183.2 li
166.662 182.151 li
167.056 181.411 li
167.45 180.696 li
167.843 183.674 li
168.237 179.919 li
168.631 180.673 li
169.024 182.507 li
169.418 182.722 li
169.811 181.025 li
170.205 179.937 li
170.599 180.746 li
170.992 181.304 li
171.386 180.092 li
171.78 180.429 li
172.173 181.9 li
172.567 178.985 li
172.96 178.39 li
173.354 177.31 li
173.748 176.604 li
174.141 178.885 li
174.535 177.57 li
174.929 178.57 li
175.322 178.661 li
175.716 179.807 li
176.11 182.115 li
176.503 181.571 li
176.897 179.499 li
177.29 180.331 li
177.684 182.412 li
178.078 179.614 li
178.471 180.452 li
178.865 181.123 li
179.259 178.454 li
179.652 180.909 li
180.046 181.459 li
180.439 178.221 li
180.833 176.107 li
181.227 179.068 li
181.62 180.364 li
182.014 180.52 li
182.408 179.506 li
182.801 180.218 li
183.195 181.103 li
183.588 182.075 li
183.982 179.881 li
184.376 182.024 li
184.769 181.063 li
185.163 179.343 li
185.557 180.671 li
185.95 180.04 li
186.344 179.407 li
186.738 180.61 li
187.131 181.4 li
187.525 180.659 li
187.918 181.47 li
188.312 181.732 li
188.706 178.566 li
189.099 182.064 li
189.493 181.833 li
189.887 181.14 li
190.28 181.447 li
190.674 177.576 li
191.067 177.989 li
191.461 179.844 li
191.855 178.474 li
192.248 180.184 li
192.642 180.944 li
193.036 178.574 li
193.429 179.348 li
193.823 179.752 li
194.216 181.041 li
194.61 179.645 li
195.004 180.738 li
195.397 180.503 li
195.791 181.475 li
196.185 181.257 li
196.578 180.484 li
196.972 179.859 li
197.365 181.475 li
197.759 181.606 li
198.153 180.911 li
198.546 181.102 li
198.94 179.643 li
199.334 180.896 li
199.727 182.669 li
200.121 184.253 li
200.515 184.764 li
200.908 185.875 li
201.302 183.494 li
201.695 184.349 li
202.089 186.348 li
202.483 185.128 li
202.876 185.598 li
203.27 187.205 li
203.664 184.551 li
204.057 183.045 li
204.451 182.063 li
204.844 182.27 li
205.238 181.396 li
205.632 179.12 li
206.025 179.061 li
206.419 178.962 li
206.813 177.603 li
207.206 176.845 li
207.6 176.999 li
207.993 177.374 li
208.387 180.851 li
208.781 178.857 li
209.174 177.723 li
209.568 177.319 li
209.962 177.408 li
210.355 177.639 li
210.749 179.942 li
211.142 179.813 li
211.536 178.554 li
211.93 179.003 li
212.323 179.525 li
212.717 179.853 li
213.111 179.027 li
213.504 179.566 li
213.898 178.659 li
214.291 178.319 li
214.685 179.467 li
215.079 177.244 li
215.472 178.745 li
215.866 177.482 li
216.26 177.736 li
216.653 180.008 li
217.047 178.568 li
217.441 180.737 li
217.834 179.171 li
218.228 178.915 li
218.621 178.712 li
219.015 177.803 li
219.409 179.057 li
219.802 177.784 li
220.196 178.78 li
220.59 180.136 li
220.983 181.459 li
221.377 181.365 li
221.77 178.449 li
222.164 177.641 li
222.558 178.931 li
222.951 178.926 li
223.345 178.552 li
223.739 178.439 li
224.132 178.819 li
224.526 177.525 li
224.919 178.082 li
225.313 178.624 li
225.707 180.645 li
226.1 180.261 li
226.494 180.603 li
@
30.4667 167.9 mo
30.8607 168.397 li
31.2537 168.991 li
31.6477 168.244 li
32.0417 168.075 li
32.4347 169.666 li
32.8287 169.481 li
33.2217 171.161 li
33.6157 167.878 li
34.0097 169.043 li
34.4027 169.728 li
34.7967 169.246 li
35.1907 166.987 li
35.5837 167.782 li
35.9777 169.341 li
36.3707 171.359 li
36.7647 170.381 li
37.1587 170.354 li
37.5517 171.12 li
37.9457 168.708 li
38.3397 169.54 li
38.7327 169.544 li
39.1267 167.059 li
39.5197 167.041 li
39.9137 167.852 li
40.3077 167.448 li
40.7007 168.672 li
41.0947 168.459 li
41.4887 164.525 li
41.8817 167.391 li
42.2757 167.3 li
42.6687 168.527 li
43.0627 169.413 li
43.4567 169.382 li
43.8497 170.296 li
44.2437 173.311 li
44.6377 173.264 li
45.0307 172.32 li
45.4247 170.997 li
45.8187 169.828 li
46.2117 168.093 li
46.6057 167.324 li
46.9987 167.202 li
47.3927 168.328 li
47.7867 167.133 li
48.1797 166.313 li
48.5737 166.947 li
48.9677 166.822 li
49.3607 167.069 li
49.7547 165.588 li
50.1477 164.806 li
50.5417 166.678 li
50.9357 165.3 li
51.3287 166.134 li
51.7227 165.389 li
52.1167 168.597 li
52.5097 169.369 li
52.9037 169.547 li
53.2967 168.874 li
53.6907 168.498 li
54.0847 168.826 li
54.4777 170.386 li
54.8717 171.542 li
55.2657 170.05 li
55.6587 169.48 li
56.0527 169.241 li
56.4457 169.903 li
56.8397 170.209 li
57.2337 167.76 li
57.6267 166.728 li
58.0207 164.983 li
58.4147 165.485 li
58.8077 167.624 li
59.2017 164.52 li
59.5957 166.446 li
59.9887 167.348 li
60.3827 167.029 li
60.7757 166.295 li
61.1697 165.94 li
61.5637 167.23 li
61.9567 163.347 li
62.3507 167.726 li
62.7447 167.758 li
63.1377 168.498 li
63.5317 166.701 li
63.9247 167.286 li
64.3187 165.265 li
64.7127 168.363 li
65.1057 168.19 li
65.4997 166.563 li
65.8937 164.595 li
66.2867 165.856 li
66.6807 166.613 li
67.0737 167.089 li
67.4677 165.807 li
67.8617 166.204 li
68.2547 165.445 li
68.6487 167.861 li
69.0427 167.576 li
69.4357 164.68 li
69.8297 165.913 li
70.2227 164.039 li
70.6167 165.246 li
71.0107 165.255 li
71.4037 165.459 li
71.7977 167.681 li
72.1917 165.931 li
72.5847 167.044 li
72.9787 166.087 li
73.3727 166.666 li
73.7657 165.964 li
74.1597 166.049 li
74.5527 166.169 li
74.9467 166.38 li
75.3407 167.819 li
75.7337 169.325 li
76.1277 168.136 li
76.5217 168.486 li
76.9147 167.814 li
77.3087 167.805 li
77.7017 165.57 li
78.0957 165.083 li
78.4897 166.519 li
78.8827 166.881 li
79.2767 164.866 li
79.6707 166.52 li
80.0637 165.033 li
80.4577 166.464 li
80.8507 168.116 li
81.2447 167.603 li
81.6387 168.328 li
82.0317 167.707 li
82.4257 171.305 li
82.8197 170.895 li
83.2127 167.934 li
83.6067 165.224 li
83.9997 165.148 li
84.3937 162.971 li
84.7877 161.519 li
85.1807 161.893 li
85.5747 163.585 li
85.9687 165.395 li
86.3617 166.233 li
86.7557 166.179 li
87.1497 165.332 li
87.5427 166.634 li
87.9367 166.517 li
88.3297 165.73 li
88.7237 166.69 li
89.1177 167.657 li
89.5107 166.213 li
89.9047 165.601 li
90.2987 165.209 li
90.6917 163.786 li
91.0857 165.523 li
91.4787 162.973 li
91.8727 163.97 li
92.2667 166.01 li
92.6597 163.251 li
93.0537 163.857 li
93.4477 166.464 li
93.8407 163.306 li
94.2347 164.781 li
94.6277 160.735 li
95.0217 163.555 li
95.4157 164.88 li
95.8087 163.091 li
96.2027 164.938 li
96.5967 164.068 li
96.9897 165.211 li
97.3837 165.217 li
97.7767 166.014 li
98.1707 166.706 li
98.5647 164.636 li
98.9577 165.482 li
99.3517 164.268 li
99.7457 163.962 li
100.139 162.979 li
100.533 162.453 li
100.927 165.951 li
101.32 169.082 li
101.714 169.55 li
102.107 169.325 li
102.501 168.179 li
102.895 167.484 li
103.288 168.32 li
103.682 168.15 li
104.076 167.205 li
104.469 170.189 li
104.863 169.163 li
105.256 170.234 li
105.65 168.677 li
106.044 169.978 li
106.437 170.578 li
106.831 171.666 li
107.225 171.374 li
107.618 170.919 li
108.012 168.058 li
108.405 170.308 li
108.799 168.194 li
109.193 170.45 li
109.586 170.488 li
109.98 168.775 li
110.374 170.381 li
110.767 169.161 li
111.161 167.217 li
111.554 169.323 li
111.948 168.85 li
112.342 170.01 li
112.735 169.408 li
113.129 166.671 li
113.523 167.427 li
113.916 168.624 li
114.31 167.303 li
114.703 169.575 li
115.097 166.604 li
115.491 168.208 li
115.884 166.982 li
116.278 166.433 li
116.672 168.959 li
117.065 166.697 li
117.459 166.106 li
117.853 165.382 li
118.246 168.489 li
118.64 168.395 li
119.033 168.376 li
119.427 165.386 li
119.821 164.548 li
120.214 165.868 li
120.608 163.903 li
121.002 166.291 li
121.395 166.982 li
121.789 167.478 li
122.182 168.353 li
122.576 166.796 li
122.97 166.288 li
123.363 164.478 li
123.757 162.54 li
124.151 162.679 li
124.544 163.629 li
124.938 161.429 li
125.331 162.21 li
125.725 161.005 li
126.119 160.494 li
126.512 162.829 li
126.906 161.576 li
127.3 163.712 li
127.693 161.046 li
128.087 160.74 li
128.48 160.96 li
128.874 160.101 li
129.268 160.686 li
129.661 159.961 li
130.055 163.493 li
130.449 164.271 li
130.842 163.86 li
131.236 163.326 li
131.63 161.042 li
132.023 160.425 li
132.417 159.342 li
132.81 162.649 li
133.204 164.559 li
133.598 164.973 li
133.991 165.037 li
134.385 166.556 li
134.779 166.651 li
135.172 165.076 li
135.566 166.157 li
135.959 168.422 li
136.353 167.091 li
136.747 165.676 li
137.14 165.574 li
137.534 164.936 li
137.928 166.411 li
138.321 166.638 li
138.715 166.984 li
139.108 166.817 li
139.502 166.357 li
139.896 165.04 li
140.289 166.536 li
140.683 167.171 li
141.077 166.732 li
141.47 164.835 li
141.864 164.968 li
142.257 166.156 li
142.651 167.107 li
143.045 167.009 li
143.438 167.354 li
143.832 164.579 li
144.226 164.522 li
144.619 165.437 li
145.013 163.581 li
145.407 164.739 li
145.8 162.724 li
146.194 162.44 li
146.587 163.388 li
146.981 165.636 li
147.375 164.646 li
147.768 165.482 li
148.162 164.49 li
148.556 165.071 li
148.949 164.228 li
149.343 166.118 li
149.736 165.253 li
150.13 167.125 li
150.524 168.954 li
150.917 167.803 li
151.311 169.065 li
151.705 172.437 li
152.098 169.956 li
152.492 173.997 li
152.885 174.156 li
153.279 172.689 li
153.673 172.742 li
154.066 172.16 li
154.46 170.769 li
154.854 169.301 li
155.247 169.921 li
155.641 167.885 li
156.034 170.201 li
156.428 168.817 li
156.822 166.899 li
157.215 166.525 li
157.609 169.959 li
158.003 171.331 li
158.396 168.624 li
158.79 171.293 li
159.184 172.484 li
159.577 174.397 li
159.971 172.999 li
160.364 172.223 li
160.758 175.647 li
161.152 174.895 li
161.545 175.598 li
161.939 174.314 li
162.333 174.837 li
162.726 174.476 li
163.12 173.433 li
163.513 172.991 li
163.907 171.2 li
164.301 171.139 li
164.694 172.21 li
165.088 170.768 li
165.482 173.15 li
165.875 172.79 li
166.269 171.59 li
166.662 172.232 li
167.056 171.033 li
167.45 172.363 li
167.843 170.128 li
168.237 171.721 li
168.631 172.849 li
169.024 171.962 li
169.418 169.691 li
169.811 168.202 li
170.205 167.633 li
170.599 170.224 li
170.992 170.288 li
171.386 170.154 li
171.78 169.593 li
172.173 167.868 li
172.567 165.227 li
172.96 163.62 li
173.354 164.215 li
173.748 163.13 li
174.141 160.823 li
174.535 160.55 li
174.929 160.901 li
175.322 162.453 li
175.716 163.468 li
176.11 164.806 li
176.503 164.044 li
176.897 165.326 li
177.29 164.839 li
177.684 165.099 li
178.078 166.172 li
178.471 164.772 li
178.865 165.405 li
179.259 165.134 li
179.652 164.924 li
180.046 164.151 li
180.439 161.588 li
180.833 162.25 li
181.227 163.193 li
181.62 164.498 li
182.014 165.451 li
182.408 163.265 li
182.801 164.12 li
183.195 166.173 li
183.588 164.817 li
183.982 163.952 li
184.376 164.945 li
184.769 165.282 li
185.163 163.648 li
185.557 163.102 li
185.95 164.904 li
186.344 165.187 li
186.738 166.549 li
187.131 165.588 li
187.525 166.396 li
187.918 167.961 li
188.312 168.805 li
188.706 165.32 li
189.099 167.178 li
189.493 167.124 li
189.887 166.161 li
190.28 162.565 li
190.674 161.498 li
191.067 160.95 li
191.461 164.504 li
191.855 161.851 li
192.248 162.415 li
192.642 163.233 li
193.036 163.59 li
193.429 163.97 li
193.823 164.035 li
194.216 162.88 li
194.61 164.668 li
195.004 161.587 li
195.397 162.927 li
195.791 163.836 li
196.185 164.06 li
196.578 165.224 li
196.972 163.795 li
197.365 166.357 li
197.759 168.303 li
198.153 167.719 li
198.546 167.773 li
198.94 167.413 li
199.334 166.964 li
199.727 166.89 li
200.121 167.393 li
200.515 164.951 li
200.908 167.737 li
201.302 166.135 li
201.695 165.873 li
202.089 167.085 li
202.483 165.995 li
202.876 166.227 li
203.27 167.11 li
203.664 163.584 li
204.057 164.182 li
204.451 162.614 li
204.844 164.662 li
205.238 164.076 li
205.632 163.498 li
206.025 164.444 li
206.419 164.551 li
206.813 165.065 li
207.206 164.524 li
207.6 165.161 li
207.993 164.255 li
208.387 167.164 li
208.781 164.873 li
209.174 166.121 li
209.568 165.977 li
209.962 165.291 li
210.355 165.372 li
210.749 163.877 li
211.142 167.123 li
211.536 167.44 li
211.93 167.357 li
212.323 166.508 li
212.717 166.791 li
213.111 166.57 li
213.504 166.258 li
213.898 163.571 li
214.291 164.446 li
214.685 167.101 li
215.079 166.391 li
215.472 164.797 li
215.866 165.772 li
216.26 166.576 li
216.653 165.304 li
217.047 164.089 li
217.441 165.909 li
217.834 166.111 li
218.228 165.321 li
218.621 165.213 li
219.015 166.507 li
219.409 166.778 li
219.802 165.674 li
220.196 166.854 li
220.59 167.925 li
220.983 169.046 li
221.377 167.703 li
221.77 167.085 li
222.164 166.797 li
222.558 165.587 li
222.951 166.442 li
223.345 169.474 li
223.739 168.228 li
224.132 168.911 li
224.526 167.74 li
224.919 166.654 li
225.313 166.242 li
225.707 168.53 li
226.1 170.742 li
226.494 170.671 li
@
30.4667 154.157 mo
30.8607 155.227 li
31.2537 155.114 li
31.6477 155.443 li
32.0417 155.648 li
32.4347 155.852 li
32.8287 156.605 li
33.2217 159.865 li
33.6157 157.966 li
34.0097 157.257 li
34.4027 156.499 li
34.7967 156.009 li
35.1907 157.739 li
35.5837 155.983 li
35.9777 156.271 li
36.3707 157.551 li
36.7647 154.907 li
37.1587 157.872 li
37.5517 156.239 li
37.9457 156.18 li
38.3397 156.633 li
38.7327 157.048 li
39.1267 155.118 li
39.5197 154.855 li
39.9137 155.653 li
40.3077 152.82 li
40.7007 153.183 li
41.0947 154.325 li
41.4887 154.855 li
41.8817 154.996 li
42.2757 153.733 li
42.6687 152.136 li
43.0627 155.538 li
43.4567 156.197 li
43.8497 158.447 li
44.2437 160.773 li
44.6377 161.105 li
45.0307 161.353 li
45.4247 160.982 li
45.8187 159.643 li
46.2117 160.433 li
46.6057 159.212 li
46.9987 159.401 li
47.3927 157.772 li
47.7867 159.478 li
48.1797 158.348 li
48.5737 157.311 li
48.9677 157.595 li
49.3607 159.273 li
49.7547 156.743 li
50.1477 154.463 li
50.5417 157.157 li
50.9357 158.32 li
51.3287 157.297 li
51.7227 154.557 li
52.1167 155.712 li
52.5097 155.696 li
52.9037 153.868 li
53.2967 154.936 li
53.6907 153.567 li
54.0847 153.046 li
54.4777 156.071 li
54.8717 155.113 li
55.2657 155.043 li
55.6587 152.898 li
56.0527 150.578 li
56.4457 153.047 li
56.8397 153.189 li
57.2337 150.994 li
57.6267 153.921 li
58.0207 150.794 li
58.4147 150.174 li
58.8077 149.935 li
59.2017 148.67 li
59.5957 150.579 li
59.9887 150.996 li
60.3827 151.033 li
60.7757 150.129 li
61.1697 149.966 li
61.5637 148.311 li
61.9567 147.774 li
62.3507 149.665 li
62.7447 150.152 li
63.1377 151.322 li
63.5317 151.072 li
63.9247 151.505 li
64.3187 152.232 li
64.7127 154.538 li
65.1057 155.177 li
65.4997 154.782 li
65.8937 155.038 li
66.2867 154.722 li
66.6807 156.729 li
67.0737 156.571 li
67.4677 155.525 li
67.8617 156.251 li
68.2547 155.664 li
68.6487 154.563 li
69.0427 155.355 li
69.4357 156.122 li
69.8297 154.447 li
70.2227 155.116 li
70.6167 154.847 li
71.0107 155.121 li
71.4037 154.423 li
71.7977 156.753 li
72.1917 154.36 li
72.5847 153.552 li
72.9787 152.176 li
73.3727 154.786 li
73.7657 155.121 li
74.1597 155.304 li
74.5527 155.463 li
74.9467 154.325 li
75.3407 153.235 li
75.7337 151.973 li
76.1277 151.085 li
76.5217 152.298 li
76.9147 150.05 li
77.3087 150.253 li
77.7017 150.128 li
78.0957 148.427 li
78.4897 149.333 li
78.8827 150.339 li
79.2767 148.716 li
79.6707 150.884 li
80.0637 150.6 li
80.4577 152.298 li
80.8507 152.179 li
81.2447 153.012 li
81.6387 153.872 li
82.0317 154.558 li
82.4257 157.15 li
82.8197 154.174 li
83.2127 155.489 li
83.6067 152 li
83.9997 152.638 li
84.3937 149.485 li
84.7877 151.038 li
85.1807 149.039 li
85.5747 150.13 li
85.9687 152.619 li
86.3617 155.666 li
86.7557 156.321 li
87.1497 155.453 li
87.5427 155.049 li
87.9367 155.488 li
88.3297 154.485 li
88.7237 154.353 li
89.1177 153.07 li
89.5107 153.025 li
89.9047 154.427 li
90.2987 153.219 li
90.6917 151.661 li
91.0857 151.822 li
91.4787 153.515 li
91.8727 153.001 li
92.2667 152.148 li
92.6597 151.844 li
93.0537 152.571 li
93.4477 152.437 li
93.8407 153.083 li
94.2347 151.235 li
94.6277 152.114 li
95.0217 152.023 li
95.4157 153.135 li
95.8087 150.907 li
96.2027 152.908 li
96.5967 153.055 li
96.9897 151.801 li
97.3837 155.283 li
97.7767 155.739 li
98.1707 153.493 li
98.5647 154 li
98.9577 151.518 li
99.3517 153.004 li
99.7457 151.454 li
100.139 152.677 li
100.533 152.192 li
100.927 152.786 li
101.32 154.541 li
101.714 153.428 li
102.107 153.817 li
102.501 154.424 li
102.895 151.731 li
103.288 153.672 li
103.682 152.869 li
104.076 153.088 li
104.469 154.623 li
104.863 155.16 li
105.256 155.54 li
105.65 155.246 li
106.044 157.285 li
106.437 158.351 li
106.831 156.97 li
107.225 159.889 li
107.618 158.789 li
108.012 158.34 li
108.405 157.059 li
108.799 155.663 li
109.193 153.737 li
109.586 156.65 li
109.98 157.708 li
110.374 156.639 li
110.767 158.34 li
111.161 158.075 li
111.554 155.957 li
111.948 156.325 li
112.342 155.576 li
112.735 157.607 li
113.129 159.029 li
113.523 159.242 li
113.916 157.305 li
114.31 157.811 li
114.703 158.483 li
115.097 158.616 li
115.491 156.931 li
115.884 158.983 li
116.278 157.122 li
116.672 156.589 li
117.065 156.716 li
117.459 156.624 li
117.853 155.359 li
118.246 156.605 li
118.64 156.486 li
119.033 157.643 li
119.427 155.216 li
119.821 156.36 li
120.214 157.03 li
120.608 155.485 li
121.002 155.903 li
121.395 155.984 li
121.789 157.149 li
122.182 158.108 li
122.576 160.326 li
122.97 157.443 li
123.363 155.808 li
123.757 155.483 li
124.151 153.485 li
124.544 155.678 li
124.938 154.59 li
125.331 155.693 li
125.725 153.368 li
126.119 154.567 li
126.512 152.669 li
126.906 154.055 li
127.3 153.691 li
127.693 154.472 li
128.087 153.635 li
128.48 153.675 li
128.874 150.505 li
129.268 149.45 li
129.661 152.377 li
130.055 153.093 li
130.449 155.769 li
130.842 155.409 li
131.236 154.588 li
131.63 152.004 li
132.023 152.663 li
132.417 151.761 li
132.81 152.605 li
133.204 153.893 li
133.598 152.437 li
133.991 152.262 li
134.385 155.369 li
134.779 154.138 li
135.172 151 li
135.566 151.747 li
135.959 152.058 li
136.353 150.103 li
136.747 148.123 li
137.14 149.658 li
137.534 150.857 li
137.928 151.319 li
138.321 150.102 li
138.715 150.161 li
139.108 152.883 li
139.502 150.057 li
139.896 149.901 li
140.289 151.747 li
140.683 155.069 li
141.077 154.056 li
141.47 152.132 li
141.864 152.345 li
142.257 152.598 li
142.651 153.819 li
143.045 155.723 li
143.438 152.747 li
143.832 153.396 li
144.226 152.822 li
144.619 152.777 li
145.013 152.849 li
145.407 150.94 li
145.8 152.097 li
146.194 153.376 li
146.587 152.317 li
146.981 153.356 li
147.375 150.916 li
147.768 151.834 li
148.162 151.977 li
148.556 154.062 li
148.949 153.992 li
149.343 154.983 li
149.736 154.501 li
150.13 155.422 li
150.524 157.721 li
150.917 156.961 li
151.311 155.868 li
151.705 155.955 li
152.098 154.977 li
152.492 157.996 li
152.885 153.535 li
153.279 153.148 li
153.673 153.231 li
154.066 154.276 li
154.46 151.004 li
154.854 151.573 li
155.247 151.691 li
155.641 150.114 li
156.034 149.822 li
156.428 149.281 li
156.822 147.133 li
157.215 147.707 li
157.609 151.143 li
158.003 151.817 li
158.396 151.17 li
158.79 152.015 li
159.184 154.994 li
159.577 153.012 li
159.971 154.387 li
160.364 153.081 li
160.758 158.514 li
161.152 158.187 li
161.545 156.707 li
161.939 156.969 li
162.333 157.02 li
162.726 152.461 li
163.12 153.835 li
163.513 153.778 li
163.907 153.798 li
164.301 154.714 li
164.694 154.528 li
165.088 153.649 li
165.482 155.008 li
165.875 155.818 li
166.269 154.949 li
166.662 155.633 li
167.056 155.109 li
167.45 153.783 li
167.843 153.396 li
168.237 154.404 li
168.631 153.644 li
169.024 155.199 li
169.418 153.119 li
169.811 153.468 li
170.205 151.576 li
170.599 152.758 li
170.992 152.708 li
171.386 152.894 li
171.78 153.728 li
172.173 154.658 li
172.567 150.825 li
172.96 149.475 li
173.354 152.652 li
173.748 151.365 li
174.141 149.467 li
174.535 150.169 li
174.929 149.537 li
175.322 148.685 li
175.716 150.592 li
176.11 150.65 li
176.503 150.005 li
176.897 152.473 li
177.29 151.49 li
177.684 151.366 li
178.078 151.255 li
178.471 151.741 li
178.865 150.816 li
179.259 153.343 li
179.652 152.322 li
180.046 150.608 li
180.439 147.129 li
180.833 149.509 li
181.227 149.863 li
181.62 150.498 li
182.014 151.937 li
182.408 153.496 li
182.801 152.986 li
183.195 152.302 li
183.588 151.588 li
183.982 151.767 li
184.376 153.527 li
184.769 153.641 li
185.163 152.55 li
185.557 150.489 li
185.95 149.429 li
186.344 149.813 li
186.738 149.292 li
187.131 149.036 li
187.525 151.161 li
187.918 151.298 li
188.312 150.638 li
188.706 151.251 li
189.099 151.147 li
189.493 151.438 li
189.887 150.8 li
190.28 151.169 li
190.674 151.275 li
191.067 149.142 li
191.461 150.255 li
191.855 152.64 li
192.248 152.334 li
192.642 151.506 li
193.036 152.068 li
193.429 152.082 li
193.823 151.191 li
194.216 154.113 li
194.61 152.76 li
195.004 153.587 li
195.397 154.821 li
195.791 156.932 li
196.185 156.484 li
196.578 156.59 li
196.972 154.712 li
197.365 157.157 li
197.759 154.539 li
198.153 154.92 li
198.546 154.729 li
198.94 153.383 li
199.334 154.403 li
199.727 151.237 li
200.121 152.377 li
200.515 151.462 li
200.908 152.953 li
201.302 152.775 li
201.695 151.267 li
202.089 151.449 li
202.483 151.127 li
202.876 151.121 li
203.27 151.267 li
203.664 150.286 li
204.057 148.074 li
204.451 149.522 li
204.844 149.925 li
205.238 149.337 li
205.632 147.201 li
206.025 146.593 li
206.419 145.718 li
206.813 147.341 li
207.206 146.677 li
207.6 146.379 li
207.993 144.895 li
208.387 146.32 li
208.781 146.542 li
209.174 149.19 li
209.568 148.791 li
209.962 147.8 li
210.355 148.456 li
210.749 146.396 li
211.142 148.739 li
211.536 146.525 li
211.93 148.101 li
212.323 147.258 li
212.717 148.741 li
213.111 147.619 li
213.504 146.433 li
213.898 148.836 li
214.291 149.262 li
214.685 150.714 li
215.079 149.793 li
215.472 150.063 li
215.866 152.324 li
216.26 150.925 li
216.653 152.677 li
217.047 153.573 li
217.441 154.279 li
217.834 155.098 li
218.228 154.101 li
218.621 154.22 li
219.015 154.676 li
219.409 156.014 li
219.802 154.272 li
220.196 153.993 li
220.59 153.222 li
220.983 153.946 li
221.377 154.631 li
221.77 154.705 li
222.164 152.012 li
222.558 152.214 li
222.951 150.785 li
223.345 153.217 li
223.739 152.14 li
224.132 153.351 li
224.526 152.445 li
224.919 151.032 li
225.313 152.232 li
225.707 153.422 li
226.1 153.954 li
226.494 156.003 li
@
30.4667 144.021 mo
30.8607 140.074 li
31.2537 140.434 li
31.6477 139.955 li
32.0417 140.048 li
32.4347 139.69 li
32.8287 140.737 li
33.2217 142.15 li
33.6157 140.992 li
34.0097 141.322 li
34.4027 141.197 li
34.7967 141.712 li
35.1907 141.99 li
35.5837 141.496 li
35.9777 141.472 li
36.3707 141.024 li
36.7647 140.046 li
37.1587 141.163 li
37.5517 140.518 li
37.9457 139.472 li
38.3397 141.025 li
38.7327 141.294 li
39.1267 140.041 li
39.5197 138.162 li
39.9137 139.745 li
40.3077 139.234 li
40.7007 137.552 li
41.0947 140.779 li
41.4887 140.722 li
41.8817 143.59 li
42.2757 143.388 li
42.6687 141.328 li
43.0627 141.665 li
43.4567 143.678 li
43.8497 144.071 li
44.2437 143.502 li
44.6377 141.301 li
45.0307 143.283 li
45.4247 145.094 li
45.8187 146.002 li
46.2117 147.421 li
46.6057 145.963 li
46.9987 145.086 li
47.3927 145.102 li
47.7867 146.535 li
48.1797 144.42 li
48.5737 143.165 li
48.9677 143.396 li
49.3607 144.459 li
49.7547 143.531 li
50.1477 141.377 li
50.5417 142.39 li
50.9357 142.448 li
51.3287 140.788 li
51.7227 139.122 li
52.1167 140.554 li
52.5097 140.435 li
52.9037 138.651 li
53.2967 138.71 li
53.6907 136.735 li
54.0847 136.199 li
54.4777 136.732 li
54.8717 137.403 li
55.2657 140.598 li
55.6587 140.037 li
56.0527 138.273 li
56.4457 136.962 li
56.8397 139.445 li
57.2337 138.193 li
57.6267 136.612 li
58.0207 137.42 li
58.4147 137.577 li
58.8077 138.098 li
59.2017 136.625 li
59.5957 136.712 li
59.9887 138.792 li
60.3827 136.499 li
60.7757 135.017 li
61.1697 136.286 li
61.5637 135.751 li
61.9567 134.52 li
62.3507 136.17 li
62.7447 137.738 li
63.1377 139.072 li
63.5317 140.566 li
63.9247 142.779 li
64.3187 143.68 li
64.7127 144.302 li
65.1057 145.372 li
65.4997 144.548 li
65.8937 143.487 li
66.2867 144.674 li
66.6807 144.945 li
67.0737 146.957 li
67.4677 145.988 li
67.8617 144.06 li
68.2547 144.885 li
68.6487 147.195 li
69.0427 145.574 li
69.4357 148.433 li
69.8297 146.737 li
70.2227 147.297 li
70.6167 149.318 li
71.0107 146.997 li
71.4037 145.105 li
71.7977 147.032 li
72.1917 146.013 li
72.5847 145.604 li
72.9787 142.948 li
73.3727 143.01 li
73.7657 143.599 li
74.1597 143.223 li
74.5527 145.628 li
74.9467 141.211 li
75.3407 140.619 li
75.7337 142.745 li
76.1277 138.822 li
76.5217 137.829 li
76.9147 137.124 li
77.3087 137.927 li
77.7017 136.451 li
78.0957 135.689 li
78.4897 135.593 li
78.8827 134.902 li
79.2767 134.023 li
79.6707 136.471 li
80.0637 135.696 li
80.4577 137.211 li
80.8507 133.431 li
81.2447 134.881 li
81.6387 136.576 li
82.0317 137.335 li
82.4257 136.405 li
82.8197 138.18 li
83.2127 138.885 li
83.6067 138.376 li
83.9997 139.311 li
84.3937 138.83 li
84.7877 140.94 li
85.1807 139.758 li
85.5747 138.746 li
85.9687 140.546 li
86.3617 142.202 li
86.7557 140.96 li
87.1497 140.145 li
87.5427 140.876 li
87.9367 142.058 li
88.3297 141.153 li
88.7237 142.169 li
89.1177 140.365 li
89.5107 140.632 li
89.9047 140.565 li
90.2987 141.536 li
90.6917 140.54 li
91.0857 141.79 li
91.4787 141.551 li
91.8727 139.865 li
92.2667 140.109 li
92.6597 140.116 li
93.0537 141.381 li
93.4477 141.424 li
93.8407 144.141 li
94.2347 139.556 li
94.6277 139.128 li
95.0217 139.9 li
95.4157 139.814 li
95.8087 138.876 li
96.2027 139.955 li
96.5967 140.103 li
96.9897 140.554 li
97.3837 141.442 li
97.7767 141.164 li
98.1707 141.224 li
98.5647 141.218 li
98.9577 139.705 li
99.3517 139.692 li
99.7457 138.685 li
100.139 139.969 li
100.533 139.329 li
100.927 140.304 li
101.32 139.052 li
101.714 137.835 li
102.107 138.938 li
102.501 139.67 li
102.895 139.49 li
103.288 142.087 li
103.682 141.705 li
104.076 140.789 li
104.469 140.246 li
104.863 139.619 li
105.256 140.667 li
105.65 143.484 li
106.044 144.873 li
106.437 144.861 li
106.831 145.44 li
107.225 145.031 li
107.618 144.113 li
108.012 144.139 li
108.405 143.485 li
108.799 143.202 li
109.193 141.801 li
109.586 142.203 li
109.98 141.159 li
110.374 140.715 li
110.767 141.754 li
111.161 142.553 li
111.554 142.49 li
111.948 143.26 li
112.342 140.397 li
112.735 142.534 li
113.129 140.966 li
113.523 143.118 li
113.916 142.299 li
114.31 141.022 li
114.703 141.119 li
115.097 141.462 li
115.491 138.804 li
115.884 140.625 li
116.278 140.537 li
116.672 137.417 li
117.065 139.782 li
117.459 139.177 li
117.853 142.292 li
118.246 142.614 li
118.64 142.943 li
119.033 143.739 li
119.427 141.913 li
119.821 140.599 li
120.214 141.814 li
120.608 140.385 li
121.002 141.206 li
121.395 141.994 li
121.789 143.889 li
122.182 143.049 li
122.576 143.234 li
122.97 142.472 li
123.363 142.185 li
123.757 142.009 li
124.151 141.574 li
124.544 142.57 li
124.938 142.178 li
125.331 142.618 li
125.725 139.621 li
126.119 139.295 li
126.512 139.656 li
126.906 141.425 li
127.3 140.949 li
127.693 139.171 li
128.087 141.224 li
128.48 138.263 li
128.874 135.573 li
129.268 135.124 li
129.661 136.643 li
130.055 135.857 li
130.449 138.894 li
130.842 136.976 li
131.236 138.551 li
131.63 138.733 li
132.023 138.092 li
132.417 138.428 li
132.81 139.773 li
133.204 140.383 li
133.598 139.698 li
133.991 139.68 li
134.385 140.443 li
134.779 140.277 li
135.172 139.24 li
135.566 139.228 li
135.959 139.795 li
136.353 137.067 li
136.747 135.526 li
137.14 136.222 li
137.534 136.664 li
137.928 136.235 li
138.321 138.664 li
138.715 140.59 li
139.108 139.673 li
139.502 140.283 li
139.896 140.286 li
140.289 140.19 li
140.683 141.982 li
141.077 140.558 li
141.47 141.546 li
141.864 142.097 li
142.257 141.522 li
142.651 143.655 li
143.045 144.655 li
143.438 141.913 li
143.832 144.418 li
144.226 142.663 li
144.619 144.123 li
145.013 141.866 li
145.407 143.006 li
145.8 140.779 li
146.194 142.777 li
146.587 143.14 li
146.981 143.286 li
147.375 140.411 li
147.768 140.094 li
148.162 141.61 li
148.556 141.312 li
148.949 143.651 li
149.343 142.202 li
149.736 143.056 li
150.13 143.144 li
150.524 143.412 li
150.917 143.37 li
151.311 143.311 li
151.705 142.575 li
152.098 143.504 li
152.492 144.55 li
152.885 143.485 li
153.279 142.454 li
153.673 142.535 li
154.066 144.515 li
154.46 141.15 li
154.854 142.375 li
155.247 142.918 li
155.641 141.916 li
156.034 141.421 li
156.428 139.889 li
156.822 140.337 li
157.215 138.41 li
157.609 138.725 li
158.003 139.467 li
158.396 139.754 li
158.79 140.347 li
159.184 139.318 li
159.577 139.928 li
159.971 137.687 li
160.364 138.848 li
160.758 138.308 li
161.152 141.166 li
161.545 139.702 li
161.939 140.372 li
162.333 141.854 li
162.726 139.897 li
163.12 139.359 li
163.513 140.719 li
163.907 143.254 li
164.301 142.475 li
164.694 141.426 li
165.088 140.859 li
165.482 141.818 li
165.875 142.999 li
166.269 144.064 li
166.662 142 li
167.056 141.873 li
167.45 143.823 li
167.843 142.21 li
168.237 141.552 li
168.631 140.856 li
169.024 139.849 li
169.418 140.579 li
169.811 140.911 li
170.205 140.779 li
170.599 140.371 li
170.992 139.538 li
171.386 139.32 li
171.78 138.172 li
172.173 139.462 li
172.567 138.071 li
172.96 137.614 li
173.354 139.443 li
173.748 140.44 li
174.141 138.809 li
174.535 136.188 li
174.929 136.624 li
175.322 135.684 li
175.716 137.915 li
176.11 141.62 li
176.503 138.95 li
176.897 140.404 li
177.29 138.633 li
177.684 139.17 li
178.078 138.991 li
178.471 141.107 li
178.865 141.876 li
179.259 141.541 li
179.652 139.27 li
180.046 137.948 li
180.439 135.656 li
180.833 137.717 li
181.227 137.636 li
181.62 137.615 li
182.014 138.013 li
182.408 139.883 li
182.801 139.814 li
183.195 140.085 li
183.588 137.921 li
183.982 138.407 li
184.376 139.788 li
184.769 138.369 li
185.163 138.071 li
185.557 135.462 li
185.95 135.876 li
186.344 133.711 li
186.738 135.808 li
187.131 132.1 li
187.525 134.259 li
187.918 135.103 li
188.312 132.621 li
188.706 134.484 li
189.099 135.058 li
189.493 136.29 li
189.887 134.913 li
190.28 137.538 li
190.674 137.492 li
191.067 137.96 li
191.461 139.076 li
191.855 140.91 li
192.248 139.953 li
192.642 139.174 li
193.036 136.828 li
193.429 137.377 li
193.823 139.306 li
194.216 141.652 li
194.61 141.8 li
195.004 143.223 li
195.397 143.349 li
195.791 145.032 li
196.185 142.684 li
196.578 141.525 li
196.972 140.766 li
197.365 139.365 li
197.759 140.079 li
198.153 141.072 li
198.546 140.096 li
198.94 138.583 li
199.334 139.018 li
199.727 139.506 li
200.121 141.176 li
200.515 140.631 li
200.908 140.737 li
201.302 141.946 li
201.695 139.688 li
202.089 140.234 li
202.483 142.268 li
202.876 142.983 li
203.27 140.102 li
203.664 143.505 li
204.057 142.549 li
204.451 142.396 li
204.844 140.352 li
205.238 139.763 li
205.632 138.702 li
206.025 139.201 li
206.419 137.529 li
206.813 138.238 li
207.206 137.543 li
207.6 137.565 li
207.993 135.917 li
208.387 135.998 li
208.781 137.87 li
209.174 140.645 li
209.568 139.814 li
209.962 141.891 li
210.355 139.391 li
210.749 139.157 li
211.142 138.061 li
211.536 136.299 li
211.93 135.106 li
212.323 136.669 li
212.717 137.628 li
213.111 135.211 li
213.504 136.119 li
213.898 137.638 li
214.291 136.222 li
214.685 139.113 li
215.079 137.687 li
215.472 138.472 li
215.866 137.966 li
216.26 138.565 li
216.653 140.139 li
217.047 138.972 li
217.441 137.158 li
217.834 137.245 li
218.228 140.53 li
218.621 138.75 li
219.015 138.857 li
219.409 137.278 li
219.802 137.903 li
220.196 140.557 li
220.59 138.539 li
220.983 137.973 li
221.377 140.285 li
221.77 140.687 li
222.164 139.193 li
222.558 138.125 li
222.951 141.62 li
223.345 138.282 li
223.739 139.179 li
224.132 139.255 li
224.526 139.106 li
224.919 138.358 li
225.313 137.507 li
225.707 137.736 li
226.1 137.516 li
226.494 135.399 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPL+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763EAD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD01048EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666BB48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB234077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC899D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044DD841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB9777EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-/h <1C60D8A8C9B7EF32570F064E709B8926574C03377BA220AE0888CBE55DD78AB956CD4302BB789AA6D333FFAC07825CB3A243F22D03D26FA5A13E87B236A12658D027FD878D62E9E0B2786BB555DABBC7F8CB> |-/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5AE45> |-/m <1C60D8A8C9B6B41CC78139463B68644DCA5BB8E2028C7CA1E86B33F066639DA3F35B7DDFE45432E7A2C574E1841C4747E57802803B51CE345923194466C5EF852CDD93A3C40922D4091C6271210E8853C875458B992514FC458C505AB921A870117BEFC5032EC52C5C0B4ED8E033C8825C6A79E135F4917A84EDE1A42949055FF22F7EA5E707733E7E37910C34363FBCB83155DB7DD17CDFF4D96A4E9E85EF09E79030FA> |-/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E6778ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA915C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F935483A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D24470C9B580A1092E3692A4C20563FB5> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPL+NimbusSanL-Regu /Encoding getdup 56 /eight putdup 67 /C putdup 104 /h putdup 108 /l putdup 109 /m putdup 110 /n putdup 115 /s putdup 118 /v putpop%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 2{/.notdef}rp /eight 10{/.notdef}rp /C 15{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m /n /.notdef /p 2{/.notdef}rp /s 2{/.notdef}rp /v 137{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf128.874 232.119 mo(500ms)[5.5294 5.52939 5.52939 8.28923 0 ]xshPBVMPL+NimbusSanL-Regu*1 [0 -9.963 -9.963 0 0 0 ]msf123.197 221.1 mo(8mv)[-5.52939 -8.28923 0 ]ysh17.8888 183.027 mo(Channels)[-7.18326 -5.52939 -5.52939 -5.52939 -5.5294 -5.52939 -2.20175 0 ]yshtrue set_gvm
%ADOBeginSubsetFont: TZBBAA+NimbusSanL-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPM+NimbusSanL-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B6079F1E2103EDDC87A248A71D1E8C449C6A83B61B5DADF70A37274F2F54AF40BE63A4237A961E0D99E85ACEE00BF17E2C8EFC428A7A2AA341B09104EFBB1A9F8DC1B5920C54C43B0315EDC679D9BD2F81915C535136DEAB827D2DDC070FACD7B285913C3699E414A221C5E340E9298E91556161B2512E7EBA48C1973D8910B0339A0BD02FE5099A33213C71E678A5735ED92D2695E4FFDF64BC722F39F21C8DF899DD114C83B8369158> |-/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D81C0850CB4C47B2D1F7BBABC42B7D9A> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPM+NimbusSanL-Bold /Encoding getdup 66 /B putdup 67 /C putpop%ADOEndSubsetFont
reset_gvm
/PBVMPM+NimbusSanL-Bold*1 [65{/.notdef}rp /A /B /C 188{/.notdef}rp]PBVMPM+NimbusSanL-Bold nfPBVMPM+NimbusSanL-Bold*1 [11.955 0 0 -11.955 0 0 ]msf10.7853 122.557 mo(B)sh10.7853 229.891 mo(C)sh30.467 336.8 mo
226.494 336.8 li
226.494 247.8 li
30.467 247.8 li
cp
1 gry
f
30.467 336.8 mo
226.494 336.8 li
226.494 247.8 li
30.467 247.8 li
cp
0 gry
@
gsave
30.467 336.8 mo
226.494 336.8 li
226.494 247.8 li
30.467 247.8 li
cp
clp
30.6373 256.933 mo
60.1423 261.621 li
77.4013 259.254 li
89.6473 260.793 li
99.1453 265.001 li
106.906 265.54 li
113.468 266.871 li
119.152 269.623 li
124.166 270.973 li
128.65 269.258 li
132.708 273.338 li
136.411 274.87 li
139.818 276.139 li
142.973 280.064 li
145.91 277.199 li
148.657 280.023 li
151.238 280.522 li
153.671 283.034 li
155.972 287.874 li
158.155 282.69 li
160.232 287.61 li
162.213 288.93 li
164.105 286.681 li
165.916 288.917 li
167.654 289.683 li
169.323 292.112 li
170.93 290.644 li
172.478 292.235 li
173.972 293.807 li
175.415 294.71 li
176.811 295.005 li
178.162 295.864 li
179.472 297.806 li
180.743 296.87 li
181.976 296.85 li
183.176 296.286 li
184.342 297.464 li
185.477 300.438 li
186.583 299.998 li
187.66 300.521 li
188.712 298.805 li
189.737 302.726 li
190.739 301.639 li
191.718 302.763 li
192.674 301.079 li
193.61 302.466 li
194.525 304.355 li
195.421 303.259 li
196.299 303.587 li
197.159 305.279 li
198.002 303.416 li
198.828 306.093 li
199.639 305.767 li
200.435 306.963 li
201.216 306.595 li
201.983 307.367 li
202.736 306.245 li
203.477 312.006 li
204.204 308.693 li
204.92 310.406 li
205.623 308.616 li
206.316 309.184 li
206.997 310.63 li
207.667 309.81 li
208.327 310.652 li
208.977 310.538 li
209.617 313.517 li
210.248 312.035 li
210.869 310.408 li
211.481 312.361 li
212.085 312.389 li
212.681 311.556 li
213.268 312.997 li
213.847 310.529 li
214.418 313.571 li
214.982 314.261 li
215.539 314.005 li
216.088 311.889 li
216.63 313.732 li
217.165 317.247 li
217.694 315.357 li
218.217 315.973 li
218.733 315.59 li
219.242 314 li
219.746 315.378 li
220.244 314.749 li
220.736 314.713 li
221.223 316.134 li
221.704 316.615 li
222.179 316.424 li
222.649 316.016 li
223.115 316.527 li
223.575 316.482 li
224.03 317.039 li
224.481 318.135 li
224.926 317.23 li
225.367 318.532 li
225.804 317.736 li
226.236 320.062 li
226.664 320.969 li
227.088 318.29 li
227.507 319.595 li
227.922 317.583 li
228.333 318.248 li
228.741 319.67 li
229.144 320.706 li
229.544 321.21 li
229.94 319.586 li
230.332 320.181 li
230.721 319.399 li
231.106 317.182 li
231.488 319.436 li
231.866 317.734 li
232.241 322.97 li
232.613 320.564 li
232.982 321.827 li
233.347 320.239 li
233.709 319.088 li
234.069 319.9 li
234.425 320.725 li
234.778 319.377 li
235.128 323.117 li
235.476 324.778 li
235.821 319.371 li
236.162 321.674 li
236.502 320.748 li
236.838 323.866 li
237.172 322.512 li
237.503 323.05 li
237.832 322.713 li
238.158 321.925 li
238.482 319.583 li
238.803 320.521 li
239.122 322.844 li
239.438 321.673 li
239.753 321.347 li
240.064 322.597 li
240.374 322.789 li
240.681 322.971 li
240.986 323.689 li
241.289 320.662 li
241.59 324.829 li
241.889 320.68 li
242.186 321.575 li
242.48 323.249 li
242.773 323.701 li
243.063 321.657 li
243.352 323.727 li
243.639 324.376 li
243.923 320.79 li
244.206 324.761 li
244.487 323.571 li
244.766 325.639 li
245.044 325.33 li
245.319 323.604 li
245.593 324.935 li
245.865 324.05 li
246.135 324.168 li
246.404 324.418 li
246.67 325.227 li
246.936 324.248 li
247.199 323.548 li
247.461 322.69 li
247.722 323.13 li
247.98 324.196 li
248.238 323.847 li
248.493 323.505 li
248.747 324.538 li
249 323.833 li
249.251 324.116 li
249.501 326.029 li
249.749 325.22 li
249.996 323.735 li
250.241 323.623 li
250.485 326.423 li
250.728 325.902 li
250.969 323.8 li
251.209 325.577 li
251.447 325.525 li
251.684 325.733 li
251.92 324.265 li
252.154 325.525 li
252.388 325.739 li
252.62 325.145 li
252.85 322.319 li
253.08 325.137 li
253.308 326.625 li
253.535 325.767 li
253.761 323.843 li
253.986 325.218 li
254.209 323.834 li
254.431 325.044 li
254.652 323.575 li
254.872 324.685 li
255.091 324.519 li
255.309 324.134 li
255.526 327.91 li
255.741 326.644 li
255.956 324.048 li
256.169 324.912 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf24.374 347.728 mo(10)[4.42329 0 ]xshPBVMPL+NimbusSanL-Regu*1 [5.978 0 0 -5.978 0 0 ]msf33.237 344.915 mo(0)shgsave
127.48 337.3 mo
128.48 337.3 li
128.48 332.3 li
127.48 332.3 li
cp
clp
127.98 336.8 mo
127.98 332.8 li
@
grestore
gsave
127.48 252.3 mo
128.48 252.3 li
128.48 247.3 li
127.48 247.3 li
cp
clp
127.98 251.8 mo
127.98 247.8 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf122.387 347.728 mo(10)[4.42329 0 ]xshPBVMPL+NimbusSanL-Regu*1 [5.978 0 0 -5.978 0 0 ]msf131.25 344.915 mo(1)shPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf220.401 347.728 mo(10)[4.42329 0 ]xshPBVMPL+NimbusSanL-Regu*1 [5.978 0 0 -5.978 0 0 ]msf229.264 344.915 mo(2)shgsave
58.9717 337.3 mo
59.9717 337.3 li
59.9717 334.3 li
58.9717 334.3 li
cp
clp
59.4717 336.8 mo
59.4717 334.8 li
@
grestore
gsave
58.9717 250.3 mo
59.9717 250.3 li
59.9717 247.3 li
58.9717 247.3 li
cp
clp
59.4717 249.8 mo
59.4717 247.8 li
@
grestore
gsave
76.231 337.3 mo
77.231 337.3 li
77.231 334.3 li
76.231 334.3 li
cp
clp
76.731 336.8 mo
76.731 334.8 li
@
grestore
gsave
76.231 250.3 mo
77.231 250.3 li
77.231 247.3 li
76.231 247.3 li
cp
clp
76.731 249.8 mo
76.731 247.8 li
@
grestore
gsave
88.4767 337.3 mo
89.4767 337.3 li
89.4767 334.3 li
88.4767 334.3 li
cp
clp
88.9767 336.8 mo
88.9767 334.8 li
@
grestore
gsave
88.4767 250.3 mo
89.4767 250.3 li
89.4767 247.3 li
88.4767 247.3 li
cp
clp
88.9767 249.8 mo
88.9767 247.8 li
@
grestore
gsave
97.9752 337.3 mo
98.9752 337.3 li
98.9752 334.3 li
97.9752 334.3 li
cp
clp
98.4752 336.8 mo
98.4752 334.8 li
@
grestore
gsave
97.9752 250.3 mo
98.9752 250.3 li
98.9752 247.3 li
97.9752 247.3 li
cp
clp
98.4752 249.8 mo
98.4752 247.8 li
@
grestore
gsave
105.736 337.3 mo
106.736 337.3 li
106.736 334.3 li
105.736 334.3 li
cp
clp
106.236 336.8 mo
106.236 334.8 li
@
grestore
gsave
105.736 250.3 mo
106.736 250.3 li
106.736 247.3 li
105.736 247.3 li
cp
clp
106.236 249.8 mo
106.236 247.8 li
@
grestore
gsave
112.298 337.3 mo
113.298 337.3 li
113.298 334.3 li
112.298 334.3 li
cp
clp
112.798 336.8 mo
112.798 334.8 li
@
grestore
gsave
112.298 250.3 mo
113.298 250.3 li
113.298 247.3 li
112.298 247.3 li
cp
clp
112.798 249.8 mo
112.798 247.8 li
@
grestore
gsave
117.982 337.3 mo
118.982 337.3 li
118.982 334.3 li
117.982 334.3 li
cp
clp
118.482 336.8 mo
118.482 334.8 li
@
grestore
gsave
117.982 250.3 mo
118.982 250.3 li
118.982 247.3 li
117.982 247.3 li
cp
clp
118.482 249.8 mo
118.482 247.8 li
@
grestore
gsave
122.995 337.3 mo
123.995 337.3 li
123.995 334.3 li
122.995 334.3 li
cp
clp
123.495 336.8 mo
123.495 334.8 li
@
grestore
gsave
122.995 250.3 mo
123.995 250.3 li
123.995 247.3 li
122.995 247.3 li
cp
clp
123.495 249.8 mo
123.495 247.8 li
@
grestore
gsave
156.985 337.3 mo
157.985 337.3 li
157.985 334.3 li
156.985 334.3 li
cp
clp
157.485 336.8 mo
157.485 334.8 li
@
grestore
gsave
156.985 250.3 mo
157.985 250.3 li
157.985 247.3 li
156.985 247.3 li
cp
clp
157.485 249.8 mo
157.485 247.8 li
@
grestore
gsave
174.245 337.3 mo
175.245 337.3 li
175.245 334.3 li
174.245 334.3 li
cp
clp
174.745 336.8 mo
174.745 334.8 li
@
grestore
gsave
174.245 250.3 mo
175.245 250.3 li
175.245 247.3 li
174.245 247.3 li
cp
clp
174.745 249.8 mo
174.745 247.8 li
@
grestore
gsave
186.49 337.3 mo
187.49 337.3 li
187.49 334.3 li
186.49 334.3 li
cp
clp
186.99 336.8 mo
186.99 334.8 li
@
grestore
gsave
186.49 250.3 mo
187.49 250.3 li
187.49 247.3 li
186.49 247.3 li
cp
clp
186.99 249.8 mo
186.99 247.8 li
@
grestore
gsave
195.989 337.3 mo
196.989 337.3 li
196.989 334.3 li
195.989 334.3 li
cp
clp
196.489 336.8 mo
196.489 334.8 li
@
grestore
gsave
195.989 250.3 mo
196.989 250.3 li
196.989 247.3 li
195.989 247.3 li
cp
clp
196.489 249.8 mo
196.489 247.8 li
@
grestore
gsave
203.75 337.3 mo
204.75 337.3 li
204.75 334.3 li
203.75 334.3 li
cp
clp
204.25 336.8 mo
204.25 334.8 li
@
grestore
gsave
203.75 250.3 mo
204.75 250.3 li
204.75 247.3 li
203.75 247.3 li
cp
clp
204.25 249.8 mo
204.25 247.8 li
@
grestore
gsave
210.311 337.3 mo
211.311 337.3 li
211.311 334.3 li
210.311 334.3 li
cp
clp
210.811 336.8 mo
210.811 334.8 li
@
grestore
gsave
210.311 250.3 mo
211.311 250.3 li
211.311 247.3 li
210.311 247.3 li
cp
clp
210.811 249.8 mo
210.811 247.8 li
@
grestore
gsave
215.995 337.3 mo
216.995 337.3 li
216.995 334.3 li
215.995 334.3 li
cp
clp
216.495 336.8 mo
216.495 334.8 li
@
grestore
gsave
215.995 250.3 mo
216.995 250.3 li
216.995 247.3 li
215.995 247.3 li
cp
clp
216.495 249.8 mo
216.495 247.8 li
@
grestore
gsave
221.009 337.3 mo
222.009 337.3 li
222.009 334.3 li
221.009 334.3 li
cp
clp
221.509 336.8 mo
221.509 334.8 li
@
grestore
gsave
221.009 250.3 mo
222.009 250.3 li
222.009 247.3 li
221.009 247.3 li
cp
clp
221.509 249.8 mo
221.509 247.8 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPL+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C34BC1722FEFB37BB58C35B527AE6A09491FA40D7E8E5CDDF40B1FA04CF4C0C7382C2F861C47E3D9F31951A352479B61220DAE3010153555D> |-/parenright <1C60D8A8C9B81F2C34BC1722DDC8F1B2A5255D3125BF196E18CC504ED91C8305BA71730C40B22B521DE97A022B4A559586A56D21ED89F0FFA70036F1C6B28C3F> |-/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF81C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-/H <1C60D8A8C9B6079F1E4952376D4581366636A6F2021940B707EDEA571DC6ABE0FB549193DC07876B02876B570C4E8DB38E1ED598341CFB3C83BAC587F34EA3C7CDE14BFD64909CFC7BE7164548353E044D4BCB4820652C4DB9ECD632E5D535A1AB8C7BE1E194> |-/q <1C60D8A8C9B7EF3227B21D31137DC869EC372F1404BC9C5AF63706710859C8F92E6F95E847C6064F137B1A6730E5CE79B1838AB9030BEF326DF164D1588E7A91DCDBC52A3B247D6FF2F961B068F8F8F0E4C639950FD27A704EC759444B59E7A48FD4789E9B1C> |-/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E22FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D2161CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361A4431D76AF6F> |-/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AADD14AD49EE> |-/y <1C60D8A8C9B7A73DB5828E2DB40A4006345BB6B47E4ECD963FC869C2369986F6D079AC4A862814B9396DB438A1862183CED867E3C44BB9307A0DC4ECC06CFABB472C23DE9B2490AEC3A42E4087C795FBC47D05CCB5> |-/z <1C60D8A8C9B7A73DC507CAD0E5DFE643D31A4E6B11FABD4208D5037743204B31FEF10DBD97DC6225A0AD01031FB41D73CCE7> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPL+NimbusSanL-Regu /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 70 /F putdup 72 /H putdup 113 /q putdup 114 /r putdup 117 /u putdup 121 /y putdup 122 /z putpop%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 2{/.notdef}rp /eight 10{/.notdef}rp /C 2{/.notdef}rp /F /.notdef /H 10{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m /n /.notdef /p /q /r /s /.notdef /u /v 2{/.notdef}rp /y /z 133{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf94.383 358.032 mo(Frequency\(Hz\))[5.6291 3.30772 5.5294 5.52939 5.5294 5.52939 5.5294 4.98149 7.75121 3.30774 7.18324 4.98151 0 ]xshPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf17.604 339.495 mo(15)[4.42329 0 ]xshgsave
29.9667 321.967 mo
34.9667 321.967 li
34.9667 320.967 li
29.9667 320.967 li
cp
clp
30.4667 321.467 mo
34.4667 321.467 li
@
grestore
gsave
221.994 321.967 mo
226.994 321.967 li
226.994 320.967 li
221.994 320.967 li
cp
clp
222.494 321.467 mo
226.494 321.467 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf17.604 324.663 mo(20)[4.42329 0 ]xshgsave
29.9667 307.133 mo
34.9667 307.133 li
34.9667 306.133 li
29.9667 306.133 li
cp
clp
30.4667 306.633 mo
34.4667 306.633 li
@
grestore
gsave
221.994 307.133 mo
226.994 307.133 li
226.994 306.133 li
221.994 306.133 li
cp
clp
222.494 306.633 mo
226.494 306.633 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf17.604 309.829 mo(25)[4.42329 0 ]xshgsave
29.9667 292.3 mo
34.9667 292.3 li
34.9667 291.3 li
29.9667 291.3 li
cp
clp
30.4667 291.8 mo
34.4667 291.8 li
@
grestore
gsave
221.994 292.3 mo
226.994 292.3 li
226.994 291.3 li
221.994 291.3 li
cp
clp
222.494 291.8 mo
226.494 291.8 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPL+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE719F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E58976995550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFFC73DA426D2C4> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPL+NimbusSanL-Regu /Encoding getdup 51 /three putpop%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 2{/.notdef}rp /eight 10{/.notdef}rp /C 2{/.notdef}rp /F /.notdef /H 10{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m /n /.notdef /p /q /r /s /.notdef /u /v 2{/.notdef}rp /y /z 133{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf17.604 294.996 mo(30)[4.42329 0 ]xshgsave
29.9667 277.467 mo
34.9667 277.467 li
34.9667 276.467 li
29.9667 276.467 li
cp
clp
30.4667 276.967 mo
34.4667 276.967 li
@
grestore
gsave
221.994 277.467 mo
226.994 277.467 li
226.994 276.467 li
221.994 276.467 li
cp
clp
222.494 276.967 mo
226.494 276.967 li
@
grestore
PBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf17.604 280.163 mo(35)[4.42329 0 ]xshgsave
29.9667 262.633 mo
34.9667 262.633 li
34.9667 261.633 li
29.9667 261.633 li
cp
clp
30.4667 262.133 mo
34.4667 262.133 li
@
grestore
gsave
221.994 262.633 mo
226.994 262.633 li
226.994 261.633 li
221.994 261.633 li
cp
clp
222.494 262.133 mo
226.494 262.133 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: AYGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPL+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236CDDF5F1B13> |-/B <1C60D8A8C9B64EDF8862D7741422B35DDD963797F577F66A64697F7272AAE0B6264ACD14181E5F10E4FB0514D6221FE5FAC758C7522BB31C58F1CFA62FEAB298AC88BCB0ABBC0C7AE7457D34C5849B2B2A97077BAE7F25A07EADAC5FC12790407A6AF84D856082C55B9BBC3CB54627BBA20011301E4CCA064CABD12DD2C3703CD52014EEA9DC5B2F2392CED1F890926BDF04A6C3F612BEA9E943B7AD0869A984C8976A9B268EFF958A411E3CC5326CE6ACCEB18F2EB1B99D9198AD1603C5F4DAD6E642E2D4BA50B6D9D677AF975761BF5F50BDC379E2C127D9> |-/P <1C60D8A8C9B64EDF88209F7A97EBCA021BD485E107F2B7F48F28A615216ABC23146CC805D621E6F303BD17890284CBC7F6C7066E0A59D376428DF23A5E8B4FE40F7ADC431E558DFFC35223DE8FA0FB4FCFFB4B5195> |-/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F882286BFB8558FFDC99835F6318B6ABFB469C2D564BB0F5E9BE77FB785FF0A01ACB21DC4B97A4A57F1F7492892F8DC448ACB9AF11A554513DBE4F7C862B67B87DD442F1A03C816B99> |-/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B92B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-/w <1C60D8A8C9B6079F1E495238D734F67FB5E2A2BA6F1F073975099C28237272C5E468B93051F423D5D62417FF2745759EEEF7FD240DC4B0B2C13B5678A844> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPL+NimbusSanL-Regu /Encoding getdup 52 /four putdup 66 /B putdup 80 /P putdup 100 /d putdup 111 /o putdup 119 /w putpop%ADOEndSubsetFont
reset_gvm
/PBVMPL+NimbusSanL-Regu*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five 2{/.notdef}rp /eight 9{/.notdef}rp /B /C 2{/.notdef}rp /F /.notdef /H 7{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m /n /o /p /q /r /s /.notdef /u /v /w /.notdef /y /z 133{/.notdef}rp]PBVMPL+NimbusSanL-Regu nfPBVMPL+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf17.604 265.329 mo(40)[4.42329 0 ]xsh17.604 250.496 mo(45)[4.42329 0 ]xshPBVMPL+NimbusSanL-Regu*1 [0 -9.963 -9.963 0 0 0 ]msf10.4821 316.838 mo(Power\(dB\))[-6.13721 -5.37994 -7.18326 -5.52939 -5.97781 -3.30771 -5.52939 -6.63538 0 ]ysh30.4667 336.8 mo
226.494 336.8 li
226.494 247.8 li
30.4667 247.8 li
30.4667 336.8 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/PBVMPM+NimbusSanL-Bold*1 uf/PBVMPM+NimbusSanL-Bold uf/TZBBAA+NimbusSanL-Bold uf/PBVMPL+NimbusSanL-Regu*1 uf/PBVMPL+NimbusSanL-Regu uf/AYGAAA+NimbusSanL-Regu uf/PBVMPN+CMSY8*1 uf/PBVMPN+CMSY8 uf/FWBQMX+CMSY8 ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
