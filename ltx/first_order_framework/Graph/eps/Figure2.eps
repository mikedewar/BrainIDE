%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: FieldDecomposition.pdf
%%Creator: Adobe Acrobat 8.0
%%For: andrew
%%CreationDate: 1/7/10, 14:40:36
%%BoundingBox: 0 0 236 134
%%HiResBoundingBox: 0 0 236 134
%%CropBox: 0 0 236 134
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 2266 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xap:CreateDate="2010-06-30T14:21:43+01:00"
   xap:CreatorTool="matplotlib 0.91.2, http://matplotlib.sf.net"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -134 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 134 li
236 134 li
236 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2 132 mo
233.437 132 li
233.437 2.39999 li
2 2.39999 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
1 gry
f
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
2 132 mo
233.437 132 li
233.437 2.39999 li
2 2.39999 li
cp
@
31.8553 106.08 mo
228.808 106.08 li
228.808 4.992 li
31.8553 4.992 li
cp
f
31.8553 106.08 mo
228.808 106.08 li
228.808 4.992 li
31.8553 4.992 li
cp
0 gry
@
gsave
31.8553 106.08 mo
228.808 106.08 li
228.808 4.992 li
31.8553 4.992 li
cp
clp
31.8553 53.1815 mo
32.2824 53.2491 li
32.6677 53.4454 li
32.9734 53.7511 li
33.1697 54.1364 li
33.2373 54.5634 li
33.1697 54.9905 li
32.9734 55.3757 li
32.6677 55.6815 li
32.2824 55.8778 li
31.8553 55.9454 li
31.4283 55.8778 li
31.043 55.6815 li
30.7373 55.3757 li
30.541 54.9905 li
30.4734 54.5634 li
30.541 54.1364 li
30.7373 53.7511 li
31.043 53.4454 li
31.4283 53.2491 li
cp
f
0 lc
31.8553 53.1815 mo
32.2824 53.2491 li
32.6677 53.4454 li
32.9734 53.7511 li
33.1697 54.1364 li
33.2373 54.5634 li
33.1697 54.9905 li
32.9734 55.3757 li
32.6677 55.6815 li
32.2824 55.8778 li
31.8553 55.9454 li
31.4283 55.8778 li
31.043 55.6815 li
30.7373 55.3757 li
30.541 54.9905 li
30.4734 54.5634 li
30.541 54.1364 li
30.7373 53.7511 li
31.043 53.4454 li
31.4283 53.2491 li
cp
@
56.4744 22.6193 mo
56.9015 22.6869 li
57.2867 22.8832 li
57.5925 23.189 li
57.7888 23.5742 li
57.8564 24.0013 li
57.7888 24.4283 li
57.5925 24.8136 li
57.2867 25.1193 li
56.9015 25.3156 li
56.4744 25.3832 li
56.0474 25.3156 li
55.6621 25.1193 li
55.3564 24.8136 li
55.1601 24.4283 li
55.0925 24.0013 li
55.1601 23.5742 li
55.3564 23.189 li
55.6621 22.8832 li
56.0474 22.6869 li
cp
f
56.4744 22.6193 mo
56.9015 22.6869 li
57.2867 22.8832 li
57.5925 23.189 li
57.7888 23.5742 li
57.8564 24.0013 li
57.7888 24.4283 li
57.5925 24.8136 li
57.2867 25.1193 li
56.9015 25.3156 li
56.4744 25.3832 li
56.0474 25.3156 li
55.6621 25.1193 li
55.3564 24.8136 li
55.1601 24.4283 li
55.0925 24.0013 li
55.1601 23.5742 li
55.3564 23.189 li
55.6621 22.8832 li
56.0474 22.6869 li
cp
@
81.0935 54.2467 mo
81.5206 54.3144 li
81.9058 54.5107 li
82.2116 54.8164 li
82.4079 55.2017 li
82.4755 55.6287 li
82.4079 56.0558 li
82.2116 56.441 li
81.9058 56.7468 li
81.5206 56.9431 li
81.0935 57.0107 li
80.6665 56.9431 li
80.2812 56.7468 li
79.9755 56.441 li
79.7792 56.0558 li
79.7115 55.6287 li
79.7792 55.2017 li
79.9755 54.8164 li
80.2812 54.5107 li
80.6665 54.3144 li
cp
f
81.0935 54.2467 mo
81.5206 54.3144 li
81.9058 54.5107 li
82.2116 54.8164 li
82.4079 55.2017 li
82.4755 55.6287 li
82.4079 56.0558 li
82.2116 56.441 li
81.9058 56.7468 li
81.5206 56.9431 li
81.0935 57.0107 li
80.6665 56.9431 li
80.2812 56.7468 li
79.9755 56.441 li
79.7792 56.0558 li
79.7115 55.6287 li
79.7792 55.2017 li
79.9755 54.8164 li
80.2812 54.5107 li
80.6665 54.3144 li
cp
@
105.713 96.3894 mo
106.14 96.457 li
106.525 96.6533 li
106.831 96.9591 li
107.027 97.3443 li
107.095 97.7714 li
107.027 98.1984 li
106.831 98.5837 li
106.525 98.8894 li
106.14 99.0857 li
105.713 99.1533 li
105.286 99.0857 li
104.9 98.8894 li
104.595 98.5837 li
104.398 98.1984 li
104.331 97.7714 li
104.398 97.3443 li
104.595 96.9591 li
104.9 96.6533 li
105.286 96.457 li
cp
f
105.713 96.3894 mo
106.14 96.457 li
106.525 96.6533 li
106.831 96.9591 li
107.027 97.3443 li
107.095 97.7714 li
107.027 98.1984 li
106.831 98.5837 li
106.525 98.8894 li
106.14 99.0857 li
105.713 99.1533 li
105.286 99.0857 li
104.9 98.8894 li
104.595 98.5837 li
104.398 98.1984 li
104.331 97.7714 li
104.398 97.3443 li
104.595 96.9591 li
104.9 96.6533 li
105.286 96.457 li
cp
@
130.332 44.0452 mo
130.759 44.1129 li
131.144 44.3092 li
131.45 44.6149 li
131.646 45.0001 li
131.714 45.4272 li
131.646 45.8543 li
131.45 46.2395 li
131.144 46.5452 li
130.759 46.7415 li
130.332 46.8092 li
129.905 46.7415 li
129.519 46.5452 li
129.214 46.2395 li
129.017 45.8543 li
128.95 45.4272 li
129.017 45.0001 li
129.214 44.6149 li
129.519 44.3092 li
129.905 44.1129 li
cp
f
130.332 44.0452 mo
130.759 44.1129 li
131.144 44.3092 li
131.45 44.6149 li
131.646 45.0001 li
131.714 45.4272 li
131.646 45.8543 li
131.45 46.2395 li
131.144 46.5452 li
130.759 46.7415 li
130.332 46.8092 li
129.905 46.7415 li
129.519 46.5452 li
129.214 46.2395 li
129.017 45.8543 li
128.95 45.4272 li
129.017 45.0001 li
129.214 44.6149 li
129.519 44.3092 li
129.905 44.1129 li
cp
@
154.951 71.2216 mo
155.378 71.2892 li
155.763 71.4855 li
156.069 71.7913 li
156.265 72.1765 li
156.333 72.6036 li
156.265 73.0306 li
156.069 73.4159 li
155.763 73.7216 li
155.378 73.9179 li
154.951 73.9856 li
154.524 73.9179 li
154.138 73.7216 li
153.833 73.4159 li
153.636 73.0306 li
153.569 72.6036 li
153.636 72.1765 li
153.833 71.7913 li
154.138 71.4855 li
154.524 71.2892 li
cp
f
154.951 71.2216 mo
155.378 71.2892 li
155.763 71.4855 li
156.069 71.7913 li
156.265 72.1765 li
156.333 72.6036 li
156.265 73.0306 li
156.069 73.4159 li
155.763 73.7216 li
155.378 73.9179 li
154.951 73.9856 li
154.524 73.9179 li
154.138 73.7216 li
153.833 73.4159 li
153.636 73.0306 li
153.569 72.6036 li
153.636 72.1765 li
153.833 71.7913 li
154.138 71.4855 li
154.524 71.2892 li
cp
@
179.57 63.8584 mo
179.997 63.926 li
180.382 64.1223 li
180.688 64.428 li
180.884 64.8133 li
180.952 65.2403 li
180.884 65.6674 li
180.688 66.0527 li
180.382 66.3584 li
179.997 66.5547 li
179.57 66.6223 li
179.143 66.5547 li
178.758 66.3584 li
178.452 66.0527 li
178.256 65.6674 li
178.188 65.2403 li
178.256 64.8133 li
178.452 64.428 li
178.758 64.1223 li
179.143 63.926 li
cp
f
179.57 63.8584 mo
179.997 63.926 li
180.382 64.1223 li
180.688 64.428 li
180.884 64.8133 li
180.952 65.2403 li
180.884 65.6674 li
180.688 66.0527 li
180.382 66.3584 li
179.997 66.5547 li
179.57 66.6223 li
179.143 66.5547 li
178.758 66.3584 li
178.452 66.0527 li
178.256 65.6674 li
178.188 65.2403 li
178.256 64.8133 li
178.452 64.428 li
178.758 64.1223 li
179.143 63.926 li
cp
@
204.189 34.9265 mo
204.616 34.9942 li
205.001 35.1905 li
205.307 35.4962 li
205.503 35.8814 li
205.571 36.3085 li
205.503 36.7356 li
205.307 37.1208 li
205.001 37.4265 li
204.616 37.6228 li
204.189 37.6905 li
203.762 37.6228 li
203.377 37.4265 li
203.071 37.1208 li
202.875 36.7356 li
202.807 36.3085 li
202.875 35.8814 li
203.071 35.4962 li
203.377 35.1905 li
203.762 34.9942 li
cp
f
204.189 34.9265 mo
204.616 34.9942 li
205.001 35.1905 li
205.307 35.4962 li
205.503 35.8814 li
205.571 36.3085 li
205.503 36.7356 li
205.307 37.1208 li
205.001 37.4265 li
204.616 37.6228 li
204.189 37.6905 li
203.762 37.6228 li
203.377 37.4265 li
203.071 37.1208 li
202.875 36.7356 li
202.807 36.3085 li
202.875 35.8814 li
203.071 35.4962 li
203.377 35.1905 li
203.762 34.9942 li
cp
@
228.808 68.8179 mo
229.235 68.8855 li
229.62 69.0818 li
229.926 69.3875 li
230.122 69.7728 li
230.19 70.1998 li
230.122 70.6269 li
229.926 71.0121 li
229.62 71.3179 li
229.235 71.5142 li
228.808 71.5818 li
228.381 71.5142 li
227.996 71.3179 li
227.69 71.0121 li
227.494 70.6269 li
227.426 70.1998 li
227.494 69.7728 li
227.69 69.3875 li
227.996 69.0818 li
228.381 68.8855 li
cp
f
228.808 68.8179 mo
229.235 68.8855 li
229.62 69.0818 li
229.926 69.3875 li
230.122 69.7728 li
230.19 70.1998 li
230.122 70.6269 li
229.926 71.0121 li
229.62 71.3179 li
229.235 71.5142 li
228.808 71.5818 li
228.381 71.5142 li
227.996 71.3179 li
227.69 71.0121 li
227.494 70.6269 li
227.426 70.1998 li
227.494 69.7728 li
227.69 69.3875 li
227.996 69.0818 li
228.381 68.8855 li
cp
@
0.5 lw
31.8553 77.1977 mo
31.8553 54.5634 li
/1 
[/DeviceRGB] /CSA add_res
0 0 1 rgb
@
56.4744 77.1977 mo
56.4744 24.0013 li
@
81.0935 77.1977 mo
81.0935 55.6287 li
@
105.713 77.1977 mo
105.713 97.7714 li
@
130.332 77.1977 mo
130.332 45.4272 li
@
154.951 77.1977 mo
154.951 72.6036 li
@
179.57 77.1977 mo
179.57 65.2403 li
@
204.189 77.1977 mo
204.189 36.3085 li
@
228.808 77.1977 mo
228.808 70.1998 li
@
1 lw
2 lc
31.8553 54.5634 mo
32.25 54.578 li
32.6447 54.6215 li
33.0394 54.694 li
33.4341 54.795 li
33.8288 54.9241 li
34.2235 55.081 li
34.6182 55.265 li
35.0129 55.4754 li
35.4076 55.7114 li
35.8023 55.9721 li
36.197 56.2566 li
36.5917 56.5638 li
36.9864 56.8926 li
37.3811 57.2419 li
37.7758 57.6103 li
38.1705 57.9966 li
38.5652 58.3995 li
38.9599 58.8175 li
39.3545 59.2494 li
39.7492 59.6936 li
40.1439 60.1487 li
40.5386 60.6133 li
40.9333 61.086 li
41.328 61.5653 li
41.7227 62.0498 li
42.1174 62.5382 li
42.5121 63.029 li
42.9068 63.521 li
43.3015 64.0129 li
43.6962 64.5034 li
44.0909 64.9913 li
44.4856 65.4756 li
44.8803 65.9551 li
45.275 66.4289 li
45.6697 66.8959 li
46.0644 67.3553 li
46.4591 67.8064 li
46.8538 68.2482 li
47.2484 68.6802 li
47.6431 69.1018 li
48.0378 69.5124 li
48.4325 69.9116 li
48.8272 70.2988 li
49.2219 70.6739 li
49.6166 71.0366 li
50.0113 71.3865 li
50.406 71.7236 li
50.8007 72.0478 li
51.1954 72.3589 li
51.5901 72.6572 li
51.9848 72.9425 li
52.3795 73.215 li
52.7742 73.4749 li
53.1689 73.7222 li
53.5636 73.9573 li
53.9583 74.1804 li
54.353 74.3917 li
54.7476 74.5916 li
55.1423 74.7803 li
55.537 74.9583 li
55.9317 75.1258 li
56.3264 75.2833 li
56.7211 75.431 li
57.1158 75.5695 li
57.5105 75.699 li
57.9052 75.82 li
58.2999 75.9328 li
58.6946 76.0379 li
59.0893 76.1357 li
59.484 76.2264 li
59.8787 76.3105 li
60.2734 76.3884 li
60.6681 76.4604 li
61.0628 76.5269 li
61.4575 76.5881 li
61.8522 76.6445 li
62.2468 76.6963 li
62.6415 76.7438 li
63.0362 76.7874 li
63.4309 76.8272 li
63.8256 76.8636 li
64.2203 76.8969 li
64.615 76.9271 li
65.0097 76.9547 li
65.4044 76.9797 li
65.7991 77.0024 li
66.1938 77.0229 li
66.5885 77.0415 li
66.9832 77.0583 li
67.3779 77.0734 li
67.7726 77.0871 li
68.1673 77.0994 li
68.562 77.1104 li
68.9567 77.1203 li
69.3514 77.1291 li
69.746 77.137 li
70.1407 77.1441 li
70.5354 77.1504 li
70.9301 77.1561 li
71.3248 77.1611 li
71.7195 77.1655 li
72.1142 77.1694 li
72.5089 77.1729 li
72.9036 77.176 li
73.2983 77.1787 li
73.693 77.1811 li
74.0877 77.1833 li
74.4824 77.1851 li
74.8771 77.1868 li
75.2718 77.1882 li
75.6665 77.1895 li
76.0612 77.1906 li
76.4559 77.1915 li
76.8506 77.1924 li
77.2453 77.1931 li
77.6399 77.1937 li
78.0346 77.1943 li
78.4293 77.1948 li
78.824 77.1952 li
79.2187 77.1955 li
79.6134 77.1959 li
80.0081 77.1961 li
80.4028 77.1964 li
80.7975 77.1966 li
81.1922 77.1967 li
81.5869 77.1969 li
81.9816 77.197 li
82.3763 77.1971 li
82.771 77.1972 li
83.1657 77.1973 li
83.5604 77.1973 li
83.9551 77.1974 li
84.3498 77.1974 li
84.7445 77.1975 li
85.1391 77.1975 li
85.5338 77.1976 li
85.9285 77.1976 li
86.3232 77.1976 li
86.7179 77.1976 li
87.1126 77.1976 li
87.5073 77.1976 li
87.902 77.1977 li
88.2967 77.1977 li
88.6914 77.1977 li
89.0861 77.1977 li
89.4808 77.1977 li
89.8755 77.1977 li
90.2702 77.1977 li
90.6649 77.1977 li
91.0596 77.1977 li
91.4543 77.1977 li
91.849 77.1977 li
92.2437 77.1977 li
92.6384 77.1977 li
93.033 77.1977 li
93.4277 77.1977 li
93.8224 77.1977 li
94.2171 77.1977 li
94.6118 77.1977 li
95.0065 77.1977 li
95.4012 77.1977 li
95.7959 77.1977 li
96.1906 77.1977 li
96.5853 77.1977 li
96.98 77.1977 li
97.3747 77.1977 li
97.7694 77.1977 li
98.1641 77.1977 li
98.5588 77.1977 li
98.9535 77.1977 li
99.3482 77.1977 li
99.7429 77.1977 li
100.138 77.1977 li
100.532 77.1977 li
100.927 77.1977 li
101.322 77.1977 li
101.716 77.1977 li
102.111 77.1977 li
102.506 77.1977 li
102.9 77.1977 li
103.295 77.1977 li
103.69 77.1977 li
104.085 77.1977 li
104.479 77.1977 li
104.874 77.1977 li
105.269 77.1977 li
105.663 77.1977 li
106.058 77.1977 li
106.453 77.1977 li
106.847 77.1977 li
107.242 77.1977 li
107.637 77.1977 li
108.031 77.1977 li
108.426 77.1977 li
108.821 77.1977 li
109.216 77.1977 li
109.61 77.1977 li
110.005 77.1977 li
110.4 77.1977 li
110.794 77.1977 li
111.189 77.1977 li
111.584 77.1977 li
111.978 77.1977 li
112.373 77.1977 li
112.768 77.1977 li
113.162 77.1977 li
113.557 77.1977 li
113.952 77.1977 li
114.347 77.1977 li
114.741 77.1977 li
115.136 77.1977 li
115.531 77.1977 li
115.925 77.1977 li
116.32 77.1977 li
116.715 77.1977 li
117.109 77.1977 li
117.504 77.1977 li
117.899 77.1977 li
118.294 77.1977 li
118.688 77.1977 li
119.083 77.1977 li
119.478 77.1977 li
119.872 77.1977 li
120.267 77.1977 li
120.662 77.1977 li
121.056 77.1977 li
121.451 77.1977 li
121.846 77.1977 li
122.24 77.1977 li
122.635 77.1977 li
123.03 77.1977 li
123.425 77.1977 li
123.819 77.1977 li
124.214 77.1977 li
124.609 77.1977 li
125.003 77.1977 li
125.398 77.1977 li
125.793 77.1977 li
126.187 77.1977 li
126.582 77.1977 li
126.977 77.1977 li
127.371 77.1977 li
127.766 77.1977 li
128.161 77.1977 li
128.556 77.1977 li
128.95 77.1977 li
129.345 77.1977 li
129.74 77.1977 li
130.134 77.1977 li
130.529 77.1977 li
130.924 77.1977 li
131.318 77.1977 li
131.713 77.1977 li
132.108 77.1977 li
132.503 77.1977 li
132.897 77.1977 li
133.292 77.1977 li
133.687 77.1977 li
134.081 77.1977 li
134.476 77.1977 li
134.871 77.1977 li
135.265 77.1977 li
135.66 77.1977 li
136.055 77.1977 li
136.449 77.1977 li
136.844 77.1977 li
137.239 77.1977 li
137.634 77.1977 li
138.028 77.1977 li
138.423 77.1977 li
138.818 77.1977 li
139.212 77.1977 li
139.607 77.1977 li
140.002 77.1977 li
140.396 77.1977 li
140.791 77.1977 li
141.186 77.1977 li
141.581 77.1977 li
141.975 77.1977 li
142.37 77.1977 li
142.765 77.1977 li
143.159 77.1977 li
143.554 77.1977 li
143.949 77.1977 li
144.343 77.1977 li
144.738 77.1977 li
145.133 77.1977 li
145.527 77.1977 li
145.922 77.1977 li
146.317 77.1977 li
146.712 77.1977 li
147.106 77.1977 li
147.501 77.1977 li
147.896 77.1977 li
148.29 77.1977 li
148.685 77.1977 li
149.08 77.1977 li
149.474 77.1977 li
149.869 77.1977 li
150.264 77.1977 li
150.658 77.1977 li
151.053 77.1977 li
151.448 77.1977 li
151.843 77.1977 li
152.237 77.1977 li
152.632 77.1977 li
153.027 77.1977 li
153.421 77.1977 li
153.816 77.1977 li
154.211 77.1977 li
154.605 77.1977 li
155 77.1977 li
155.395 77.1977 li
155.79 77.1977 li
156.184 77.1977 li
156.579 77.1977 li
156.974 77.1977 li
157.368 77.1977 li
157.763 77.1977 li
158.158 77.1977 li
158.552 77.1977 li
158.947 77.1977 li
159.342 77.1977 li
159.736 77.1977 li
160.131 77.1977 li
160.526 77.1977 li
160.921 77.1977 li
161.315 77.1977 li
161.71 77.1977 li
162.105 77.1977 li
162.499 77.1977 li
162.894 77.1977 li
163.289 77.1977 li
163.683 77.1977 li
164.078 77.1977 li
164.473 77.1977 li
164.868 77.1977 li
165.262 77.1977 li
165.657 77.1977 li
166.052 77.1977 li
166.446 77.1977 li
166.841 77.1977 li
167.236 77.1977 li
167.63 77.1977 li
168.025 77.1977 li
168.42 77.1977 li
168.814 77.1977 li
169.209 77.1977 li
169.604 77.1977 li
169.999 77.1977 li
170.393 77.1977 li
170.788 77.1977 li
171.183 77.1977 li
171.577 77.1977 li
171.972 77.1977 li
172.367 77.1977 li
172.761 77.1977 li
173.156 77.1977 li
173.551 77.1977 li
173.945 77.1977 li
174.34 77.1977 li
174.735 77.1977 li
175.13 77.1977 li
175.524 77.1977 li
175.919 77.1977 li
176.314 77.1977 li
176.708 77.1977 li
177.103 77.1977 li
177.498 77.1977 li
177.892 77.1977 li
178.287 77.1977 li
178.682 77.1977 li
179.077 77.1977 li
179.471 77.1977 li
179.866 77.1977 li
180.261 77.1977 li
180.655 77.1977 li
181.05 77.1977 li
181.445 77.1977 li
181.839 77.1977 li
182.234 77.1977 li
182.629 77.1977 li
183.023 77.1977 li
183.418 77.1977 li
183.813 77.1977 li
184.208 77.1977 li
184.602 77.1977 li
184.997 77.1977 li
185.392 77.1977 li
185.786 77.1977 li
186.181 77.1977 li
186.576 77.1977 li
186.97 77.1977 li
187.365 77.1977 li
187.76 77.1977 li
188.154 77.1977 li
188.549 77.1977 li
188.944 77.1977 li
189.339 77.1977 li
189.733 77.1977 li
190.128 77.1977 li
190.523 77.1977 li
190.917 77.1977 li
191.312 77.1977 li
191.707 77.1977 li
192.101 77.1977 li
192.496 77.1977 li
192.891 77.1977 li
193.286 77.1977 li
193.68 77.1977 li
194.075 77.1977 li
194.47 77.1977 li
194.864 77.1977 li
195.259 77.1977 li
195.654 77.1977 li
196.048 77.1977 li
196.443 77.1977 li
196.838 77.1977 li
197.232 77.1977 li
197.627 77.1977 li
198.022 77.1977 li
198.417 77.1977 li
198.811 77.1977 li
199.206 77.1977 li
199.601 77.1977 li
199.995 77.1977 li
200.39 77.1977 li
200.785 77.1977 li
201.179 77.1977 li
201.574 77.1977 li
201.969 77.1977 li
202.364 77.1977 li
202.758 77.1977 li
203.153 77.1977 li
203.548 77.1977 li
203.942 77.1977 li
204.337 77.1977 li
204.732 77.1977 li
205.126 77.1977 li
205.521 77.1977 li
205.916 77.1977 li
206.31 77.1977 li
206.705 77.1977 li
207.1 77.1977 li
207.495 77.1977 li
207.889 77.1977 li
208.284 77.1977 li
208.679 77.1977 li
209.073 77.1977 li
209.468 77.1977 li
209.863 77.1977 li
210.257 77.1977 li
210.652 77.1977 li
211.047 77.1977 li
211.441 77.1977 li
211.836 77.1977 li
212.231 77.1977 li
212.626 77.1977 li
213.02 77.1977 li
213.415 77.1977 li
213.81 77.1977 li
214.204 77.1977 li
214.599 77.1977 li
214.994 77.1977 li
215.388 77.1977 li
215.783 77.1977 li
216.178 77.1977 li
216.573 77.1977 li
216.967 77.1977 li
217.362 77.1977 li
217.757 77.1977 li
218.151 77.1977 li
218.546 77.1977 li
218.941 77.1977 li
219.335 77.1977 li
219.73 77.1977 li
220.125 77.1977 li
220.519 77.1977 li
220.914 77.1977 li
221.309 77.1977 li
221.704 77.1977 li
222.098 77.1977 li
222.493 77.1977 li
222.888 77.1977 li
223.282 77.1977 li
223.677 77.1977 li
224.072 77.1977 li
224.466 77.1977 li
224.861 77.1977 li
225.256 77.1977 li
225.651 77.1977 li
226.045 77.1977 li
226.44 77.1977 li
226.835 77.1977 li
227.229 77.1977 li
227.624 77.1977 li
228.019 77.1977 li
228.413 77.1977 li
228.808 77.1977 li
0 gry
@
31.8553 72.8311 mo
32.25 72.4697 li
32.6447 72.0849 li
33.0394 71.676 li
33.4341 71.242 li
33.8288 70.7821 li
34.2235 70.2956 li
34.6182 69.7818 li
35.0129 69.2399 li
35.4076 68.6694 li
35.8023 68.0698 li
36.197 67.4405 li
36.5917 66.7813 li
36.9864 66.0918 li
37.3811 65.3718 li
37.7758 64.6214 li
38.1705 63.8405 li
38.5652 63.0293 li
38.9599 62.1882 li
39.3545 61.3176 li
39.7492 60.418 li
40.1439 59.4903 li
40.5386 58.5352 li
40.9333 57.5539 li
41.328 56.5476 li
41.7227 55.5176 li
42.1174 54.4655 li
42.5121 53.3929 li
42.9068 52.3017 li
43.3015 51.1939 li
43.6962 50.0718 li
44.0909 48.9375 li
44.4856 47.7937 li
44.8803 46.6428 li
45.275 45.4876 li
45.6697 44.3311 li
46.0644 43.1761 li
46.4591 42.0258 li
46.8538 40.8833 li
47.2484 39.7518 li
47.6431 38.6346 li
48.0378 37.5351 li
48.4325 36.4567 li
48.8272 35.4027 li
49.2219 34.3765 li
49.6166 33.3814 li
50.0113 32.4208 li
50.406 31.4979 li
50.8007 30.6159 li
51.1954 29.7778 li
51.5901 28.9867 li
51.9848 28.2453 li
52.3795 27.5563 li
52.7742 26.9223 li
53.1689 26.3456 li
53.5636 25.8284 li
53.9583 25.3725 li
54.353 24.9797 li
54.7476 24.6515 li
55.1423 24.3892 li
55.537 24.1937 li
55.9317 24.0659 li
56.3264 24.0061 li
56.7211 24.0146 li
57.1158 24.0915 li
57.5105 24.2363 li
57.9052 24.4486 li
58.2999 24.7274 li
58.6946 25.0719 li
59.0893 25.4806 li
59.484 25.952 li
59.8787 26.4843 li
60.2734 27.0755 li
60.6681 27.7235 li
61.0628 28.4258 li
61.4575 29.1799 li
61.8522 29.983 li
62.2468 30.8324 li
62.6415 31.7249 li
63.0362 32.6575 li
63.4309 33.6271 li
63.8256 34.6302 li
64.2203 35.6637 li
64.615 36.7241 li
65.0097 37.8082 li
65.4044 38.9124 li
65.7991 40.0334 li
66.1938 41.168 li
66.5885 42.3128 li
66.9832 43.4646 li
67.3779 44.6202 li
67.7726 45.7767 li
68.1673 46.931 li
68.562 48.0804 li
68.9567 49.2221 li
69.3514 50.3535 li
69.746 51.4723 li
70.1407 52.5761 li
70.5354 53.6628 li
70.9301 54.7305 li
71.3248 55.7773 li
71.7195 56.8015 li
72.1142 57.8017 li
72.5089 58.7765 li
72.9036 59.7248 li
73.2983 60.6456 li
73.693 61.5379 li
74.0877 62.4013 li
74.4824 63.2349 li
74.8771 64.0385 li
75.2718 64.8118 li
75.6665 65.5546 li
76.0612 66.267 li
76.4559 66.9489 li
76.8506 67.6006 li
77.2453 68.2225 li
77.6399 68.8148 li
78.0346 69.3781 li
78.4293 69.9129 li
78.824 70.4198 li
79.2187 70.8996 li
79.6134 71.3529 li
80.0081 71.7805 li
80.4028 72.1834 li
80.7975 72.5622 li
81.1922 72.9179 li
81.5869 73.2514 li
81.9816 73.5636 li
82.3763 73.8553 li
82.771 74.1276 li
83.1657 74.3814 li
83.5604 74.6175 li
83.9551 74.8368 li
84.3498 75.0402 li
84.7445 75.2287 li
85.1391 75.403 li
85.5338 75.564 li
85.9285 75.7124 li
86.3232 75.8491 li
86.7179 75.9748 li
87.1126 76.0902 li
87.5073 76.196 li
87.902 76.2929 li
88.2967 76.3814 li
88.6914 76.4622 li
89.0861 76.5359 li
89.4808 76.6029 li
89.8755 76.6639 li
90.2702 76.7192 li
90.6649 76.7693 li
91.0596 76.8147 li
91.4543 76.8557 li
91.849 76.8927 li
92.2437 76.9261 li
92.6384 76.9561 li
93.033 76.9831 li
93.4277 77.0073 li
93.8224 77.029 li
94.2171 77.0484 li
94.6118 77.0658 li
95.0065 77.0812 li
95.4012 77.095 li
95.7959 77.1073 li
96.1906 77.1182 li
96.5853 77.1279 li
96.98 77.1365 li
97.3747 77.1441 li
97.7694 77.1508 li
98.1641 77.1567 li
98.5588 77.162 li
98.9535 77.1666 li
99.3482 77.1706 li
99.7429 77.1741 li
100.138 77.1773 li
100.532 77.18 li
100.927 77.1824 li
101.322 77.1844 li
101.716 77.1862 li
102.111 77.1878 li
102.506 77.1892 li
102.9 77.1904 li
103.295 77.1914 li
103.69 77.1923 li
104.085 77.1931 li
104.479 77.1937 li
104.874 77.1943 li
105.269 77.1948 li
105.663 77.1953 li
106.058 77.1956 li
106.453 77.1959 li
106.847 77.1962 li
107.242 77.1964 li
107.637 77.1966 li
108.031 77.1968 li
108.426 77.1969 li
108.821 77.1971 li
109.216 77.1972 li
109.61 77.1973 li
110.005 77.1973 li
110.4 77.1974 li
110.794 77.1974 li
111.189 77.1975 li
111.584 77.1975 li
111.978 77.1975 li
112.373 77.1976 li
112.768 77.1976 li
113.162 77.1976 li
113.557 77.1976 li
113.952 77.1976 li
114.347 77.1977 li
114.741 77.1977 li
115.136 77.1977 li
115.531 77.1977 li
115.925 77.1977 li
116.32 77.1977 li
116.715 77.1977 li
117.109 77.1977 li
117.504 77.1977 li
117.899 77.1977 li
118.294 77.1977 li
118.688 77.1977 li
119.083 77.1977 li
119.478 77.1977 li
119.872 77.1977 li
120.267 77.1977 li
120.662 77.1977 li
121.056 77.1977 li
121.451 77.1977 li
121.846 77.1977 li
122.24 77.1977 li
122.635 77.1977 li
123.03 77.1977 li
123.425 77.1977 li
123.819 77.1977 li
124.214 77.1977 li
124.609 77.1977 li
125.003 77.1977 li
125.398 77.1977 li
125.793 77.1977 li
126.187 77.1977 li
126.582 77.1977 li
126.977 77.1977 li
127.371 77.1977 li
127.766 77.1977 li
128.161 77.1977 li
128.556 77.1977 li
128.95 77.1977 li
129.345 77.1977 li
129.74 77.1977 li
130.134 77.1977 li
130.529 77.1977 li
130.924 77.1977 li
131.318 77.1977 li
131.713 77.1977 li
132.108 77.1977 li
132.503 77.1977 li
132.897 77.1977 li
133.292 77.1977 li
133.687 77.1977 li
134.081 77.1977 li
134.476 77.1977 li
134.871 77.1977 li
135.265 77.1977 li
135.66 77.1977 li
136.055 77.1977 li
136.449 77.1977 li
136.844 77.1977 li
137.239 77.1977 li
137.634 77.1977 li
138.028 77.1977 li
138.423 77.1977 li
138.818 77.1977 li
139.212 77.1977 li
139.607 77.1977 li
140.002 77.1977 li
140.396 77.1977 li
140.791 77.1977 li
141.186 77.1977 li
141.581 77.1977 li
141.975 77.1977 li
142.37 77.1977 li
142.765 77.1977 li
143.159 77.1977 li
143.554 77.1977 li
143.949 77.1977 li
144.343 77.1977 li
144.738 77.1977 li
145.133 77.1977 li
145.527 77.1977 li
145.922 77.1977 li
146.317 77.1977 li
146.712 77.1977 li
147.106 77.1977 li
147.501 77.1977 li
147.896 77.1977 li
148.29 77.1977 li
148.685 77.1977 li
149.08 77.1977 li
149.474 77.1977 li
149.869 77.1977 li
150.264 77.1977 li
150.658 77.1977 li
151.053 77.1977 li
151.448 77.1977 li
151.843 77.1977 li
152.237 77.1977 li
152.632 77.1977 li
153.027 77.1977 li
153.421 77.1977 li
153.816 77.1977 li
154.211 77.1977 li
154.605 77.1977 li
155 77.1977 li
155.395 77.1977 li
155.79 77.1977 li
156.184 77.1977 li
156.579 77.1977 li
156.974 77.1977 li
157.368 77.1977 li
157.763 77.1977 li
158.158 77.1977 li
158.552 77.1977 li
158.947 77.1977 li
159.342 77.1977 li
159.736 77.1977 li
160.131 77.1977 li
160.526 77.1977 li
160.921 77.1977 li
161.315 77.1977 li
161.71 77.1977 li
162.105 77.1977 li
162.499 77.1977 li
162.894 77.1977 li
163.289 77.1977 li
163.683 77.1977 li
164.078 77.1977 li
164.473 77.1977 li
164.868 77.1977 li
165.262 77.1977 li
165.657 77.1977 li
166.052 77.1977 li
166.446 77.1977 li
166.841 77.1977 li
167.236 77.1977 li
167.63 77.1977 li
168.025 77.1977 li
168.42 77.1977 li
168.814 77.1977 li
169.209 77.1977 li
169.604 77.1977 li
169.999 77.1977 li
170.393 77.1977 li
170.788 77.1977 li
171.183 77.1977 li
171.577 77.1977 li
171.972 77.1977 li
172.367 77.1977 li
172.761 77.1977 li
173.156 77.1977 li
173.551 77.1977 li
173.945 77.1977 li
174.34 77.1977 li
174.735 77.1977 li
175.13 77.1977 li
175.524 77.1977 li
175.919 77.1977 li
176.314 77.1977 li
176.708 77.1977 li
177.103 77.1977 li
177.498 77.1977 li
177.892 77.1977 li
178.287 77.1977 li
178.682 77.1977 li
179.077 77.1977 li
179.471 77.1977 li
179.866 77.1977 li
180.261 77.1977 li
180.655 77.1977 li
181.05 77.1977 li
181.445 77.1977 li
181.839 77.1977 li
182.234 77.1977 li
182.629 77.1977 li
183.023 77.1977 li
183.418 77.1977 li
183.813 77.1977 li
184.208 77.1977 li
184.602 77.1977 li
184.997 77.1977 li
185.392 77.1977 li
185.786 77.1977 li
186.181 77.1977 li
186.576 77.1977 li
186.97 77.1977 li
187.365 77.1977 li
187.76 77.1977 li
188.154 77.1977 li
188.549 77.1977 li
188.944 77.1977 li
189.339 77.1977 li
189.733 77.1977 li
190.128 77.1977 li
190.523 77.1977 li
190.917 77.1977 li
191.312 77.1977 li
191.707 77.1977 li
192.101 77.1977 li
192.496 77.1977 li
192.891 77.1977 li
193.286 77.1977 li
193.68 77.1977 li
194.075 77.1977 li
194.47 77.1977 li
194.864 77.1977 li
195.259 77.1977 li
195.654 77.1977 li
196.048 77.1977 li
196.443 77.1977 li
196.838 77.1977 li
197.232 77.1977 li
197.627 77.1977 li
198.022 77.1977 li
198.417 77.1977 li
198.811 77.1977 li
199.206 77.1977 li
199.601 77.1977 li
199.995 77.1977 li
200.39 77.1977 li
200.785 77.1977 li
201.179 77.1977 li
201.574 77.1977 li
201.969 77.1977 li
202.364 77.1977 li
202.758 77.1977 li
203.153 77.1977 li
203.548 77.1977 li
203.942 77.1977 li
204.337 77.1977 li
204.732 77.1977 li
205.126 77.1977 li
205.521 77.1977 li
205.916 77.1977 li
206.31 77.1977 li
206.705 77.1977 li
207.1 77.1977 li
207.495 77.1977 li
207.889 77.1977 li
208.284 77.1977 li
208.679 77.1977 li
209.073 77.1977 li
209.468 77.1977 li
209.863 77.1977 li
210.257 77.1977 li
210.652 77.1977 li
211.047 77.1977 li
211.441 77.1977 li
211.836 77.1977 li
212.231 77.1977 li
212.626 77.1977 li
213.02 77.1977 li
213.415 77.1977 li
213.81 77.1977 li
214.204 77.1977 li
214.599 77.1977 li
214.994 77.1977 li
215.388 77.1977 li
215.783 77.1977 li
216.178 77.1977 li
216.573 77.1977 li
216.967 77.1977 li
217.362 77.1977 li
217.757 77.1977 li
218.151 77.1977 li
218.546 77.1977 li
218.941 77.1977 li
219.335 77.1977 li
219.73 77.1977 li
220.125 77.1977 li
220.519 77.1977 li
220.914 77.1977 li
221.309 77.1977 li
221.704 77.1977 li
222.098 77.1977 li
222.493 77.1977 li
222.888 77.1977 li
223.282 77.1977 li
223.677 77.1977 li
224.072 77.1977 li
224.466 77.1977 li
224.861 77.1977 li
225.256 77.1977 li
225.651 77.1977 li
226.045 77.1977 li
226.44 77.1977 li
226.835 77.1977 li
227.229 77.1977 li
227.624 77.1977 li
228.019 77.1977 li
228.413 77.1977 li
228.808 77.1977 li
@
31.8553 77.1967 mo
32.25 77.1966 li
32.6447 77.1964 li
33.0394 77.1961 li
33.4341 77.1959 li
33.8288 77.1956 li
34.2235 77.1952 li
34.6182 77.1948 li
35.0129 77.1943 li
35.4076 77.1938 li
35.8023 77.1931 li
36.197 77.1924 li
36.5917 77.1916 li
36.9864 77.1907 li
37.3811 77.1896 li
37.7758 77.1883 li
38.1705 77.1869 li
38.5652 77.1853 li
38.9599 77.1835 li
39.3545 77.1814 li
39.7492 77.179 li
40.1439 77.1763 li
40.5386 77.1733 li
40.9333 77.1699 li
41.328 77.166 li
41.7227 77.1616 li
42.1174 77.1567 li
42.5121 77.1512 li
42.9068 77.145 li
43.3015 77.1381 li
43.6962 77.1303 li
44.0909 77.1217 li
44.4856 77.112 li
44.8803 77.1012 li
45.275 77.0892 li
45.6697 77.0758 li
46.0644 77.061 li
46.4591 77.0446 li
46.8538 77.0264 li
47.2484 77.0063 li
47.6431 76.9842 li
48.0378 76.9598 li
48.4325 76.9329 li
48.8272 76.9034 li
49.2219 76.871 li
49.6166 76.8355 li
50.0113 76.7967 li
50.406 76.7542 li
50.8007 76.7079 li
51.1954 76.6575 li
51.5901 76.6027 li
51.9848 76.5431 li
52.3795 76.4785 li
52.7742 76.4085 li
53.1689 76.3328 li
53.5636 76.2511 li
53.9583 76.163 li
54.353 76.0682 li
54.7476 75.9662 li
55.1423 75.8567 li
55.537 75.7394 li
55.9317 75.6139 li
56.3264 75.4798 li
56.7211 75.3367 li
57.1158 75.1843 li
57.5105 75.0222 li
57.9052 74.8501 li
58.2999 74.6676 li
58.6946 74.4745 li
59.0893 74.2703 li
59.484 74.0549 li
59.8787 73.828 li
60.2734 73.5893 li
60.6681 73.3387 li
61.0628 73.0759 li
61.4575 72.801 li
61.8522 72.5137 li
62.2468 72.2141 li
62.6415 71.9021 li
63.0362 71.5778 li
63.4309 71.2413 li
63.8256 70.8927 li
64.2203 70.5324 li
64.615 70.1604 li
65.0097 69.7773 li
65.4044 69.3834 li
65.7991 68.9791 li
66.1938 68.565 li
66.5885 68.1417 li
66.9832 67.7098 li
67.3779 67.2701 li
67.7726 66.8234 li
68.1673 66.3705 li
68.562 65.9123 li
68.9567 65.4499 li
69.3514 64.9842 li
69.746 64.5163 li
70.1407 64.0475 li
70.5354 63.5788 li
70.9301 63.1115 li
71.3248 62.6469 li
71.7195 62.1863 li
72.1142 61.731 li
72.5089 61.2824 li
72.9036 60.8418 li
73.2983 60.4105 li
73.693 59.9901 li
74.0877 59.5817 li
74.4824 59.1868 li
74.8771 58.8067 li
75.2718 58.4428 li
75.6665 58.0961 li
76.0612 57.7681 li
76.4559 57.4598 li
76.8506 57.1723 li
77.2453 56.9068 li
77.6399 56.6642 li
78.0346 56.4453 li
78.4293 56.2511 li
78.824 56.0821 li
79.2187 55.9392 li
79.6134 55.8228 li
80.0081 55.7333 li
80.4028 55.6711 li
80.7975 55.6365 li
81.1922 55.6296 li
81.5869 55.6504 li
81.9816 55.6988 li
82.3763 55.7746 li
82.771 55.8776 li
83.1657 56.0074 li
83.5604 56.1634 li
83.9551 56.3451 li
84.3498 56.5517 li
84.7445 56.7826 li
85.1391 57.0368 li
85.5338 57.3134 li
85.9285 57.6114 li
86.3232 57.9297 li
86.7179 58.2672 li
87.1126 58.6227 li
87.5073 58.9949 li
87.902 59.3825 li
88.2967 59.7843 li
88.6914 60.1989 li
89.0861 60.6249 li
89.4808 61.061 li
89.8755 61.5058 li
90.2702 61.9579 li
90.6649 62.4161 li
91.0596 62.8788 li
91.4543 63.3449 li
91.849 63.813 li
92.2437 64.282 li
92.6384 64.7505 li
93.033 65.2174 li
93.4277 65.6816 li
93.8224 66.142 li
94.2171 66.5977 li
94.6118 67.0476 li
95.0065 67.4909 li
95.4012 67.9268 li
95.7959 68.3545 li
96.1906 68.7732 li
96.5853 69.1825 li
96.98 69.5817 li
97.3747 69.9703 li
97.7694 70.3478 li
98.1641 70.714 li
98.5588 71.0685 li
98.9535 71.411 li
99.3482 71.7414 li
99.7429 72.0596 li
100.138 72.3654 li
100.532 72.6589 li
100.927 72.94 li
101.322 73.2088 li
101.716 73.4655 li
102.111 73.7101 li
102.506 73.9429 li
102.9 74.164 li
103.295 74.3738 li
103.69 74.5724 li
104.085 74.7602 li
104.479 74.9374 li
104.874 75.1045 li
105.269 75.2617 li
105.663 75.4094 li
106.058 75.548 li
106.453 75.6777 li
106.847 75.7991 li
107.242 75.9124 li
107.637 76.0181 li
108.031 76.1164 li
108.426 76.2079 li
108.821 76.2927 li
109.216 76.3714 li
109.61 76.4442 li
110.005 76.5114 li
110.4 76.5735 li
110.794 76.6307 li
111.189 76.6833 li
111.584 76.7316 li
111.978 76.7759 li
112.373 76.8165 li
112.768 76.8536 li
113.162 76.8876 li
113.557 76.9185 li
113.952 76.9467 li
114.347 76.9723 li
114.741 76.9955 li
115.136 77.0166 li
115.531 77.0357 li
115.925 77.053 li
116.32 77.0686 li
116.715 77.0827 li
117.109 77.0953 li
117.504 77.1067 li
117.899 77.117 li
118.294 77.1261 li
118.688 77.1343 li
119.083 77.1417 li
119.478 77.1482 li
119.872 77.1541 li
120.267 77.1593 li
120.662 77.1639 li
121.056 77.168 li
121.451 77.1716 li
121.846 77.1749 li
122.24 77.1777 li
122.635 77.1802 li
123.03 77.1825 li
123.425 77.1844 li
123.819 77.1861 li
124.214 77.1876 li
124.609 77.189 li
125.003 77.1901 li
125.398 77.1911 li
125.793 77.192 li
126.187 77.1928 li
126.582 77.1935 li
126.977 77.1941 li
127.371 77.1946 li
127.766 77.195 li
128.161 77.1954 li
128.556 77.1957 li
128.95 77.196 li
129.345 77.1963 li
129.74 77.1965 li
130.134 77.1967 li
130.529 77.1968 li
130.924 77.1969 li
131.318 77.1971 li
131.713 77.1972 li
132.108 77.1972 li
132.503 77.1973 li
132.897 77.1974 li
133.292 77.1974 li
133.687 77.1975 li
134.081 77.1975 li
134.476 77.1975 li
134.871 77.1976 li
135.265 77.1976 li
135.66 77.1976 li
136.055 77.1976 li
136.449 77.1976 li
136.844 77.1977 li
137.239 77.1977 li
137.634 77.1977 li
138.028 77.1977 li
138.423 77.1977 li
138.818 77.1977 li
139.212 77.1977 li
139.607 77.1977 li
140.002 77.1977 li
140.396 77.1977 li
140.791 77.1977 li
141.186 77.1977 li
141.581 77.1977 li
141.975 77.1977 li
142.37 77.1977 li
142.765 77.1977 li
143.159 77.1977 li
143.554 77.1977 li
143.949 77.1977 li
144.343 77.1977 li
144.738 77.1977 li
145.133 77.1977 li
145.527 77.1977 li
145.922 77.1977 li
146.317 77.1977 li
146.712 77.1977 li
147.106 77.1977 li
147.501 77.1977 li
147.896 77.1977 li
148.29 77.1977 li
148.685 77.1977 li
149.08 77.1977 li
149.474 77.1977 li
149.869 77.1977 li
150.264 77.1977 li
150.658 77.1977 li
151.053 77.1977 li
151.448 77.1977 li
151.843 77.1977 li
152.237 77.1977 li
152.632 77.1977 li
153.027 77.1977 li
153.421 77.1977 li
153.816 77.1977 li
154.211 77.1977 li
154.605 77.1977 li
155 77.1977 li
155.395 77.1977 li
155.79 77.1977 li
156.184 77.1977 li
156.579 77.1977 li
156.974 77.1977 li
157.368 77.1977 li
157.763 77.1977 li
158.158 77.1977 li
158.552 77.1977 li
158.947 77.1977 li
159.342 77.1977 li
159.736 77.1977 li
160.131 77.1977 li
160.526 77.1977 li
160.921 77.1977 li
161.315 77.1977 li
161.71 77.1977 li
162.105 77.1977 li
162.499 77.1977 li
162.894 77.1977 li
163.289 77.1977 li
163.683 77.1977 li
164.078 77.1977 li
164.473 77.1977 li
164.868 77.1977 li
165.262 77.1977 li
165.657 77.1977 li
166.052 77.1977 li
166.446 77.1977 li
166.841 77.1977 li
167.236 77.1977 li
167.63 77.1977 li
168.025 77.1977 li
168.42 77.1977 li
168.814 77.1977 li
169.209 77.1977 li
169.604 77.1977 li
169.999 77.1977 li
170.393 77.1977 li
170.788 77.1977 li
171.183 77.1977 li
171.577 77.1977 li
171.972 77.1977 li
172.367 77.1977 li
172.761 77.1977 li
173.156 77.1977 li
173.551 77.1977 li
173.945 77.1977 li
174.34 77.1977 li
174.735 77.1977 li
175.13 77.1977 li
175.524 77.1977 li
175.919 77.1977 li
176.314 77.1977 li
176.708 77.1977 li
177.103 77.1977 li
177.498 77.1977 li
177.892 77.1977 li
178.287 77.1977 li
178.682 77.1977 li
179.077 77.1977 li
179.471 77.1977 li
179.866 77.1977 li
180.261 77.1977 li
180.655 77.1977 li
181.05 77.1977 li
181.445 77.1977 li
181.839 77.1977 li
182.234 77.1977 li
182.629 77.1977 li
183.023 77.1977 li
183.418 77.1977 li
183.813 77.1977 li
184.208 77.1977 li
184.602 77.1977 li
184.997 77.1977 li
185.392 77.1977 li
185.786 77.1977 li
186.181 77.1977 li
186.576 77.1977 li
186.97 77.1977 li
187.365 77.1977 li
187.76 77.1977 li
188.154 77.1977 li
188.549 77.1977 li
188.944 77.1977 li
189.339 77.1977 li
189.733 77.1977 li
190.128 77.1977 li
190.523 77.1977 li
190.917 77.1977 li
191.312 77.1977 li
191.707 77.1977 li
192.101 77.1977 li
192.496 77.1977 li
192.891 77.1977 li
193.286 77.1977 li
193.68 77.1977 li
194.075 77.1977 li
194.47 77.1977 li
194.864 77.1977 li
195.259 77.1977 li
195.654 77.1977 li
196.048 77.1977 li
196.443 77.1977 li
196.838 77.1977 li
197.232 77.1977 li
197.627 77.1977 li
198.022 77.1977 li
198.417 77.1977 li
198.811 77.1977 li
199.206 77.1977 li
199.601 77.1977 li
199.995 77.1977 li
200.39 77.1977 li
200.785 77.1977 li
201.179 77.1977 li
201.574 77.1977 li
201.969 77.1977 li
202.364 77.1977 li
202.758 77.1977 li
203.153 77.1977 li
203.548 77.1977 li
203.942 77.1977 li
204.337 77.1977 li
204.732 77.1977 li
205.126 77.1977 li
205.521 77.1977 li
205.916 77.1977 li
206.31 77.1977 li
206.705 77.1977 li
207.1 77.1977 li
207.495 77.1977 li
207.889 77.1977 li
208.284 77.1977 li
208.679 77.1977 li
209.073 77.1977 li
209.468 77.1977 li
209.863 77.1977 li
210.257 77.1977 li
210.652 77.1977 li
211.047 77.1977 li
211.441 77.1977 li
211.836 77.1977 li
212.231 77.1977 li
212.626 77.1977 li
213.02 77.1977 li
213.415 77.1977 li
213.81 77.1977 li
214.204 77.1977 li
214.599 77.1977 li
214.994 77.1977 li
215.388 77.1977 li
215.783 77.1977 li
216.178 77.1977 li
216.573 77.1977 li
216.967 77.1977 li
217.362 77.1977 li
217.757 77.1977 li
218.151 77.1977 li
218.546 77.1977 li
218.941 77.1977 li
219.335 77.1977 li
219.73 77.1977 li
220.125 77.1977 li
220.519 77.1977 li
220.914 77.1977 li
221.309 77.1977 li
221.704 77.1977 li
222.098 77.1977 li
222.493 77.1977 li
222.888 77.1977 li
223.282 77.1977 li
223.677 77.1977 li
224.072 77.1977 li
224.466 77.1977 li
224.861 77.1977 li
225.256 77.1977 li
225.651 77.1977 li
226.045 77.1977 li
226.44 77.1977 li
226.835 77.1977 li
227.229 77.1977 li
227.624 77.1977 li
228.019 77.1977 li
228.413 77.1977 li
228.808 77.1977 li
@
31.8553 77.1977 mo
32.25 77.1977 li
32.6447 77.1977 li
33.0394 77.1977 li
33.4341 77.1977 li
33.8288 77.1977 li
34.2235 77.1977 li
34.6182 77.1977 li
35.0129 77.1977 li
35.4076 77.1977 li
35.8023 77.1977 li
36.197 77.1977 li
36.5917 77.1977 li
36.9864 77.1977 li
37.3811 77.1977 li
37.7758 77.1977 li
38.1705 77.1977 li
38.5652 77.1977 li
38.9599 77.1977 li
39.3545 77.1977 li
39.7492 77.1977 li
40.1439 77.1977 li
40.5386 77.1977 li
40.9333 77.1977 li
41.328 77.1977 li
41.7227 77.1977 li
42.1174 77.1977 li
42.5121 77.1977 li
42.9068 77.1977 li
43.3015 77.1977 li
43.6962 77.1977 li
44.0909 77.1977 li
44.4856 77.1977 li
44.8803 77.1977 li
45.275 77.1977 li
45.6697 77.1977 li
46.0644 77.1977 li
46.4591 77.1977 li
46.8538 77.1977 li
47.2484 77.1977 li
47.6431 77.1977 li
48.0378 77.1977 li
48.4325 77.1977 li
48.8272 77.1977 li
49.2219 77.1978 li
49.6166 77.1978 li
50.0113 77.1978 li
50.406 77.1978 li
50.8007 77.1978 li
51.1954 77.1978 li
51.5901 77.1978 li
51.9848 77.1979 li
52.3795 77.1979 li
52.7742 77.1979 li
53.1689 77.1979 li
53.5636 77.198 li
53.9583 77.198 li
54.353 77.1981 li
54.7476 77.1982 li
55.1423 77.1982 li
55.537 77.1983 li
55.9317 77.1985 li
56.3264 77.1986 li
56.7211 77.1987 li
57.1158 77.1989 li
57.5105 77.1991 li
57.9052 77.1994 li
58.2999 77.1996 li
58.6946 77.2 li
59.0893 77.2003 li
59.484 77.2008 li
59.8787 77.2013 li
60.2734 77.2018 li
60.6681 77.2025 li
61.0628 77.2032 li
61.4575 77.2041 li
61.8522 77.2051 li
62.2468 77.2062 li
62.6415 77.2075 li
63.0362 77.209 li
63.4309 77.2106 li
63.8256 77.2125 li
64.2203 77.2147 li
64.615 77.2171 li
65.0097 77.2199 li
65.4044 77.223 li
65.7991 77.2265 li
66.1938 77.2305 li
66.5885 77.235 li
66.9832 77.24 li
67.3779 77.2457 li
67.7726 77.252 li
68.1673 77.2591 li
68.562 77.267 li
68.9567 77.2759 li
69.3514 77.2858 li
69.746 77.2968 li
70.1407 77.309 li
70.5354 77.3226 li
70.9301 77.3377 li
71.3248 77.3544 li
71.7195 77.3728 li
72.1142 77.3932 li
72.5089 77.4157 li
72.9036 77.4404 li
73.2983 77.4676 li
73.693 77.4974 li
74.0877 77.5302 li
74.4824 77.566 li
74.8771 77.6051 li
75.2718 77.6479 li
75.6665 77.6945 li
76.0612 77.7452 li
76.4559 77.8003 li
76.8506 77.8601 li
77.2453 77.9249 li
77.6399 77.995 li
78.0346 78.0707 li
78.4293 78.1524 li
78.824 78.2404 li
79.2187 78.3351 li
79.6134 78.4368 li
80.0081 78.5458 li
80.4028 78.6626 li
80.7975 78.7874 li
81.1922 78.9206 li
81.5869 79.0626 li
81.9816 79.2137 li
82.3763 79.3743 li
82.771 79.5446 li
83.1657 79.725 li
83.5604 79.9158 li
83.9551 80.1172 li
84.3498 80.3295 li
84.7445 80.5529 li
85.1391 80.7877 li
85.5338 81.0339 li
85.9285 81.2918 li
86.3232 81.5614 li
86.7179 81.8428 li
87.1126 82.136 li
87.5073 82.4409 li
87.902 82.7576 li
88.2967 83.0857 li
88.6914 83.4253 li
89.0861 83.7759 li
89.4808 84.1374 li
89.8755 84.5093 li
90.2702 84.8913 li
90.6649 85.2829 li
91.0596 85.6834 li
91.4543 86.0924 li
91.849 86.509 li
92.2437 86.9327 li
92.6384 87.3626 li
93.033 87.7979 li
93.4277 88.2376 li
93.8224 88.6807 li
94.2171 89.1264 li
94.6118 89.5733 li
95.0065 90.0206 li
95.4012 90.4669 li
95.7959 90.9112 li
96.1906 91.3521 li
96.5853 91.7885 li
96.98 92.2189 li
97.3747 92.6422 li
97.7694 93.0571 li
98.1641 93.4622 li
98.5588 93.8562 li
98.9535 94.2378 li
99.3482 94.6058 li
99.7429 94.9589 li
100.138 95.2958 li
100.532 95.6155 li
100.927 95.9168 li
101.322 96.1985 li
101.716 96.4598 li
102.111 96.6995 li
102.506 96.9169 li
102.9 97.1111 li
103.295 97.2813 li
103.69 97.427 li
104.085 97.5476 li
104.479 97.6427 li
104.874 97.7117 li
105.269 97.7546 li
105.663 97.7711 li
106.058 97.7612 li
106.453 97.7249 li
106.847 97.6624 li
107.242 97.5738 li
107.637 97.4596 li
108.031 97.3201 li
108.426 97.1559 li
108.821 96.9676 li
109.216 96.756 li
109.61 96.5218 li
110.005 96.2658 li
110.4 95.9891 li
110.794 95.6926 li
111.189 95.3774 li
111.584 95.0447 li
111.978 94.6955 li
112.373 94.3311 li
112.768 93.9528 li
113.162 93.5617 li
113.557 93.1593 li
113.952 92.7468 li
114.347 92.3255 li
114.741 91.8967 li
115.136 91.4617 li
115.531 91.0218 li
115.925 90.5783 li
116.32 90.1323 li
116.715 89.6852 li
117.109 89.238 li
117.504 88.792 li
117.899 88.3481 li
118.294 87.9074 li
118.688 87.471 li
119.083 87.0397 li
119.478 86.6143 li
119.872 86.1958 li
120.267 85.7849 li
120.662 85.3822 li
121.056 84.9883 li
121.451 84.6039 li
121.846 84.2294 li
122.24 83.8653 li
122.635 83.5119 li
123.03 83.1696 li
123.425 82.8385 li
123.819 82.519 li
124.214 82.2111 li
124.609 81.915 li
125.003 81.6307 li
125.398 81.3581 li
125.793 81.0973 li
126.187 80.8482 li
126.582 80.6105 li
126.977 80.3843 li
127.371 80.1692 li
127.766 79.9651 li
128.161 79.7717 li
128.556 79.5887 li
128.95 79.4159 li
129.345 79.253 li
129.74 79.0995 li
130.134 78.9553 li
130.529 78.8199 li
130.924 78.693 li
131.318 78.5743 li
131.713 78.4634 li
132.108 78.3599 li
132.503 78.2635 li
132.897 78.1738 li
133.292 78.0906 li
133.687 78.0134 li
134.081 77.9419 li
134.476 77.8758 li
134.871 77.8148 li
135.265 77.7585 li
135.66 77.7067 li
136.055 77.6591 li
136.449 77.6155 li
136.844 77.5754 li
137.239 77.5388 li
137.634 77.5053 li
138.028 77.4748 li
138.423 77.447 li
138.818 77.4216 li
139.212 77.3986 li
139.607 77.3777 li
140.002 77.3588 li
140.396 77.3417 li
140.791 77.3263 li
141.186 77.3123 li
141.581 77.2997 li
141.975 77.2884 li
142.37 77.2783 li
142.765 77.2692 li
143.159 77.261 li
143.554 77.2537 li
143.949 77.2472 li
144.343 77.2414 li
144.738 77.2362 li
145.133 77.2316 li
145.527 77.2275 li
145.922 77.2238 li
146.317 77.2206 li
146.712 77.2178 li
147.106 77.2152 li
147.501 77.213 li
147.896 77.2111 li
148.29 77.2094 li
148.685 77.2078 li
149.08 77.2065 li
149.474 77.2053 li
149.869 77.2043 li
150.264 77.2034 li
150.658 77.2027 li
151.053 77.202 li
151.448 77.2014 li
151.843 77.2009 li
152.237 77.2004 li
152.632 77.2001 li
153.027 77.1997 li
153.421 77.1994 li
153.816 77.1992 li
154.211 77.199 li
154.605 77.1988 li
155 77.1986 li
155.395 77.1985 li
155.79 77.1984 li
156.184 77.1983 li
156.579 77.1982 li
156.974 77.1981 li
157.368 77.1981 li
157.763 77.198 li
158.158 77.198 li
158.552 77.1979 li
158.947 77.1979 li
159.342 77.1979 li
159.736 77.1978 li
160.131 77.1978 li
160.526 77.1978 li
160.921 77.1978 li
161.315 77.1978 li
161.71 77.1978 li
162.105 77.1978 li
162.499 77.1977 li
162.894 77.1977 li
163.289 77.1977 li
163.683 77.1977 li
164.078 77.1977 li
164.473 77.1977 li
164.868 77.1977 li
165.262 77.1977 li
165.657 77.1977 li
166.052 77.1977 li
166.446 77.1977 li
166.841 77.1977 li
167.236 77.1977 li
167.63 77.1977 li
168.025 77.1977 li
168.42 77.1977 li
168.814 77.1977 li
169.209 77.1977 li
169.604 77.1977 li
169.999 77.1977 li
170.393 77.1977 li
170.788 77.1977 li
171.183 77.1977 li
171.577 77.1977 li
171.972 77.1977 li
172.367 77.1977 li
172.761 77.1977 li
173.156 77.1977 li
173.551 77.1977 li
173.945 77.1977 li
174.34 77.1977 li
174.735 77.1977 li
175.13 77.1977 li
175.524 77.1977 li
175.919 77.1977 li
176.314 77.1977 li
176.708 77.1977 li
177.103 77.1977 li
177.498 77.1977 li
177.892 77.1977 li
178.287 77.1977 li
178.682 77.1977 li
179.077 77.1977 li
179.471 77.1977 li
179.866 77.1977 li
180.261 77.1977 li
180.655 77.1977 li
181.05 77.1977 li
181.445 77.1977 li
181.839 77.1977 li
182.234 77.1977 li
182.629 77.1977 li
183.023 77.1977 li
183.418 77.1977 li
183.813 77.1977 li
184.208 77.1977 li
184.602 77.1977 li
184.997 77.1977 li
185.392 77.1977 li
185.786 77.1977 li
186.181 77.1977 li
186.576 77.1977 li
186.97 77.1977 li
187.365 77.1977 li
187.76 77.1977 li
188.154 77.1977 li
188.549 77.1977 li
188.944 77.1977 li
189.339 77.1977 li
189.733 77.1977 li
190.128 77.1977 li
190.523 77.1977 li
190.917 77.1977 li
191.312 77.1977 li
191.707 77.1977 li
192.101 77.1977 li
192.496 77.1977 li
192.891 77.1977 li
193.286 77.1977 li
193.68 77.1977 li
194.075 77.1977 li
194.47 77.1977 li
194.864 77.1977 li
195.259 77.1977 li
195.654 77.1977 li
196.048 77.1977 li
196.443 77.1977 li
196.838 77.1977 li
197.232 77.1977 li
197.627 77.1977 li
198.022 77.1977 li
198.417 77.1977 li
198.811 77.1977 li
199.206 77.1977 li
199.601 77.1977 li
199.995 77.1977 li
200.39 77.1977 li
200.785 77.1977 li
201.179 77.1977 li
201.574 77.1977 li
201.969 77.1977 li
202.364 77.1977 li
202.758 77.1977 li
203.153 77.1977 li
203.548 77.1977 li
203.942 77.1977 li
204.337 77.1977 li
204.732 77.1977 li
205.126 77.1977 li
205.521 77.1977 li
205.916 77.1977 li
206.31 77.1977 li
206.705 77.1977 li
207.1 77.1977 li
207.495 77.1977 li
207.889 77.1977 li
208.284 77.1977 li
208.679 77.1977 li
209.073 77.1977 li
209.468 77.1977 li
209.863 77.1977 li
210.257 77.1977 li
210.652 77.1977 li
211.047 77.1977 li
211.441 77.1977 li
211.836 77.1977 li
212.231 77.1977 li
212.626 77.1977 li
213.02 77.1977 li
213.415 77.1977 li
213.81 77.1977 li
214.204 77.1977 li
214.599 77.1977 li
214.994 77.1977 li
215.388 77.1977 li
215.783 77.1977 li
216.178 77.1977 li
216.573 77.1977 li
216.967 77.1977 li
217.362 77.1977 li
217.757 77.1977 li
218.151 77.1977 li
218.546 77.1977 li
218.941 77.1977 li
219.335 77.1977 li
219.73 77.1977 li
220.125 77.1977 li
220.519 77.1977 li
220.914 77.1977 li
221.309 77.1977 li
221.704 77.1977 li
222.098 77.1977 li
222.493 77.1977 li
222.888 77.1977 li
223.282 77.1977 li
223.677 77.1977 li
224.072 77.1977 li
224.466 77.1977 li
224.861 77.1977 li
225.256 77.1977 li
225.651 77.1977 li
226.045 77.1977 li
226.44 77.1977 li
226.835 77.1977 li
227.229 77.1977 li
227.624 77.1977 li
228.019 77.1977 li
228.413 77.1977 li
228.808 77.1977 li
@
31.8553 77.1977 mo
32.25 77.1977 li
32.6447 77.1977 li
33.0394 77.1977 li
33.4341 77.1977 li
33.8288 77.1977 li
34.2235 77.1977 li
34.6182 77.1977 li
35.0129 77.1977 li
35.4076 77.1977 li
35.8023 77.1977 li
36.197 77.1977 li
36.5917 77.1977 li
36.9864 77.1977 li
37.3811 77.1977 li
37.7758 77.1977 li
38.1705 77.1977 li
38.5652 77.1977 li
38.9599 77.1977 li
39.3545 77.1977 li
39.7492 77.1977 li
40.1439 77.1977 li
40.5386 77.1977 li
40.9333 77.1977 li
41.328 77.1977 li
41.7227 77.1977 li
42.1174 77.1977 li
42.5121 77.1977 li
42.9068 77.1977 li
43.3015 77.1977 li
43.6962 77.1977 li
44.0909 77.1977 li
44.4856 77.1977 li
44.8803 77.1977 li
45.275 77.1977 li
45.6697 77.1977 li
46.0644 77.1977 li
46.4591 77.1977 li
46.8538 77.1977 li
47.2484 77.1977 li
47.6431 77.1977 li
48.0378 77.1977 li
48.4325 77.1977 li
48.8272 77.1977 li
49.2219 77.1977 li
49.6166 77.1977 li
50.0113 77.1977 li
50.406 77.1977 li
50.8007 77.1977 li
51.1954 77.1977 li
51.5901 77.1977 li
51.9848 77.1977 li
52.3795 77.1977 li
52.7742 77.1977 li
53.1689 77.1977 li
53.5636 77.1977 li
53.9583 77.1977 li
54.353 77.1977 li
54.7476 77.1977 li
55.1423 77.1977 li
55.537 77.1977 li
55.9317 77.1977 li
56.3264 77.1977 li
56.7211 77.1977 li
57.1158 77.1977 li
57.5105 77.1977 li
57.9052 77.1977 li
58.2999 77.1977 li
58.6946 77.1977 li
59.0893 77.1977 li
59.484 77.1977 li
59.8787 77.1977 li
60.2734 77.1977 li
60.6681 77.1977 li
61.0628 77.1977 li
61.4575 77.1977 li
61.8522 77.1977 li
62.2468 77.1977 li
62.6415 77.1977 li
63.0362 77.1977 li
63.4309 77.1977 li
63.8256 77.1977 li
64.2203 77.1977 li
64.615 77.1977 li
65.0097 77.1977 li
65.4044 77.1977 li
65.7991 77.1977 li
66.1938 77.1977 li
66.5885 77.1977 li
66.9832 77.1977 li
67.3779 77.1977 li
67.7726 77.1977 li
68.1673 77.1977 li
68.562 77.1977 li
68.9567 77.1977 li
69.3514 77.1977 li
69.746 77.1977 li
70.1407 77.1977 li
70.5354 77.1977 li
70.9301 77.1977 li
71.3248 77.1977 li
71.7195 77.1977 li
72.1142 77.1977 li
72.5089 77.1977 li
72.9036 77.1977 li
73.2983 77.1977 li
73.693 77.1977 li
74.0877 77.1976 li
74.4824 77.1976 li
74.8771 77.1976 li
75.2718 77.1976 li
75.6665 77.1976 li
76.0612 77.1975 li
76.4559 77.1975 li
76.8506 77.1975 li
77.2453 77.1974 li
77.6399 77.1974 li
78.0346 77.1973 li
78.4293 77.1972 li
78.824 77.1972 li
79.2187 77.1971 li
79.6134 77.1969 li
80.0081 77.1968 li
80.4028 77.1966 li
80.7975 77.1964 li
81.1922 77.1962 li
81.5869 77.196 li
81.9816 77.1956 li
82.3763 77.1953 li
82.771 77.1949 li
83.1657 77.1944 li
83.5604 77.1939 li
83.9551 77.1933 li
84.3498 77.1925 li
84.7445 77.1917 li
85.1391 77.1907 li
85.5338 77.1896 li
85.9285 77.1884 li
86.3232 77.1869 li
86.7179 77.1853 li
87.1126 77.1834 li
87.5073 77.1812 li
87.902 77.1788 li
88.2967 77.176 li
88.6914 77.1728 li
89.0861 77.1692 li
89.4808 77.1652 li
89.8755 77.1606 li
90.2702 77.1553 li
90.6649 77.1495 li
91.0596 77.1429 li
91.4543 77.1354 li
91.849 77.1271 li
92.2437 77.1177 li
92.6384 77.1072 li
93.033 77.0954 li
93.4277 77.0823 li
93.8224 77.0676 li
94.2171 77.0513 li
94.6118 77.0331 li
95.0065 77.0129 li
95.4012 76.9905 li
95.7959 76.9657 li
96.1906 76.9383 li
96.5853 76.908 li
96.98 76.8745 li
97.3747 76.8377 li
97.7694 76.7972 li
98.1641 76.7527 li
98.5588 76.7038 li
98.9535 76.6504 li
99.3482 76.5919 li
99.7429 76.528 li
100.138 76.4583 li
100.532 76.3825 li
100.927 76.3 li
101.322 76.2104 li
101.716 76.1133 li
102.111 76.0082 li
102.506 75.8945 li
102.9 75.7719 li
103.295 75.6396 li
103.69 75.4974 li
104.085 75.3445 li
104.479 75.1804 li
104.874 75.0047 li
105.269 74.8167 li
105.663 74.6159 li
106.058 74.4017 li
106.453 74.1737 li
106.847 73.9313 li
107.242 73.674 li
107.637 73.4013 li
108.031 73.1128 li
108.426 72.808 li
108.821 72.4865 li
109.216 72.1479 li
109.61 71.792 li
110.005 71.4184 li
110.4 71.0269 li
110.794 70.6174 li
111.189 70.1897 li
111.584 69.7438 li
111.978 69.2796 li
112.373 68.7974 li
112.768 68.2973 li
113.162 67.7796 li
113.557 67.2444 li
113.952 66.6925 li
114.347 66.1241 li
114.741 65.5399 li
115.136 64.9408 li
115.531 64.3273 li
115.925 63.7006 li
116.32 63.0615 li
116.715 62.4111 li
117.109 61.7507 li
117.504 61.0815 li
117.899 60.4049 li
118.294 59.7224 li
118.688 59.0355 li
119.083 58.3458 li
119.478 57.6551 li
119.872 56.9651 li
120.267 56.2776 li
120.662 55.5946 li
121.056 54.9179 li
121.451 54.2495 li
121.846 53.5915 li
122.24 52.9457 li
122.635 52.3143 li
123.03 51.6992 li
123.425 51.1025 li
123.819 50.5261 li
124.214 49.972 li
124.609 49.4421 li
125.003 48.9382 li
125.398 48.4621 li
125.793 48.0155 li
126.187 47.6 li
126.582 47.2172 li
126.977 46.8684 li
127.371 46.555 li
127.766 46.2781 li
128.161 46.0388 li
128.556 45.8379 li
128.95 45.6763 li
129.345 45.5545 li
129.74 45.4731 li
130.134 45.4323 li
130.529 45.4323 li
130.924 45.4731 li
131.318 45.5545 li
131.713 45.6763 li
132.108 45.8379 li
132.503 46.0388 li
132.897 46.2781 li
133.292 46.555 li
133.687 46.8684 li
134.081 47.2172 li
134.476 47.6 li
134.871 48.0155 li
135.265 48.4621 li
135.66 48.9382 li
136.055 49.4421 li
136.449 49.972 li
136.844 50.5261 li
137.239 51.1025 li
137.634 51.6992 li
138.028 52.3143 li
138.423 52.9457 li
138.818 53.5915 li
139.212 54.2495 li
139.607 54.9179 li
140.002 55.5946 li
140.396 56.2776 li
140.791 56.9651 li
141.186 57.6551 li
141.581 58.3458 li
141.975 59.0355 li
142.37 59.7224 li
142.765 60.4049 li
143.159 61.0815 li
143.554 61.7507 li
143.949 62.4111 li
144.343 63.0615 li
144.738 63.7006 li
145.133 64.3273 li
145.527 64.9408 li
145.922 65.5399 li
146.317 66.1241 li
146.712 66.6925 li
147.106 67.2444 li
147.501 67.7796 li
147.896 68.2973 li
148.29 68.7974 li
148.685 69.2796 li
149.08 69.7438 li
149.474 70.1897 li
149.869 70.6174 li
150.264 71.0269 li
150.658 71.4184 li
151.053 71.792 li
151.448 72.1479 li
151.843 72.4865 li
152.237 72.808 li
152.632 73.1128 li
153.027 73.4013 li
153.421 73.674 li
153.816 73.9313 li
154.211 74.1737 li
154.605 74.4017 li
155 74.6159 li
155.395 74.8167 li
155.79 75.0047 li
156.184 75.1804 li
156.579 75.3445 li
156.974 75.4974 li
157.368 75.6396 li
157.763 75.7719 li
158.158 75.8945 li
158.552 76.0082 li
158.947 76.1133 li
159.342 76.2104 li
159.736 76.3 li
160.131 76.3825 li
160.526 76.4583 li
160.921 76.528 li
161.315 76.5919 li
161.71 76.6504 li
162.105 76.7038 li
162.499 76.7527 li
162.894 76.7972 li
163.289 76.8377 li
163.683 76.8745 li
164.078 76.908 li
164.473 76.9383 li
164.868 76.9657 li
165.262 76.9905 li
165.657 77.0129 li
166.052 77.0331 li
166.446 77.0513 li
166.841 77.0676 li
167.236 77.0823 li
167.63 77.0954 li
168.025 77.1072 li
168.42 77.1177 li
168.814 77.1271 li
169.209 77.1354 li
169.604 77.1429 li
169.999 77.1495 li
170.393 77.1553 li
170.788 77.1606 li
171.183 77.1652 li
171.577 77.1692 li
171.972 77.1728 li
172.367 77.176 li
172.761 77.1788 li
173.156 77.1812 li
173.551 77.1834 li
173.945 77.1853 li
174.34 77.1869 li
174.735 77.1884 li
175.13 77.1896 li
175.524 77.1907 li
175.919 77.1917 li
176.314 77.1925 li
176.708 77.1933 li
177.103 77.1939 li
177.498 77.1944 li
177.892 77.1949 li
178.287 77.1953 li
178.682 77.1956 li
179.077 77.196 li
179.471 77.1962 li
179.866 77.1964 li
180.261 77.1966 li
180.655 77.1968 li
181.05 77.1969 li
181.445 77.1971 li
181.839 77.1972 li
182.234 77.1972 li
182.629 77.1973 li
183.023 77.1974 li
183.418 77.1974 li
183.813 77.1975 li
184.208 77.1975 li
184.602 77.1975 li
184.997 77.1976 li
185.392 77.1976 li
185.786 77.1976 li
186.181 77.1976 li
186.576 77.1976 li
186.97 77.1977 li
187.365 77.1977 li
187.76 77.1977 li
188.154 77.1977 li
188.549 77.1977 li
188.944 77.1977 li
189.339 77.1977 li
189.733 77.1977 li
190.128 77.1977 li
190.523 77.1977 li
190.917 77.1977 li
191.312 77.1977 li
191.707 77.1977 li
192.101 77.1977 li
192.496 77.1977 li
192.891 77.1977 li
193.286 77.1977 li
193.68 77.1977 li
194.075 77.1977 li
194.47 77.1977 li
194.864 77.1977 li
195.259 77.1977 li
195.654 77.1977 li
196.048 77.1977 li
196.443 77.1977 li
196.838 77.1977 li
197.232 77.1977 li
197.627 77.1977 li
198.022 77.1977 li
198.417 77.1977 li
198.811 77.1977 li
199.206 77.1977 li
199.601 77.1977 li
199.995 77.1977 li
200.39 77.1977 li
200.785 77.1977 li
201.179 77.1977 li
201.574 77.1977 li
201.969 77.1977 li
202.364 77.1977 li
202.758 77.1977 li
203.153 77.1977 li
203.548 77.1977 li
203.942 77.1977 li
204.337 77.1977 li
204.732 77.1977 li
205.126 77.1977 li
205.521 77.1977 li
205.916 77.1977 li
206.31 77.1977 li
206.705 77.1977 li
207.1 77.1977 li
207.495 77.1977 li
207.889 77.1977 li
208.284 77.1977 li
208.679 77.1977 li
209.073 77.1977 li
209.468 77.1977 li
209.863 77.1977 li
210.257 77.1977 li
210.652 77.1977 li
211.047 77.1977 li
211.441 77.1977 li
211.836 77.1977 li
212.231 77.1977 li
212.626 77.1977 li
213.02 77.1977 li
213.415 77.1977 li
213.81 77.1977 li
214.204 77.1977 li
214.599 77.1977 li
214.994 77.1977 li
215.388 77.1977 li
215.783 77.1977 li
216.178 77.1977 li
216.573 77.1977 li
216.967 77.1977 li
217.362 77.1977 li
217.757 77.1977 li
218.151 77.1977 li
218.546 77.1977 li
218.941 77.1977 li
219.335 77.1977 li
219.73 77.1977 li
220.125 77.1977 li
220.519 77.1977 li
220.914 77.1977 li
221.309 77.1977 li
221.704 77.1977 li
222.098 77.1977 li
222.493 77.1977 li
222.888 77.1977 li
223.282 77.1977 li
223.677 77.1977 li
224.072 77.1977 li
224.466 77.1977 li
224.861 77.1977 li
225.256 77.1977 li
225.651 77.1977 li
226.045 77.1977 li
226.44 77.1977 li
226.835 77.1977 li
227.229 77.1977 li
227.624 77.1977 li
228.019 77.1977 li
228.413 77.1977 li
228.808 77.1977 li
@
31.8553 77.1977 mo
32.25 77.1977 li
32.6447 77.1977 li
33.0394 77.1977 li
33.4341 77.1977 li
33.8288 77.1977 li
34.2235 77.1977 li
34.6182 77.1977 li
35.0129 77.1977 li
35.4076 77.1977 li
35.8023 77.1977 li
36.197 77.1977 li
36.5917 77.1977 li
36.9864 77.1977 li
37.3811 77.1977 li
37.7758 77.1977 li
38.1705 77.1977 li
38.5652 77.1977 li
38.9599 77.1977 li
39.3545 77.1977 li
39.7492 77.1977 li
40.1439 77.1977 li
40.5386 77.1977 li
40.9333 77.1977 li
41.328 77.1977 li
41.7227 77.1977 li
42.1174 77.1977 li
42.5121 77.1977 li
42.9068 77.1977 li
43.3015 77.1977 li
43.6962 77.1977 li
44.0909 77.1977 li
44.4856 77.1977 li
44.8803 77.1977 li
45.275 77.1977 li
45.6697 77.1977 li
46.0644 77.1977 li
46.4591 77.1977 li
46.8538 77.1977 li
47.2484 77.1977 li
47.6431 77.1977 li
48.0378 77.1977 li
48.4325 77.1977 li
48.8272 77.1977 li
49.2219 77.1977 li
49.6166 77.1977 li
50.0113 77.1977 li
50.406 77.1977 li
50.8007 77.1977 li
51.1954 77.1977 li
51.5901 77.1977 li
51.9848 77.1977 li
52.3795 77.1977 li
52.7742 77.1977 li
53.1689 77.1977 li
53.5636 77.1977 li
53.9583 77.1977 li
54.353 77.1977 li
54.7476 77.1977 li
55.1423 77.1977 li
55.537 77.1977 li
55.9317 77.1977 li
56.3264 77.1977 li
56.7211 77.1977 li
57.1158 77.1977 li
57.5105 77.1977 li
57.9052 77.1977 li
58.2999 77.1977 li
58.6946 77.1977 li
59.0893 77.1977 li
59.484 77.1977 li
59.8787 77.1977 li
60.2734 77.1977 li
60.6681 77.1977 li
61.0628 77.1977 li
61.4575 77.1977 li
61.8522 77.1977 li
62.2468 77.1977 li
62.6415 77.1977 li
63.0362 77.1977 li
63.4309 77.1977 li
63.8256 77.1977 li
64.2203 77.1977 li
64.615 77.1977 li
65.0097 77.1977 li
65.4044 77.1977 li
65.7991 77.1977 li
66.1938 77.1977 li
66.5885 77.1977 li
66.9832 77.1977 li
67.3779 77.1977 li
67.7726 77.1977 li
68.1673 77.1977 li
68.562 77.1977 li
68.9567 77.1977 li
69.3514 77.1977 li
69.746 77.1977 li
70.1407 77.1977 li
70.5354 77.1977 li
70.9301 77.1977 li
71.3248 77.1977 li
71.7195 77.1977 li
72.1142 77.1977 li
72.5089 77.1977 li
72.9036 77.1977 li
73.2983 77.1977 li
73.693 77.1977 li
74.0877 77.1977 li
74.4824 77.1977 li
74.8771 77.1977 li
75.2718 77.1977 li
75.6665 77.1977 li
76.0612 77.1977 li
76.4559 77.1977 li
76.8506 77.1977 li
77.2453 77.1977 li
77.6399 77.1977 li
78.0346 77.1977 li
78.4293 77.1977 li
78.824 77.1977 li
79.2187 77.1977 li
79.6134 77.1977 li
80.0081 77.1977 li
80.4028 77.1977 li
80.7975 77.1977 li
81.1922 77.1977 li
81.5869 77.1977 li
81.9816 77.1977 li
82.3763 77.1977 li
82.771 77.1977 li
83.1657 77.1977 li
83.5604 77.1977 li
83.9551 77.1977 li
84.3498 77.1977 li
84.7445 77.1977 li
85.1391 77.1977 li
85.5338 77.1977 li
85.9285 77.1977 li
86.3232 77.1977 li
86.7179 77.1977 li
87.1126 77.1977 li
87.5073 77.1977 li
87.902 77.1977 li
88.2967 77.1977 li
88.6914 77.1977 li
89.0861 77.1977 li
89.4808 77.1977 li
89.8755 77.1977 li
90.2702 77.1977 li
90.6649 77.1977 li
91.0596 77.1977 li
91.4543 77.1977 li
91.849 77.1977 li
92.2437 77.1977 li
92.6384 77.1977 li
93.033 77.1977 li
93.4277 77.1977 li
93.8224 77.1977 li
94.2171 77.1977 li
94.6118 77.1977 li
95.0065 77.1977 li
95.4012 77.1977 li
95.7959 77.1977 li
96.1906 77.1977 li
96.5853 77.1977 li
96.98 77.1977 li
97.3747 77.1977 li
97.7694 77.1977 li
98.1641 77.1977 li
98.5588 77.1977 li
98.9535 77.1977 li
99.3482 77.1977 li
99.7429 77.1977 li
100.138 77.1977 li
100.532 77.1977 li
100.927 77.1977 li
101.322 77.1977 li
101.716 77.1977 li
102.111 77.1977 li
102.506 77.1977 li
102.9 77.1976 li
103.295 77.1976 li
103.69 77.1976 li
104.085 77.1976 li
104.479 77.1976 li
104.874 77.1976 li
105.269 77.1975 li
105.663 77.1975 li
106.058 77.1975 li
106.453 77.1974 li
106.847 77.1974 li
107.242 77.1973 li
107.637 77.1973 li
108.031 77.1972 li
108.426 77.1971 li
108.821 77.197 li
109.216 77.1969 li
109.61 77.1968 li
110.005 77.1966 li
110.4 77.1964 li
110.794 77.1962 li
111.189 77.196 li
111.584 77.1957 li
111.978 77.1954 li
112.373 77.1951 li
112.768 77.1947 li
113.162 77.1943 li
113.557 77.1938 li
113.952 77.1932 li
114.347 77.1926 li
114.741 77.1919 li
115.136 77.1911 li
115.531 77.1902 li
115.925 77.1891 li
116.32 77.188 li
116.715 77.1867 li
117.109 77.1852 li
117.504 77.1836 li
117.899 77.1818 li
118.294 77.1797 li
118.688 77.1775 li
119.083 77.1749 li
119.478 77.1721 li
119.872 77.169 li
120.267 77.1656 li
120.662 77.1617 li
121.056 77.1575 li
121.451 77.1528 li
121.846 77.1477 li
122.24 77.1421 li
122.635 77.1358 li
123.03 77.129 li
123.425 77.1215 li
123.819 77.1134 li
124.214 77.1044 li
124.609 77.0947 li
125.003 77.084 li
125.398 77.0725 li
125.793 77.0599 li
126.187 77.0463 li
126.582 77.0315 li
126.977 77.0156 li
127.371 76.9983 li
127.766 76.9797 li
128.161 76.9597 li
128.556 76.9382 li
128.95 76.9151 li
129.345 76.8903 li
129.74 76.8638 li
130.134 76.8355 li
130.529 76.8052 li
130.924 76.773 li
131.318 76.7388 li
131.713 76.7024 li
132.108 76.6638 li
132.503 76.6229 li
132.897 76.5798 li
133.292 76.5342 li
133.687 76.4861 li
134.081 76.4356 li
134.476 76.3826 li
134.871 76.3269 li
135.265 76.2687 li
135.66 76.2078 li
136.055 76.1443 li
136.449 76.0782 li
136.844 76.0095 li
137.239 75.9381 li
137.634 75.8642 li
138.028 75.7877 li
138.423 75.7088 li
138.818 75.6275 li
139.212 75.5439 li
139.607 75.4581 li
140.002 75.3701 li
140.396 75.2802 li
140.791 75.1884 li
141.186 75.095 li
141.581 75 li
141.975 74.9037 li
142.37 74.8062 li
142.765 74.7078 li
143.159 74.6087 li
143.554 74.5091 li
143.949 74.4092 li
144.343 74.3094 li
144.738 74.2098 li
145.133 74.1108 li
145.527 74.0125 li
145.922 73.9154 li
146.317 73.8197 li
146.712 73.7256 li
147.106 73.6335 li
147.501 73.5436 li
147.896 73.4563 li
148.29 73.3718 li
148.685 73.2904 li
149.08 73.2125 li
149.474 73.1382 li
149.869 73.0678 li
150.264 73.0016 li
150.658 72.9398 li
151.053 72.8826 li
151.448 72.8303 li
151.843 72.7831 li
152.237 72.741 li
152.632 72.7044 li
153.027 72.6732 li
153.421 72.6477 li
153.816 72.6279 li
154.211 72.614 li
154.605 72.6058 li
155 72.6036 li
155.395 72.6073 li
155.79 72.6169 li
156.184 72.6323 li
156.579 72.6535 li
156.974 72.6805 li
157.368 72.713 li
157.763 72.751 li
158.158 72.7944 li
158.552 72.8429 li
158.947 72.8965 li
159.342 72.9548 li
159.736 73.0177 li
160.131 73.085 li
160.526 73.1564 li
160.921 73.2316 li
161.315 73.3105 li
161.71 73.3926 li
162.105 73.4779 li
162.499 73.5658 li
162.894 73.6563 li
163.289 73.7489 li
163.683 73.8434 li
164.078 73.9396 li
164.473 74.037 li
164.868 74.1355 li
165.262 74.2347 li
165.657 74.3343 li
166.052 74.4342 li
166.446 74.534 li
166.841 74.6335 li
167.236 74.7325 li
167.63 74.8307 li
168.025 74.9279 li
168.42 75.0239 li
168.814 75.1185 li
169.209 75.2115 li
169.604 75.3028 li
169.999 75.3923 li
170.393 75.4797 li
170.788 75.565 li
171.183 75.6481 li
171.577 75.7288 li
171.972 75.8071 li
172.367 75.8829 li
172.761 75.9562 li
173.156 76.0269 li
173.551 76.095 li
173.945 76.1605 li
174.34 76.2233 li
174.735 76.2835 li
175.13 76.3411 li
175.524 76.3961 li
175.919 76.4485 li
176.314 76.4984 li
176.708 76.5458 li
177.103 76.5908 li
177.498 76.6334 li
177.892 76.6737 li
178.287 76.7117 li
178.682 76.7475 li
179.077 76.7813 li
179.471 76.813 li
179.866 76.8427 li
180.261 76.8706 li
180.655 76.8967 li
181.05 76.921 li
181.445 76.9437 li
181.839 76.9649 li
182.234 76.9845 li
182.629 77.0028 li
183.023 77.0197 li
183.418 77.0353 li
183.813 77.0498 li
184.208 77.0632 li
184.602 77.0755 li
184.997 77.0868 li
185.392 77.0972 li
185.786 77.1067 li
186.181 77.1155 li
186.576 77.1235 li
186.97 77.1308 li
187.365 77.1375 li
187.76 77.1435 li
188.154 77.149 li
188.549 77.1541 li
188.944 77.1586 li
189.339 77.1627 li
189.733 77.1665 li
190.128 77.1698 li
190.523 77.1729 li
190.917 77.1756 li
191.312 77.178 li
191.707 77.1803 li
192.101 77.1822 li
192.496 77.184 li
192.891 77.1856 li
193.286 77.187 li
193.68 77.1883 li
194.075 77.1894 li
194.47 77.1904 li
194.864 77.1913 li
195.259 77.1921 li
195.654 77.1928 li
196.048 77.1934 li
196.443 77.1939 li
196.838 77.1944 li
197.232 77.1948 li
197.627 77.1952 li
198.022 77.1955 li
198.417 77.1958 li
198.811 77.1961 li
199.206 77.1963 li
199.601 77.1965 li
199.995 77.1966 li
200.39 77.1968 li
200.785 77.1969 li
201.179 77.197 li
201.574 77.1971 li
201.969 77.1972 li
202.364 77.1973 li
202.758 77.1973 li
203.153 77.1974 li
203.548 77.1974 li
203.942 77.1975 li
204.337 77.1975 li
204.732 77.1975 li
205.126 77.1976 li
205.521 77.1976 li
205.916 77.1976 li
206.31 77.1976 li
206.705 77.1976 li
207.1 77.1976 li
207.495 77.1977 li
207.889 77.1977 li
208.284 77.1977 li
208.679 77.1977 li
209.073 77.1977 li
209.468 77.1977 li
209.863 77.1977 li
210.257 77.1977 li
210.652 77.1977 li
211.047 77.1977 li
211.441 77.1977 li
211.836 77.1977 li
212.231 77.1977 li
212.626 77.1977 li
213.02 77.1977 li
213.415 77.1977 li
213.81 77.1977 li
214.204 77.1977 li
214.599 77.1977 li
214.994 77.1977 li
215.388 77.1977 li
215.783 77.1977 li
216.178 77.1977 li
216.573 77.1977 li
216.967 77.1977 li
217.362 77.1977 li
217.757 77.1977 li
218.151 77.1977 li
218.546 77.1977 li
218.941 77.1977 li
219.335 77.1977 li
219.73 77.1977 li
220.125 77.1977 li
220.519 77.1977 li
220.914 77.1977 li
221.309 77.1977 li
221.704 77.1977 li
222.098 77.1977 li
222.493 77.1977 li
222.888 77.1977 li
223.282 77.1977 li
223.677 77.1977 li
224.072 77.1977 li
224.466 77.1977 li
224.861 77.1977 li
225.256 77.1977 li
225.651 77.1977 li
226.045 77.1977 li
226.44 77.1977 li
226.835 77.1977 li
227.229 77.1977 li
227.624 77.1977 li
228.019 77.1977 li
228.413 77.1977 li
228.808 77.1977 li
@
31.8553 77.1977 mo
32.25 77.1977 li
32.6447 77.1977 li
33.0394 77.1977 li
33.4341 77.1977 li
33.8288 77.1977 li
34.2235 77.1977 li
34.6182 77.1977 li
35.0129 77.1977 li
35.4076 77.1977 li
35.8023 77.1977 li
36.197 77.1977 li
36.5917 77.1977 li
36.9864 77.1977 li
37.3811 77.1977 li
37.7758 77.1977 li
38.1705 77.1977 li
38.5652 77.1977 li
38.9599 77.1977 li
39.3545 77.1977 li
39.7492 77.1977 li
40.1439 77.1977 li
40.5386 77.1977 li
40.9333 77.1977 li
41.328 77.1977 li
41.7227 77.1977 li
42.1174 77.1977 li
42.5121 77.1977 li
42.9068 77.1977 li
43.3015 77.1977 li
43.6962 77.1977 li
44.0909 77.1977 li
44.4856 77.1977 li
44.8803 77.1977 li
45.275 77.1977 li
45.6697 77.1977 li
46.0644 77.1977 li
46.4591 77.1977 li
46.8538 77.1977 li
47.2484 77.1977 li
47.6431 77.1977 li
48.0378 77.1977 li
48.4325 77.1977 li
48.8272 77.1977 li
49.2219 77.1977 li
49.6166 77.1977 li
50.0113 77.1977 li
50.406 77.1977 li
50.8007 77.1977 li
51.1954 77.1977 li
51.5901 77.1977 li
51.9848 77.1977 li
52.3795 77.1977 li
52.7742 77.1977 li
53.1689 77.1977 li
53.5636 77.1977 li
53.9583 77.1977 li
54.353 77.1977 li
54.7476 77.1977 li
55.1423 77.1977 li
55.537 77.1977 li
55.9317 77.1977 li
56.3264 77.1977 li
56.7211 77.1977 li
57.1158 77.1977 li
57.5105 77.1977 li
57.9052 77.1977 li
58.2999 77.1977 li
58.6946 77.1977 li
59.0893 77.1977 li
59.484 77.1977 li
59.8787 77.1977 li
60.2734 77.1977 li
60.6681 77.1977 li
61.0628 77.1977 li
61.4575 77.1977 li
61.8522 77.1977 li
62.2468 77.1977 li
62.6415 77.1977 li
63.0362 77.1977 li
63.4309 77.1977 li
63.8256 77.1977 li
64.2203 77.1977 li
64.615 77.1977 li
65.0097 77.1977 li
65.4044 77.1977 li
65.7991 77.1977 li
66.1938 77.1977 li
66.5885 77.1977 li
66.9832 77.1977 li
67.3779 77.1977 li
67.7726 77.1977 li
68.1673 77.1977 li
68.562 77.1977 li
68.9567 77.1977 li
69.3514 77.1977 li
69.746 77.1977 li
70.1407 77.1977 li
70.5354 77.1977 li
70.9301 77.1977 li
71.3248 77.1977 li
71.7195 77.1977 li
72.1142 77.1977 li
72.5089 77.1977 li
72.9036 77.1977 li
73.2983 77.1977 li
73.693 77.1977 li
74.0877 77.1977 li
74.4824 77.1977 li
74.8771 77.1977 li
75.2718 77.1977 li
75.6665 77.1977 li
76.0612 77.1977 li
76.4559 77.1977 li
76.8506 77.1977 li
77.2453 77.1977 li
77.6399 77.1977 li
78.0346 77.1977 li
78.4293 77.1977 li
78.824 77.1977 li
79.2187 77.1977 li
79.6134 77.1977 li
80.0081 77.1977 li
80.4028 77.1977 li
80.7975 77.1977 li
81.1922 77.1977 li
81.5869 77.1977 li
81.9816 77.1977 li
82.3763 77.1977 li
82.771 77.1977 li
83.1657 77.1977 li
83.5604 77.1977 li
83.9551 77.1977 li
84.3498 77.1977 li
84.7445 77.1977 li
85.1391 77.1977 li
85.5338 77.1977 li
85.9285 77.1977 li
86.3232 77.1977 li
86.7179 77.1977 li
87.1126 77.1977 li
87.5073 77.1977 li
87.902 77.1977 li
88.2967 77.1977 li
88.6914 77.1977 li
89.0861 77.1977 li
89.4808 77.1977 li
89.8755 77.1977 li
90.2702 77.1977 li
90.6649 77.1977 li
91.0596 77.1977 li
91.4543 77.1977 li
91.849 77.1977 li
92.2437 77.1977 li
92.6384 77.1977 li
93.033 77.1977 li
93.4277 77.1977 li
93.8224 77.1977 li
94.2171 77.1977 li
94.6118 77.1977 li
95.0065 77.1977 li
95.4012 77.1977 li
95.7959 77.1977 li
96.1906 77.1977 li
96.5853 77.1977 li
96.98 77.1977 li
97.3747 77.1977 li
97.7694 77.1977 li
98.1641 77.1977 li
98.5588 77.1977 li
98.9535 77.1977 li
99.3482 77.1977 li
99.7429 77.1977 li
100.138 77.1977 li
100.532 77.1977 li
100.927 77.1977 li
101.322 77.1977 li
101.716 77.1977 li
102.111 77.1977 li
102.506 77.1977 li
102.9 77.1977 li
103.295 77.1977 li
103.69 77.1977 li
104.085 77.1977 li
104.479 77.1977 li
104.874 77.1977 li
105.269 77.1977 li
105.663 77.1977 li
106.058 77.1977 li
106.453 77.1977 li
106.847 77.1977 li
107.242 77.1977 li
107.637 77.1977 li
108.031 77.1977 li
108.426 77.1977 li
108.821 77.1977 li
109.216 77.1977 li
109.61 77.1977 li
110.005 77.1977 li
110.4 77.1977 li
110.794 77.1977 li
111.189 77.1977 li
111.584 77.1977 li
111.978 77.1977 li
112.373 77.1977 li
112.768 77.1977 li
113.162 77.1977 li
113.557 77.1977 li
113.952 77.1977 li
114.347 77.1977 li
114.741 77.1977 li
115.136 77.1977 li
115.531 77.1977 li
115.925 77.1977 li
116.32 77.1977 li
116.715 77.1977 li
117.109 77.1977 li
117.504 77.1977 li
117.899 77.1977 li
118.294 77.1977 li
118.688 77.1977 li
119.083 77.1977 li
119.478 77.1977 li
119.872 77.1977 li
120.267 77.1977 li
120.662 77.1977 li
121.056 77.1977 li
121.451 77.1977 li
121.846 77.1977 li
122.24 77.1977 li
122.635 77.1977 li
123.03 77.1977 li
123.425 77.1977 li
123.819 77.1977 li
124.214 77.1977 li
124.609 77.1977 li
125.003 77.1977 li
125.398 77.1976 li
125.793 77.1976 li
126.187 77.1976 li
126.582 77.1976 li
126.977 77.1976 li
127.371 77.1976 li
127.766 77.1975 li
128.161 77.1975 li
128.556 77.1974 li
128.95 77.1974 li
129.345 77.1973 li
129.74 77.1973 li
130.134 77.1972 li
130.529 77.1971 li
130.924 77.197 li
131.318 77.1969 li
131.713 77.1968 li
132.108 77.1966 li
132.503 77.1964 li
132.897 77.1962 li
133.292 77.196 li
133.687 77.1957 li
134.081 77.1954 li
134.476 77.195 li
134.871 77.1946 li
135.265 77.1941 li
135.66 77.1935 li
136.055 77.1929 li
136.449 77.1921 li
136.844 77.1913 li
137.239 77.1903 li
137.634 77.1893 li
138.028 77.188 li
138.423 77.1866 li
138.818 77.185 li
139.212 77.1833 li
139.607 77.1812 li
140.002 77.179 li
140.396 77.1764 li
140.791 77.1735 li
141.186 77.1703 li
141.581 77.1666 li
141.975 77.1626 li
142.37 77.158 li
142.765 77.1529 li
143.159 77.1473 li
143.554 77.141 li
143.949 77.1339 li
144.343 77.1261 li
144.738 77.1175 li
145.133 77.1079 li
145.527 77.0973 li
145.922 77.0856 li
146.317 77.0727 li
146.712 77.0585 li
147.106 77.0429 li
147.501 77.0258 li
147.896 77.007 li
148.29 76.9864 li
148.685 76.9639 li
149.08 76.9393 li
149.474 76.9125 li
149.869 76.8834 li
150.264 76.8517 li
150.658 76.8173 li
151.053 76.78 li
151.448 76.7396 li
151.843 76.696 li
152.237 76.649 li
152.632 76.5983 li
153.027 76.5437 li
153.421 76.4852 li
153.816 76.4223 li
154.211 76.3551 li
154.605 76.2831 li
155 76.2063 li
155.395 76.1244 li
155.79 76.0373 li
156.184 75.9447 li
156.579 75.8464 li
156.974 75.7423 li
157.368 75.6322 li
157.763 75.5159 li
158.158 75.3933 li
158.552 75.2643 li
158.947 75.1286 li
159.342 74.9864 li
159.736 74.8373 li
160.131 74.6815 li
160.526 74.5188 li
160.921 74.3493 li
161.315 74.1729 li
161.71 73.9897 li
162.105 73.7998 li
162.499 73.6033 li
162.894 73.4003 li
163.289 73.191 li
163.683 72.9755 li
164.078 72.7543 li
164.473 72.5274 li
164.868 72.2952 li
165.262 72.0581 li
165.657 71.8165 li
166.052 71.5707 li
166.446 71.3213 li
166.841 71.0687 li
167.236 70.8134 li
167.63 70.5561 li
168.025 70.2972 li
168.42 70.0375 li
168.814 69.7775 li
169.209 69.518 li
169.604 69.2596 li
169.999 69.0031 li
170.393 68.7491 li
170.788 68.4985 li
171.183 68.2519 li
171.577 68.0101 li
171.972 67.7739 li
172.367 67.5441 li
172.761 67.3214 li
173.156 67.1065 li
173.551 66.9001 li
173.945 66.7031 li
174.34 66.516 li
174.735 66.3395 li
175.13 66.1743 li
175.524 66.0209 li
175.919 65.88 li
176.314 65.752 li
176.708 65.6375 li
177.103 65.5367 li
177.498 65.4502 li
177.892 65.3783 li
178.287 65.3212 li
178.682 65.2792 li
179.077 65.2523 li
179.471 65.2408 li
179.866 65.2447 li
180.261 65.2638 li
180.655 65.2983 li
181.05 65.3479 li
181.445 65.4124 li
181.839 65.4917 li
182.234 65.5853 li
182.629 65.693 li
183.023 65.8144 li
183.418 65.9489 li
183.813 66.0961 li
184.208 66.2554 li
184.602 66.4264 li
184.997 66.6082 li
185.392 66.8004 li
185.786 67.0022 li
186.181 67.2129 li
186.576 67.4318 li
186.97 67.6582 li
187.365 67.8913 li
187.76 68.1303 li
188.154 68.3746 li
188.549 68.6233 li
188.944 68.8757 li
189.339 69.1311 li
189.733 69.3886 li
190.128 69.6477 li
190.523 69.9075 li
190.917 70.1674 li
191.312 70.4268 li
191.707 70.685 li
192.101 70.9413 li
192.496 71.1953 li
192.891 71.4464 li
193.286 71.6941 li
193.68 71.9378 li
194.075 72.1773 li
194.47 72.4119 li
194.864 72.6415 li
195.259 72.8656 li
195.654 73.084 li
196.048 73.2964 li
196.443 73.5026 li
196.838 73.7024 li
197.232 73.8956 li
197.627 74.0821 li
198.022 74.2619 li
198.417 74.4349 li
198.811 74.601 li
199.206 74.7603 li
199.601 74.9127 li
199.995 75.0583 li
200.39 75.1973 li
200.785 75.3296 li
201.179 75.4554 li
201.574 75.5748 li
201.969 75.688 li
202.364 75.7951 li
202.758 75.8963 li
203.153 75.9917 li
203.548 76.0815 li
203.942 76.166 li
204.337 76.2453 li
204.732 76.3197 li
205.126 76.3893 li
205.521 76.4543 li
205.916 76.515 li
206.31 76.5715 li
206.705 76.6241 li
207.1 76.6729 li
207.495 76.7182 li
207.889 76.7602 li
208.284 76.799 li
208.679 76.8348 li
209.073 76.8678 li
209.468 76.8982 li
209.863 76.9262 li
210.257 76.9519 li
210.652 76.9754 li
211.047 76.9969 li
211.441 77.0166 li
211.836 77.0345 li
212.231 77.0509 li
212.626 77.0658 li
213.02 77.0793 li
213.415 77.0916 li
213.81 77.1028 li
214.204 77.1128 li
214.599 77.1219 li
214.994 77.1301 li
215.388 77.1375 li
215.783 77.1442 li
216.178 77.1502 li
216.573 77.1555 li
216.967 77.1604 li
217.362 77.1647 li
217.757 77.1685 li
218.151 77.1719 li
218.546 77.175 li
218.941 77.1777 li
219.335 77.1801 li
219.73 77.1823 li
220.125 77.1842 li
220.519 77.1859 li
220.914 77.1873 li
221.309 77.1887 li
221.704 77.1898 li
222.098 77.1908 li
222.493 77.1917 li
222.888 77.1925 li
223.282 77.1932 li
223.677 77.1938 li
224.072 77.1943 li
224.466 77.1948 li
224.861 77.1952 li
225.256 77.1955 li
225.651 77.1958 li
226.045 77.1961 li
226.44 77.1963 li
226.835 77.1965 li
227.229 77.1967 li
227.624 77.1968 li
228.019 77.197 li
228.413 77.1971 li
228.808 77.1972 li
@
31.8553 77.1977 mo
32.25 77.1977 li
32.6447 77.1977 li
33.0394 77.1977 li
33.4341 77.1977 li
33.8288 77.1977 li
34.2235 77.1977 li
34.6182 77.1977 li
35.0129 77.1977 li
35.4076 77.1977 li
35.8023 77.1977 li
36.197 77.1977 li
36.5917 77.1977 li
36.9864 77.1977 li
37.3811 77.1977 li
37.7758 77.1977 li
38.1705 77.1977 li
38.5652 77.1977 li
38.9599 77.1977 li
39.3545 77.1977 li
39.7492 77.1977 li
40.1439 77.1977 li
40.5386 77.1977 li
40.9333 77.1977 li
41.328 77.1977 li
41.7227 77.1977 li
42.1174 77.1977 li
42.5121 77.1977 li
42.9068 77.1977 li
43.3015 77.1977 li
43.6962 77.1977 li
44.0909 77.1977 li
44.4856 77.1977 li
44.8803 77.1977 li
45.275 77.1977 li
45.6697 77.1977 li
46.0644 77.1977 li
46.4591 77.1977 li
46.8538 77.1977 li
47.2484 77.1977 li
47.6431 77.1977 li
48.0378 77.1977 li
48.4325 77.1977 li
48.8272 77.1977 li
49.2219 77.1977 li
49.6166 77.1977 li
50.0113 77.1977 li
50.406 77.1977 li
50.8007 77.1977 li
51.1954 77.1977 li
51.5901 77.1977 li
51.9848 77.1977 li
52.3795 77.1977 li
52.7742 77.1977 li
53.1689 77.1977 li
53.5636 77.1977 li
53.9583 77.1977 li
54.353 77.1977 li
54.7476 77.1977 li
55.1423 77.1977 li
55.537 77.1977 li
55.9317 77.1977 li
56.3264 77.1977 li
56.7211 77.1977 li
57.1158 77.1977 li
57.5105 77.1977 li
57.9052 77.1977 li
58.2999 77.1977 li
58.6946 77.1977 li
59.0893 77.1977 li
59.484 77.1977 li
59.8787 77.1977 li
60.2734 77.1977 li
60.6681 77.1977 li
61.0628 77.1977 li
61.4575 77.1977 li
61.8522 77.1977 li
62.2468 77.1977 li
62.6415 77.1977 li
63.0362 77.1977 li
63.4309 77.1977 li
63.8256 77.1977 li
64.2203 77.1977 li
64.615 77.1977 li
65.0097 77.1977 li
65.4044 77.1977 li
65.7991 77.1977 li
66.1938 77.1977 li
66.5885 77.1977 li
66.9832 77.1977 li
67.3779 77.1977 li
67.7726 77.1977 li
68.1673 77.1977 li
68.562 77.1977 li
68.9567 77.1977 li
69.3514 77.1977 li
69.746 77.1977 li
70.1407 77.1977 li
70.5354 77.1977 li
70.9301 77.1977 li
71.3248 77.1977 li
71.7195 77.1977 li
72.1142 77.1977 li
72.5089 77.1977 li
72.9036 77.1977 li
73.2983 77.1977 li
73.693 77.1977 li
74.0877 77.1977 li
74.4824 77.1977 li
74.8771 77.1977 li
75.2718 77.1977 li
75.6665 77.1977 li
76.0612 77.1977 li
76.4559 77.1977 li
76.8506 77.1977 li
77.2453 77.1977 li
77.6399 77.1977 li
78.0346 77.1977 li
78.4293 77.1977 li
78.824 77.1977 li
79.2187 77.1977 li
79.6134 77.1977 li
80.0081 77.1977 li
80.4028 77.1977 li
80.7975 77.1977 li
81.1922 77.1977 li
81.5869 77.1977 li
81.9816 77.1977 li
82.3763 77.1977 li
82.771 77.1977 li
83.1657 77.1977 li
83.5604 77.1977 li
83.9551 77.1977 li
84.3498 77.1977 li
84.7445 77.1977 li
85.1391 77.1977 li
85.5338 77.1977 li
85.9285 77.1977 li
86.3232 77.1977 li
86.7179 77.1977 li
87.1126 77.1977 li
87.5073 77.1977 li
87.902 77.1977 li
88.2967 77.1977 li
88.6914 77.1977 li
89.0861 77.1977 li
89.4808 77.1977 li
89.8755 77.1977 li
90.2702 77.1977 li
90.6649 77.1977 li
91.0596 77.1977 li
91.4543 77.1977 li
91.849 77.1977 li
92.2437 77.1977 li
92.6384 77.1977 li
93.033 77.1977 li
93.4277 77.1977 li
93.8224 77.1977 li
94.2171 77.1977 li
94.6118 77.1977 li
95.0065 77.1977 li
95.4012 77.1977 li
95.7959 77.1977 li
96.1906 77.1977 li
96.5853 77.1977 li
96.98 77.1977 li
97.3747 77.1977 li
97.7694 77.1977 li
98.1641 77.1977 li
98.5588 77.1977 li
98.9535 77.1977 li
99.3482 77.1977 li
99.7429 77.1977 li
100.138 77.1977 li
100.532 77.1977 li
100.927 77.1977 li
101.322 77.1977 li
101.716 77.1977 li
102.111 77.1977 li
102.506 77.1977 li
102.9 77.1977 li
103.295 77.1977 li
103.69 77.1977 li
104.085 77.1977 li
104.479 77.1977 li
104.874 77.1977 li
105.269 77.1977 li
105.663 77.1977 li
106.058 77.1977 li
106.453 77.1977 li
106.847 77.1977 li
107.242 77.1977 li
107.637 77.1977 li
108.031 77.1977 li
108.426 77.1977 li
108.821 77.1977 li
109.216 77.1977 li
109.61 77.1977 li
110.005 77.1977 li
110.4 77.1977 li
110.794 77.1977 li
111.189 77.1977 li
111.584 77.1977 li
111.978 77.1977 li
112.373 77.1977 li
112.768 77.1977 li
113.162 77.1977 li
113.557 77.1977 li
113.952 77.1977 li
114.347 77.1977 li
114.741 77.1977 li
115.136 77.1977 li
115.531 77.1977 li
115.925 77.1977 li
116.32 77.1977 li
116.715 77.1977 li
117.109 77.1977 li
117.504 77.1977 li
117.899 77.1977 li
118.294 77.1977 li
118.688 77.1977 li
119.083 77.1977 li
119.478 77.1977 li
119.872 77.1977 li
120.267 77.1977 li
120.662 77.1977 li
121.056 77.1977 li
121.451 77.1977 li
121.846 77.1977 li
122.24 77.1977 li
122.635 77.1977 li
123.03 77.1977 li
123.425 77.1977 li
123.819 77.1977 li
124.214 77.1977 li
124.609 77.1977 li
125.003 77.1977 li
125.398 77.1977 li
125.793 77.1977 li
126.187 77.1977 li
126.582 77.1977 li
126.977 77.1977 li
127.371 77.1977 li
127.766 77.1977 li
128.161 77.1977 li
128.556 77.1977 li
128.95 77.1977 li
129.345 77.1977 li
129.74 77.1977 li
130.134 77.1977 li
130.529 77.1977 li
130.924 77.1977 li
131.318 77.1977 li
131.713 77.1977 li
132.108 77.1977 li
132.503 77.1977 li
132.897 77.1977 li
133.292 77.1977 li
133.687 77.1977 li
134.081 77.1977 li
134.476 77.1977 li
134.871 77.1977 li
135.265 77.1977 li
135.66 77.1977 li
136.055 77.1977 li
136.449 77.1977 li
136.844 77.1977 li
137.239 77.1977 li
137.634 77.1977 li
138.028 77.1977 li
138.423 77.1977 li
138.818 77.1977 li
139.212 77.1977 li
139.607 77.1977 li
140.002 77.1977 li
140.396 77.1977 li
140.791 77.1977 li
141.186 77.1977 li
141.581 77.1977 li
141.975 77.1977 li
142.37 77.1977 li
142.765 77.1977 li
143.159 77.1977 li
143.554 77.1977 li
143.949 77.1977 li
144.343 77.1977 li
144.738 77.1977 li
145.133 77.1977 li
145.527 77.1977 li
145.922 77.1977 li
146.317 77.1977 li
146.712 77.1977 li
147.106 77.1977 li
147.501 77.1976 li
147.896 77.1976 li
148.29 77.1976 li
148.685 77.1976 li
149.08 77.1976 li
149.474 77.1975 li
149.869 77.1975 li
150.264 77.1975 li
150.658 77.1974 li
151.053 77.1974 li
151.448 77.1973 li
151.843 77.1972 li
152.237 77.1971 li
152.632 77.197 li
153.027 77.1969 li
153.421 77.1967 li
153.816 77.1965 li
154.211 77.1963 li
154.605 77.1961 li
155 77.1958 li
155.395 77.1955 li
155.79 77.1951 li
156.184 77.1947 li
156.579 77.1942 li
156.974 77.1936 li
157.368 77.1929 li
157.763 77.1921 li
158.158 77.1912 li
158.552 77.1901 li
158.947 77.1889 li
159.342 77.1875 li
159.736 77.1859 li
160.131 77.1841 li
160.526 77.182 li
160.921 77.1796 li
161.315 77.1769 li
161.71 77.1738 li
162.105 77.1702 li
162.499 77.1662 li
162.894 77.1617 li
163.289 77.1565 li
163.683 77.1507 li
164.078 77.1441 li
164.473 77.1366 li
164.868 77.1282 li
165.262 77.1188 li
165.657 77.1082 li
166.052 77.0963 li
166.446 77.0829 li
166.841 77.068 li
167.236 77.0513 li
167.63 77.0327 li
168.025 77.012 li
168.42 76.9889 li
168.814 76.9633 li
169.209 76.9348 li
169.604 76.9033 li
169.999 76.8684 li
170.393 76.8299 li
170.788 76.7874 li
171.183 76.7405 li
171.577 76.689 li
171.972 76.6324 li
172.367 76.5703 li
172.761 76.5022 li
173.156 76.4277 li
173.551 76.3464 li
173.945 76.2577 li
174.34 76.1611 li
174.735 76.0561 li
175.13 75.942 li
175.524 75.8182 li
175.919 75.6842 li
176.314 75.5394 li
176.708 75.383 li
177.103 75.2144 li
177.498 75.0329 li
177.892 74.8379 li
178.287 74.6286 li
178.682 74.4043 li
179.077 74.1644 li
179.471 73.908 li
179.866 73.6346 li
180.261 73.3435 li
180.655 73.0338 li
181.05 72.7051 li
181.445 72.3567 li
181.839 71.9879 li
182.234 71.5982 li
182.629 71.1872 li
183.023 70.7542 li
183.418 70.2989 li
183.813 69.821 li
184.208 69.32 li
184.602 68.7959 li
184.997 68.2483 li
185.392 67.6774 li
185.786 67.083 li
186.181 66.4653 li
186.576 65.8245 li
186.97 65.1609 li
187.365 64.475 li
187.76 63.7672 li
188.154 63.0383 li
188.549 62.289 li
188.944 61.5202 li
189.339 60.733 li
189.733 59.9284 li
190.128 59.1077 li
190.523 58.2724 li
190.917 57.424 li
191.312 56.5641 li
191.707 55.6944 li
192.101 54.8168 li
192.496 53.9333 li
192.891 53.0461 li
193.286 52.1572 li
193.68 51.2689 li
194.075 50.3836 li
194.47 49.5036 li
194.864 48.6315 li
195.259 47.7699 li
195.654 46.9211 li
196.048 46.0879 li
196.443 45.2728 li
196.838 44.4784 li
197.232 43.7073 li
197.627 42.9621 li
198.022 42.2452 li
198.417 41.5592 li
198.811 40.9064 li
199.206 40.289 li
199.601 39.7094 li
199.995 39.1696 li
200.39 38.6715 li
200.785 38.2171 li
201.179 37.8079 li
201.574 37.4456 li
201.969 37.1314 li
202.364 36.8667 li
202.758 36.6523 li
203.153 36.4892 li
203.548 36.3778 li
203.942 36.3188 li
204.337 36.3122 li
204.732 36.3581 li
205.126 36.4564 li
205.521 36.6067 li
205.916 36.8083 li
206.31 37.0606 li
206.705 37.3625 li
207.1 37.7129 li
207.495 38.1105 li
207.889 38.5537 li
208.284 39.0411 li
208.679 39.5706 li
209.073 40.1405 li
209.468 40.7486 li
209.863 41.3928 li
210.257 42.0707 li
210.652 42.7801 li
211.047 43.5185 li
211.441 44.2833 li
211.836 45.0721 li
212.231 45.8823 li
212.626 46.7112 li
213.02 47.5564 li
213.415 48.415 li
213.81 49.2848 li
214.204 50.163 li
214.599 51.0472 li
214.994 51.9349 li
215.388 52.8239 li
215.783 53.7118 li
216.178 54.5964 li
216.573 55.4756 li
216.967 56.3475 li
217.362 57.21 li
217.757 58.0615 li
218.151 58.9002 li
218.546 59.7247 li
218.941 60.5334 li
219.335 61.3251 li
219.73 62.0986 li
220.125 62.8529 li
220.519 63.587 li
220.914 64.3001 li
221.309 64.9915 li
221.704 65.6607 li
222.098 66.3072 li
222.493 66.9307 li
222.888 67.531 li
223.282 68.1078 li
223.677 68.6612 li
224.072 69.1912 li
224.466 69.6979 li
224.861 70.1816 li
225.256 70.6425 li
225.651 71.081 li
226.045 71.4975 li
226.44 71.8925 li
226.835 72.2664 li
227.229 72.6199 li
227.624 72.9535 li
228.019 73.2678 li
228.413 73.5635 li
228.808 73.8413 li
@
31.8553 77.1977 mo
32.25 77.1977 li
32.6447 77.1977 li
33.0394 77.1977 li
33.4341 77.1977 li
33.8288 77.1977 li
34.2235 77.1977 li
34.6182 77.1977 li
35.0129 77.1977 li
35.4076 77.1977 li
35.8023 77.1977 li
36.197 77.1977 li
36.5917 77.1977 li
36.9864 77.1977 li
37.3811 77.1977 li
37.7758 77.1977 li
38.1705 77.1977 li
38.5652 77.1977 li
38.9599 77.1977 li
39.3545 77.1977 li
39.7492 77.1977 li
40.1439 77.1977 li
40.5386 77.1977 li
40.9333 77.1977 li
41.328 77.1977 li
41.7227 77.1977 li
42.1174 77.1977 li
42.5121 77.1977 li
42.9068 77.1977 li
43.3015 77.1977 li
43.6962 77.1977 li
44.0909 77.1977 li
44.4856 77.1977 li
44.8803 77.1977 li
45.275 77.1977 li
45.6697 77.1977 li
46.0644 77.1977 li
46.4591 77.1977 li
46.8538 77.1977 li
47.2484 77.1977 li
47.6431 77.1977 li
48.0378 77.1977 li
48.4325 77.1977 li
48.8272 77.1977 li
49.2219 77.1977 li
49.6166 77.1977 li
50.0113 77.1977 li
50.406 77.1977 li
50.8007 77.1977 li
51.1954 77.1977 li
51.5901 77.1977 li
51.9848 77.1977 li
52.3795 77.1977 li
52.7742 77.1977 li
53.1689 77.1977 li
53.5636 77.1977 li
53.9583 77.1977 li
54.353 77.1977 li
54.7476 77.1977 li
55.1423 77.1977 li
55.537 77.1977 li
55.9317 77.1977 li
56.3264 77.1977 li
56.7211 77.1977 li
57.1158 77.1977 li
57.5105 77.1977 li
57.9052 77.1977 li
58.2999 77.1977 li
58.6946 77.1977 li
59.0893 77.1977 li
59.484 77.1977 li
59.8787 77.1977 li
60.2734 77.1977 li
60.6681 77.1977 li
61.0628 77.1977 li
61.4575 77.1977 li
61.8522 77.1977 li
62.2468 77.1977 li
62.6415 77.1977 li
63.0362 77.1977 li
63.4309 77.1977 li
63.8256 77.1977 li
64.2203 77.1977 li
64.615 77.1977 li
65.0097 77.1977 li
65.4044 77.1977 li
65.7991 77.1977 li
66.1938 77.1977 li
66.5885 77.1977 li
66.9832 77.1977 li
67.3779 77.1977 li
67.7726 77.1977 li
68.1673 77.1977 li
68.562 77.1977 li
68.9567 77.1977 li
69.3514 77.1977 li
69.746 77.1977 li
70.1407 77.1977 li
70.5354 77.1977 li
70.9301 77.1977 li
71.3248 77.1977 li
71.7195 77.1977 li
72.1142 77.1977 li
72.5089 77.1977 li
72.9036 77.1977 li
73.2983 77.1977 li
73.693 77.1977 li
74.0877 77.1977 li
74.4824 77.1977 li
74.8771 77.1977 li
75.2718 77.1977 li
75.6665 77.1977 li
76.0612 77.1977 li
76.4559 77.1977 li
76.8506 77.1977 li
77.2453 77.1977 li
77.6399 77.1977 li
78.0346 77.1977 li
78.4293 77.1977 li
78.824 77.1977 li
79.2187 77.1977 li
79.6134 77.1977 li
80.0081 77.1977 li
80.4028 77.1977 li
80.7975 77.1977 li
81.1922 77.1977 li
81.5869 77.1977 li
81.9816 77.1977 li
82.3763 77.1977 li
82.771 77.1977 li
83.1657 77.1977 li
83.5604 77.1977 li
83.9551 77.1977 li
84.3498 77.1977 li
84.7445 77.1977 li
85.1391 77.1977 li
85.5338 77.1977 li
85.9285 77.1977 li
86.3232 77.1977 li
86.7179 77.1977 li
87.1126 77.1977 li
87.5073 77.1977 li
87.902 77.1977 li
88.2967 77.1977 li
88.6914 77.1977 li
89.0861 77.1977 li
89.4808 77.1977 li
89.8755 77.1977 li
90.2702 77.1977 li
90.6649 77.1977 li
91.0596 77.1977 li
91.4543 77.1977 li
91.849 77.1977 li
92.2437 77.1977 li
92.6384 77.1977 li
93.033 77.1977 li
93.4277 77.1977 li
93.8224 77.1977 li
94.2171 77.1977 li
94.6118 77.1977 li
95.0065 77.1977 li
95.4012 77.1977 li
95.7959 77.1977 li
96.1906 77.1977 li
96.5853 77.1977 li
96.98 77.1977 li
97.3747 77.1977 li
97.7694 77.1977 li
98.1641 77.1977 li
98.5588 77.1977 li
98.9535 77.1977 li
99.3482 77.1977 li
99.7429 77.1977 li
100.138 77.1977 li
100.532 77.1977 li
100.927 77.1977 li
101.322 77.1977 li
101.716 77.1977 li
102.111 77.1977 li
102.506 77.1977 li
102.9 77.1977 li
103.295 77.1977 li
103.69 77.1977 li
104.085 77.1977 li
104.479 77.1977 li
104.874 77.1977 li
105.269 77.1977 li
105.663 77.1977 li
106.058 77.1977 li
106.453 77.1977 li
106.847 77.1977 li
107.242 77.1977 li
107.637 77.1977 li
108.031 77.1977 li
108.426 77.1977 li
108.821 77.1977 li
109.216 77.1977 li
109.61 77.1977 li
110.005 77.1977 li
110.4 77.1977 li
110.794 77.1977 li
111.189 77.1977 li
111.584 77.1977 li
111.978 77.1977 li
112.373 77.1977 li
112.768 77.1977 li
113.162 77.1977 li
113.557 77.1977 li
113.952 77.1977 li
114.347 77.1977 li
114.741 77.1977 li
115.136 77.1977 li
115.531 77.1977 li
115.925 77.1977 li
116.32 77.1977 li
116.715 77.1977 li
117.109 77.1977 li
117.504 77.1977 li
117.899 77.1977 li
118.294 77.1977 li
118.688 77.1977 li
119.083 77.1977 li
119.478 77.1977 li
119.872 77.1977 li
120.267 77.1977 li
120.662 77.1977 li
121.056 77.1977 li
121.451 77.1977 li
121.846 77.1977 li
122.24 77.1977 li
122.635 77.1977 li
123.03 77.1977 li
123.425 77.1977 li
123.819 77.1977 li
124.214 77.1977 li
124.609 77.1977 li
125.003 77.1977 li
125.398 77.1977 li
125.793 77.1977 li
126.187 77.1977 li
126.582 77.1977 li
126.977 77.1977 li
127.371 77.1977 li
127.766 77.1977 li
128.161 77.1977 li
128.556 77.1977 li
128.95 77.1977 li
129.345 77.1977 li
129.74 77.1977 li
130.134 77.1977 li
130.529 77.1977 li
130.924 77.1977 li
131.318 77.1977 li
131.713 77.1977 li
132.108 77.1977 li
132.503 77.1977 li
132.897 77.1977 li
133.292 77.1977 li
133.687 77.1977 li
134.081 77.1977 li
134.476 77.1977 li
134.871 77.1977 li
135.265 77.1977 li
135.66 77.1977 li
136.055 77.1977 li
136.449 77.1977 li
136.844 77.1977 li
137.239 77.1977 li
137.634 77.1977 li
138.028 77.1977 li
138.423 77.1977 li
138.818 77.1977 li
139.212 77.1977 li
139.607 77.1977 li
140.002 77.1977 li
140.396 77.1977 li
140.791 77.1977 li
141.186 77.1977 li
141.581 77.1977 li
141.975 77.1977 li
142.37 77.1977 li
142.765 77.1977 li
143.159 77.1977 li
143.554 77.1977 li
143.949 77.1977 li
144.343 77.1977 li
144.738 77.1977 li
145.133 77.1977 li
145.527 77.1977 li
145.922 77.1977 li
146.317 77.1977 li
146.712 77.1977 li
147.106 77.1977 li
147.501 77.1977 li
147.896 77.1977 li
148.29 77.1977 li
148.685 77.1977 li
149.08 77.1977 li
149.474 77.1977 li
149.869 77.1977 li
150.264 77.1977 li
150.658 77.1977 li
151.053 77.1977 li
151.448 77.1977 li
151.843 77.1977 li
152.237 77.1977 li
152.632 77.1977 li
153.027 77.1977 li
153.421 77.1977 li
153.816 77.1977 li
154.211 77.1977 li
154.605 77.1977 li
155 77.1977 li
155.395 77.1977 li
155.79 77.1977 li
156.184 77.1977 li
156.579 77.1977 li
156.974 77.1977 li
157.368 77.1977 li
157.763 77.1977 li
158.158 77.1977 li
158.552 77.1977 li
158.947 77.1977 li
159.342 77.1977 li
159.736 77.1977 li
160.131 77.1977 li
160.526 77.1977 li
160.921 77.1977 li
161.315 77.1977 li
161.71 77.1977 li
162.105 77.1977 li
162.499 77.1977 li
162.894 77.1977 li
163.289 77.1977 li
163.683 77.1977 li
164.078 77.1977 li
164.473 77.1977 li
164.868 77.1977 li
165.262 77.1977 li
165.657 77.1977 li
166.052 77.1977 li
166.446 77.1977 li
166.841 77.1977 li
167.236 77.1977 li
167.63 77.1977 li
168.025 77.1977 li
168.42 77.1977 li
168.814 77.1977 li
169.209 77.1977 li
169.604 77.1977 li
169.999 77.1977 li
170.393 77.1977 li
170.788 77.1977 li
171.183 77.1977 li
171.577 77.1977 li
171.972 77.1977 li
172.367 77.1977 li
172.761 77.1977 li
173.156 77.1977 li
173.551 77.1977 li
173.945 77.1977 li
174.34 77.1977 li
174.735 77.1977 li
175.13 77.1977 li
175.524 77.1977 li
175.919 77.1976 li
176.314 77.1976 li
176.708 77.1976 li
177.103 77.1976 li
177.498 77.1976 li
177.892 77.1976 li
178.287 77.1975 li
178.682 77.1975 li
179.077 77.1975 li
179.471 77.1974 li
179.866 77.1974 li
180.261 77.1973 li
180.655 77.1972 li
181.05 77.1971 li
181.445 77.197 li
181.839 77.1969 li
182.234 77.1968 li
182.629 77.1967 li
183.023 77.1965 li
183.418 77.1963 li
183.813 77.1961 li
184.208 77.1958 li
184.602 77.1955 li
184.997 77.1952 li
185.392 77.1948 li
185.786 77.1943 li
186.181 77.1938 li
186.576 77.1932 li
186.97 77.1926 li
187.365 77.1918 li
187.76 77.191 li
188.154 77.19 li
188.549 77.189 li
188.944 77.1878 li
189.339 77.1864 li
189.733 77.1848 li
190.128 77.1831 li
190.523 77.1811 li
190.917 77.179 li
191.312 77.1765 li
191.707 77.1738 li
192.101 77.1707 li
192.496 77.1673 li
192.891 77.1635 li
193.286 77.1593 li
193.68 77.1546 li
194.075 77.1494 li
194.47 77.1437 li
194.864 77.1373 li
195.259 77.1303 li
195.654 77.1226 li
196.048 77.1141 li
196.443 77.1047 li
196.838 77.0944 li
197.232 77.0832 li
197.627 77.0709 li
198.022 77.0574 li
198.417 77.0427 li
198.811 77.0267 li
199.206 77.0092 li
199.601 76.9903 li
199.995 76.9698 li
200.39 76.9475 li
200.785 76.9234 li
201.179 76.8974 li
201.574 76.8694 li
201.969 76.8391 li
202.364 76.8066 li
202.758 76.7718 li
203.153 76.7343 li
203.548 76.6943 li
203.942 76.6515 li
204.337 76.6058 li
204.732 76.5571 li
205.126 76.5053 li
205.521 76.4503 li
205.916 76.392 li
206.31 76.3302 li
206.705 76.2648 li
207.1 76.1959 li
207.495 76.1232 li
207.889 76.0467 li
208.284 75.9664 li
208.679 75.8821 li
209.073 75.7939 li
209.468 75.7017 li
209.863 75.6055 li
210.257 75.5053 li
210.652 75.401 li
211.047 75.2929 li
211.441 75.1807 li
211.836 75.0648 li
212.231 74.945 li
212.626 74.8216 li
213.02 74.6947 li
213.415 74.5643 li
213.81 74.4308 li
214.204 74.2942 li
214.599 74.1547 li
214.994 74.0127 li
215.388 73.8683 li
215.783 73.7218 li
216.178 73.5736 li
216.573 73.4238 li
216.967 73.273 li
217.362 73.1213 li
217.757 72.9693 li
218.151 72.8172 li
218.546 72.6654 li
218.941 72.5144 li
219.335 72.3646 li
219.73 72.2164 li
220.125 72.0703 li
220.519 71.9266 li
220.914 71.7859 li
221.309 71.6486 li
221.704 71.5151 li
222.098 71.3858 li
222.493 71.2613 li
222.888 71.1418 li
223.282 71.0279 li
223.677 70.92 li
224.072 70.8183 li
224.466 70.7233 li
224.861 70.6354 li
225.256 70.5547 li
225.651 70.4818 li
226.045 70.4167 li
226.44 70.3598 li
226.835 70.3113 li
227.229 70.2714 li
227.624 70.2402 li
228.019 70.2178 li
228.413 70.2043 li
228.808 70.1998 li
@
0 lc
[1 3 ] 0 dsh
31.8553 50.1958 mo
32.25 49.8488 li
32.6447 49.5074 li
33.0394 49.1707 li
33.4341 48.8374 li
33.8288 48.5064 li
34.2235 48.1765 li
34.6182 47.8462 li
35.0129 47.5142 li
35.4076 47.1792 li
35.8023 46.8396 li
36.197 46.4941 li
36.5917 46.1413 li
36.9864 45.7796 li
37.3811 45.4078 li
37.7758 45.0246 li
38.1705 44.6286 li
38.5652 44.2187 li
38.9599 43.7938 li
39.3545 43.3529 li
39.7492 42.8951 li
40.1439 42.4199 li
40.5386 41.9264 li
40.9333 41.4144 li
41.328 40.8835 li
41.7227 40.3337 li
42.1174 39.765 li
42.5121 39.1777 li
42.9068 38.5723 li
43.3015 37.9495 li
43.6962 37.3101 li
44.0909 36.6551 li
44.4856 35.9858 li
44.8803 35.3037 li
45.275 34.6103 li
45.6697 33.9074 li
46.0644 33.1971 li
46.4591 32.4813 li
46.8538 31.7625 li
47.2484 31.0429 li
47.6431 30.3252 li
48.0378 29.6119 li
48.4325 28.9058 li
48.8272 28.2095 li
49.2219 27.526 li
49.6166 26.8581 li
50.0113 26.2086 li
50.406 25.5803 li
50.8007 24.9762 li
51.1954 24.3989 li
51.5901 23.8512 li
51.9848 23.3356 li
52.3795 22.8545 li
52.7742 22.4104 li
53.1689 22.0055 li
53.5636 21.6416 li
53.9583 21.3208 li
54.353 21.0445 li
54.7476 20.8143 li
55.1423 20.6314 li
55.537 20.4967 li
55.9317 20.4109 li
56.3264 20.3746 li
56.7211 20.388 li
57.1158 20.451 li
57.5105 20.5635 li
57.9052 20.7249 li
58.2999 20.9344 li
58.6946 21.1911 li
59.0893 21.4938 li
59.484 21.8409 li
59.8787 22.2309 li
60.2734 22.6619 li
60.6681 23.1319 li
61.0628 23.6387 li
61.4575 24.18 li
61.8522 24.7532 li
62.2468 25.3558 li
62.6415 25.9851 li
63.0362 26.6385 li
63.4309 27.313 li
63.8256 28.006 li
64.2203 28.7145 li
64.615 29.4357 li
65.0097 30.1669 li
65.4044 30.9053 li
65.7991 31.6483 li
66.1938 32.3933 li
66.5885 33.1378 li
66.9832 33.8796 li
67.3779 34.6163 li
67.7726 35.346 li
68.1673 36.0668 li
68.562 36.777 li
68.9567 37.475 li
69.3514 38.1595 li
69.746 38.8294 li
70.1407 39.4836 li
70.5354 40.1216 li
70.9301 40.7426 li
71.3248 41.3465 li
71.7195 41.933 li
72.1142 42.5022 li
72.5089 43.0543 li
72.9036 43.5898 li
73.2983 44.1092 li
73.693 44.6134 li
74.0877 45.1032 li
74.4824 45.5796 li
74.8771 46.0439 li
75.2718 46.4974 li
75.6665 46.9414 li
76.0612 47.3775 li
76.4559 47.8072 li
76.8506 48.232 li
77.2453 48.6538 li
77.6399 49.0742 li
78.0346 49.4948 li
78.4293 49.9175 li
78.824 50.3439 li
79.2187 50.7756 li
79.6134 51.2144 li
80.0081 51.6617 li
80.4028 52.1192 li
80.7975 52.5882 li
81.1922 53.0702 li
81.5869 53.5663 li
81.9816 54.0779 li
82.3763 54.6058 li
82.771 55.1511 li
83.1657 55.7146 li
83.5604 56.297 li
83.9551 56.8988 li
84.3498 57.5206 li
84.7445 58.1625 li
85.1391 58.8249 li
85.5338 59.5077 li
85.9285 60.2108 li
86.3232 60.934 li
86.7179 61.6769 li
87.1126 62.439 li
87.5073 63.2198 li
87.902 64.0185 li
88.2967 64.8342 li
88.6914 65.666 li
89.0861 66.5128 li
89.4808 67.3733 li
89.8755 68.2464 li
90.2702 69.1307 li
90.6649 70.0246 li
91.0596 70.9267 li
91.4543 71.8353 li
91.849 72.7487 li
92.2437 73.6653 li
92.6384 74.5832 li
93.033 75.5006 li
93.4277 76.4156 li
93.8224 77.3262 li
94.2171 78.2306 li
94.6118 79.1267 li
95.0065 80.0126 li
95.4012 80.8862 li
95.7959 81.7456 li
96.1906 82.5888 li
96.5853 83.4137 li
96.98 84.2185 li
97.3747 85.0012 li
97.7694 85.7598 li
98.1641 86.4924 li
98.5588 87.1973 li
98.9535 87.8726 li
99.3482 88.5165 li
99.7429 89.1274 li
100.138 89.7037 li
100.532 90.2437 li
100.927 90.746 li
101.322 91.209 li
101.716 91.6316 li
102.111 92.0124 li
102.506 92.3503 li
102.9 92.6441 li
103.295 92.893 li
103.69 93.0959 li
104.085 93.2521 li
104.479 93.361 li
104.874 93.422 li
105.269 93.4345 li
105.663 93.3983 li
106.058 93.3132 li
106.453 93.1789 li
106.847 92.9955 li
107.242 92.7631 li
107.637 92.482 li
108.031 92.1525 li
108.426 91.7749 li
108.821 91.3501 li
109.216 90.8785 li
109.61 90.3611 li
110.005 89.7987 li
110.4 89.1925 li
110.794 88.5435 li
111.189 87.853 li
111.584 87.1224 li
111.978 86.3532 li
112.373 85.5469 li
112.768 84.7052 li
113.162 83.8299 li
113.557 82.9228 li
113.952 81.9859 li
114.347 81.0212 li
114.741 80.0309 li
115.136 79.017 li
115.531 77.9819 li
115.925 76.9278 li
116.32 75.8572 li
116.715 74.7725 li
117.109 73.6761 li
117.504 72.5706 li
117.899 71.4585 li
118.294 70.3425 li
118.688 69.2251 li
119.083 68.1089 li
119.478 66.9967 li
119.872 65.8909 li
120.267 64.7942 li
120.662 63.7093 li
121.056 62.6386 li
121.451 61.5848 li
121.846 60.5503 li
122.24 59.5376 li
122.635 58.5491 li
123.03 57.5871 li
123.425 56.6538 li
123.819 55.7514 li
124.214 54.882 li
124.609 54.0475 li
125.003 53.2498 li
125.398 52.4906 li
125.793 51.7716 li
126.187 51.0941 li
126.582 50.4595 li
126.977 49.8691 li
127.371 49.3239 li
127.766 48.8247 li
128.161 48.3722 li
128.556 47.9672 li
128.95 47.6099 li
129.345 47.3006 li
129.74 47.0393 li
130.134 46.8261 li
130.529 46.6605 li
130.924 46.5423 li
131.318 46.4707 li
131.713 46.4451 li
132.108 46.4646 li
132.503 46.5281 li
132.897 46.6344 li
133.292 46.7823 li
133.687 46.9703 li
134.081 47.1967 li
134.476 47.4601 li
134.871 47.7585 li
135.265 48.0901 li
135.66 48.453 li
136.055 48.8452 li
136.449 49.2646 li
136.844 49.7091 li
137.239 50.1766 li
137.634 50.6648 li
138.028 51.1717 li
138.423 51.695 li
138.818 52.2325 li
139.212 52.7822 li
139.607 53.3418 li
140.002 53.9093 li
140.396 54.4828 li
140.791 55.0601 li
141.186 55.6395 li
141.581 56.219 li
141.975 56.797 li
142.37 57.3718 li
142.765 57.9417 li
143.159 58.5053 li
143.554 59.0613 li
143.949 59.6083 li
144.343 60.1452 li
144.738 60.6709 li
145.133 61.1844 li
145.527 61.6849 li
145.922 62.1717 li
146.317 62.6439 li
146.712 63.1011 li
147.106 63.5429 li
147.501 63.9687 li
147.896 64.3784 li
148.29 64.7717 li
148.685 65.1485 li
149.08 65.5087 li
149.474 65.8524 li
149.869 66.1795 li
150.264 66.4902 li
150.658 66.7846 li
151.053 67.0631 li
151.448 67.3257 li
151.843 67.5728 li
152.237 67.8047 li
152.632 68.0216 li
153.027 68.224 li
153.421 68.4122 li
153.816 68.5865 li
154.211 68.7472 li
154.605 68.8947 li
155 69.0294 li
155.395 69.1515 li
155.79 69.2615 li
156.184 69.3595 li
156.579 69.4459 li
156.974 69.5209 li
157.368 69.5849 li
157.763 69.638 li
158.158 69.6805 li
158.552 69.7125 li
158.947 69.7343 li
159.342 69.7461 li
159.736 69.7479 li
160.131 69.74 li
160.526 69.7224 li
160.921 69.6954 li
161.315 69.659 li
161.71 69.6134 li
162.105 69.5586 li
162.499 69.4949 li
162.894 69.4223 li
163.289 69.341 li
163.683 69.2511 li
164.078 69.1528 li
164.473 69.0462 li
164.868 68.9315 li
165.262 68.809 li
165.657 68.6788 li
166.052 68.5412 li
166.446 68.3964 li
166.841 68.2447 li
167.236 68.0864 li
167.63 67.9218 li
168.025 67.7511 li
168.42 67.5748 li
168.814 67.3932 li
169.209 67.2067 li
169.604 67.0155 li
169.999 66.8202 li
170.393 66.6209 li
170.788 66.4183 li
171.183 66.2125 li
171.577 66.004 li
171.972 65.7931 li
172.367 65.5801 li
172.761 65.3654 li
173.156 65.1492 li
173.551 64.9318 li
173.945 64.7134 li
174.34 64.4941 li
174.735 64.2742 li
175.13 64.0538 li
175.524 63.8328 li
175.919 63.6112 li
176.314 63.3891 li
176.708 63.1663 li
177.103 62.9426 li
177.498 62.7177 li
177.892 62.4915 li
178.287 62.2635 li
178.682 62.0333 li
179.077 61.8006 li
179.471 61.5646 li
179.866 61.325 li
180.261 61.081 li
180.655 60.832 li
181.05 60.5773 li
181.445 60.3161 li
181.839 60.0477 li
182.234 59.7713 li
182.629 59.4861 li
183.023 59.1913 li
183.418 58.886 li
183.813 58.5695 li
184.208 58.2411 li
184.602 57.8999 li
184.997 57.5452 li
185.392 57.1764 li
185.786 56.793 li
186.181 56.3942 li
186.576 55.9798 li
186.97 55.5493 li
187.365 55.1024 li
187.76 54.6389 li
188.154 54.1589 li
188.549 53.6622 li
188.944 53.1492 li
189.339 52.62 li
189.733 52.0752 li
190.128 51.5152 li
190.523 50.9408 li
190.917 50.3528 li
191.312 49.7523 li
191.707 49.1402 li
192.101 48.518 li
192.496 47.8869 li
192.891 47.2485 li
193.286 46.6044 li
193.68 45.9565 li
194.075 45.3065 li
194.47 44.6565 li
194.864 44.0085 li
195.259 43.3647 li
195.654 42.7273 li
196.048 42.0986 li
196.443 41.4809 li
196.838 40.8765 li
197.232 40.2878 li
197.627 39.7171 li
198.022 39.1669 li
198.417 38.6395 li
198.811 38.137 li
199.206 37.6617 li
199.601 37.2157 li
199.995 36.8012 li
200.39 36.42 li
200.785 36.0739 li
201.179 35.7646 li
201.574 35.4938 li
201.969 35.2626 li
202.364 35.0726 li
202.758 34.9245 li
203.153 34.8194 li
203.548 34.758 li
203.942 34.7406 li
204.337 34.7677 li
204.732 34.8394 li
205.126 34.9555 li
205.521 35.1158 li
205.916 35.3197 li
206.31 35.5667 li
206.705 35.8559 li
207.1 36.1862 li
207.495 36.5564 li
207.889 36.9652 li
208.284 37.411 li
208.679 37.8921 li
209.073 38.4068 li
209.468 38.9531 li
209.863 39.529 li
210.257 40.1324 li
210.652 40.7611 li
211.047 41.4128 li
211.441 42.0852 li
211.836 42.776 li
212.231 43.4828 li
212.626 44.2033 li
213.02 44.935 li
213.415 45.6756 li
213.81 46.4229 li
214.204 47.1745 li
214.599 47.9284 li
214.994 48.6823 li
215.388 49.4343 li
215.783 50.1824 li
216.178 50.9247 li
216.573 51.6596 li
216.967 52.3854 li
217.362 53.1006 li
217.757 53.8039 li
218.151 54.4939 li
218.546 55.1697 li
218.941 55.8301 li
219.335 56.4744 li
219.73 57.1019 li
220.125 57.7119 li
220.519 58.304 li
220.914 58.8779 li
221.309 59.4333 li
221.704 59.9702 li
222.098 60.4885 li
222.493 60.9883 li
222.888 61.4699 li
223.282 61.9335 li
223.677 62.3795 li
224.072 62.8083 li
224.466 63.2206 li
224.861 63.6167 li
225.256 63.9973 li
225.651 64.3632 li
226.045 64.7149 li
226.44 65.0532 li
226.835 65.3789 li
227.229 65.6926 li
227.624 65.9951 li
228.019 66.2871 li
228.413 66.5695 li
228.808 66.8429 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: STYPMX+CMSY8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /STYPMX+CMSY8 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 0 /minus putdup 161 /minus putdef/UniqueID 5000818 def/FontBBox {-30 -955 1185 779} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 704] def/OtherBlues [-126 -118] def/BlueScale 0.0396249 def/StdHW [46] def/StdVW [89] def/StemSnapH [46 61] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B08A953C5C2645FEB08D0F605D4538696964B7A1C2728DEF7C170C67D122DB85A4226362FADE57C92E833FF0895D3F> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPC+CMSY8 /STYPMX+CMSY8 findfont ct_VMDictPut/PBVMPC+CMSY8*1 [161{/.notdef}rp /minus 94{/.notdef}rp]PBVMPC+CMSY8 nfPBVMPC+CMSY8*1 [7.97011 0 0 -7.97011 0 0 ]msf24.1308 114.928 mo(\241)shtrue set_gvm
%ADOBeginSubsetFont: BWWAAA+NimbusSanL-Regu Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /BWWAAA+NimbusSanL-Regu def/FontInfo 7 dict dup begin/Notice (Copyright \\050URW\\051++,Copyright 1999 by \\050URW\\051++ Design & Development) def/Weight (Regular) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdef/UniqueID 5020902 def/FontBBox {-174 -285 1001 953} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 0 524 544 729 749 686 709] def/BlueScale 0.0396249 def/StdHW [78] def/StdVW [85] def/StemSnapH [69 74 78 83] def/StemSnapV [78 85 94] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE99CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C577426BB5FA04F8E4DB> |-/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A897151E1AAB5D613DEBEA5766F929AE7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPD+NimbusSanL-Regu /BWWAAA+NimbusSanL-Regu findfont ct_VMDictPut/PBVMPD+NimbusSanL-Regu*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]PBVMPD+NimbusSanL-Regu nfPBVMPD+NimbusSanL-Regu*1 [7.97011 0 0 -7.97011 0 0 ]msf30.7173 114.928 mo(10)[4.42336 0 ]xshgsave
129.332 106.58 mo
130.332 106.58 li
130.332 101.58 li
129.332 101.58 li
cp
clp
0.5 lw
0 lc
129.832 106.08 mo
129.832 102.08 li
@
grestore
gsave
129.332 9.492 mo
130.332 9.492 li
130.332 4.492 li
129.332 4.492 li
cp
clp
0.5 lw
0 lc
129.832 8.992 mo
129.832 4.992 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: BWWAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPD+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F0077774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D409ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37AD180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CEAFDD358A2DD60445> |-/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F10FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E00493971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D3491A9F18F05171ED970B25AFE0F35A1> |-/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB35844C37D3215D325D86E3D5BDD66C6> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPD+NimbusSanL-Regu /Encoding getdup 83 /S putdup 97 /a putdup 99 /c putdup 101 /e putdup 112 /p putpop%ADOEndSubsetFont
reset_gvm
/PBVMPD+NimbusSanL-Regu*1 [48{/.notdef}rp /zero /one 33{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 10{/.notdef}rp /p 143{/.notdef}rp]PBVMPD+NimbusSanL-Regu nfPBVMPD+NimbusSanL-Regu*1 [7.97011 0 0 -7.97011 0 0 ]msf128.116 115.615 mo(0)sh224.377 115.615 mo(10)[4.42336 0 ]xshPBVMPD+NimbusSanL-Regu*1 [9.96264 0 0 -9.96264 0 0 ]msf116.21 125.919 mo(Space)[6.63512 5.52919 5.52919 4.98132 0 ]xshPBVMPC+CMSY8*1 [7.97011 0 0 -7.97011 0 0 ]msf16.8375 108.089 mo(\241)shPBVMPD+NimbusSanL-Regu*1 [7.97011 0 0 -7.97011 0 0 ]msf23.424 108.089 mo(1)shgsave
31.3553 77.1977 mo
36.3553 77.1977 li
36.3553 76.1977 li
31.3553 76.1977 li
cp
clp
0.5 lw
0 lc
31.8553 76.6977 mo
35.8553 76.6977 li
@
grestore
gsave
224.308 77.1977 mo
229.308 77.1977 li
229.308 76.1977 li
224.308 76.1977 li
cp
clp
0.5 lw
0 lc
224.808 76.6977 mo
228.808 76.6977 li
@
grestore
PBVMPD+NimbusSanL-Regu*1 [7.97011 0 0 -7.97011 0 0 ]msf23.424 79.8936 mo(0)shgsave
31.3553 48.3154 mo
36.3553 48.3154 li
36.3553 47.3154 li
31.3553 47.3154 li
cp
clp
0.5 lw
0 lc
31.8553 47.8154 mo
35.8553 47.8154 li
@
grestore
gsave
224.308 48.3154 mo
229.308 48.3154 li
229.308 47.3154 li
224.308 47.3154 li
cp
clp
0.5 lw
0 lc
224.808 47.8154 mo
228.808 47.8154 li
@
grestore
PBVMPD+NimbusSanL-Regu*1 [7.97011 0 0 -7.97011 0 0 ]msf23.424 51.1548 mo(1)shgsave
31.3553 19.4331 mo
36.3553 19.4331 li
36.3553 18.4331 li
31.3553 18.4331 li
cp
clp
0.5 lw
0 lc
31.8553 18.9331 mo
35.8553 18.9331 li
@
grestore
gsave
224.308 19.4331 mo
229.308 19.4331 li
229.308 18.4331 li
224.308 18.4331 li
cp
clp
0.5 lw
0 lc
224.808 18.9331 mo
228.808 18.9331 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: BWWAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPD+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C131F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C63EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0CCC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8319F> |-/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F882286BFB8558FFDC99835F6318B6ABFB469C2D564BB0F5E9BE77FB785FF0A01ACB21DC4B97A4A57F1F7492892F8DC448ACB9AF11A554513DBE4F7C862B67B87DD442F1A03C816B99> |-/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5AE45> |-/m <1C60D8A8C9B6B41CC78139463B68644DCA5BB8E2028C7CA1E86B33F066639DA3F35B7DDFE45432E7A2C574E1841C4747E57802803B51CE345923194466C5EF852CDD93A3C40922D4091C6271210E8853C875458B992514FC458C505AB921A870117BEFC5032EC52C5C0B4ED8E033C8825C6A79E135F4917A84EDE1A42949055FF22F7EA5E707733E7E37910C34363FBCB83155DB7DD17CDFF4D96A4E9E85EF09E79030FA> |-/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F7493B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F7618907B9B683BB76BFDF41C37F54548> |-/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AADD14AD49EE> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPD+NimbusSanL-Regu /Encoding getdup 50 /two putdup 65 /A putdup 100 /d putdup 105 /i putdup 108 /l putdup 109 /m putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
reset_gvm
/PBVMPD+NimbusSanL-Regu*1 [48{/.notdef}rp /zero /one /two 14{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 2{/.notdef}rp /p 3{/.notdef}rp /t /u 138{/.notdef}rp]PBVMPD+NimbusSanL-Regu nfPBVMPD+NimbusSanL-Regu*1 [7.97011 0 0 -7.97011 0 0 ]msf23.424 22.2725 mo(2)shPBVMPD+NimbusSanL-Regu*1 [0 -9.96264 -9.96264 0 0 0 ]msf9.71552 77.6827 mo(Amplitude)[-6.63512 -8.28892 -5.5292 -2.20167 -2.20168 -2.75958 -5.52919 -5.52919 0 ]ysh31.8553 106.08 mo
228.808 106.08 li
228.808 4.992 li
31.8553 4.992 li
31.8553 106.08 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/PBVMPD+NimbusSanL-Regu*1 uf/PBVMPD+NimbusSanL-Regu uf/BWWAAA+NimbusSanL-Regu uf/PBVMPC+CMSY8*1 uf/PBVMPC+CMSY8 uf/STYPMX+CMSY8 ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
