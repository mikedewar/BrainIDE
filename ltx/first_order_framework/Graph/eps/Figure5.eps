%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: SensorBasisObsFrequencyResponse.pdf
%%Creator: Adobe Acrobat 8.0
%%For: andrew
%%CreationDate: 1/7/10, 15:06:36
%%BoundingBox: 0 0 492 148
%%HiResBoundingBox: 0 0 492 148
%%CropBox: 0 0 492 148
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 3374 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreateDate="2010-06-24T21:27:32+01:00"
   xap:CreatorTool="matplotlib 0.91.2, http://matplotlib.sf.net"
   xap:ModifyDate="2010-07-01T15:06:04+01:00"
   xap:MetadataDate="2010-07-01T15:06:04+01:00"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:b0c3e9d7-15ac-4e4d-9480-2e991fa9c9a7"
   xapMM:InstanceID="uuid:64513a83-ecf4-2640-a5ea-dfdbb2bd6c04"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -148 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 148 li
492 148 li
492 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2 146 mo
489.757 146 li
489.757 2 li
2 2 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
1 gry
f
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
2 146 mo
489.757 146 li
489.757 2 li
2 2 li
cp
@
219.052 122.96 mo
325.534 122.96 li
325.534 23.6 li
219.052 23.6 li
cp
f
219.052 122.96 mo
325.534 122.96 li
325.534 23.6 li
219.052 23.6 li
cp
0 gry
@
gsave
219.052 122.96 mo
325.534 122.96 li
325.534 23.6 li
219.052 23.6 li
cp
clp
0 lc
[6 6 ] 0 dsh
231.642 122.96 mo
231.642 27.818 li
@
219.052 27.8213 mo
231.642 27.8213 li
@
2 lc
[] 0 dsh
219.052 25.3373 mo
219.265 25.3383 li
219.479 25.3403 li
219.692 25.3433 li
219.906 25.3483 li
220.119 25.3553 li
220.332 25.3633 li
220.546 25.3723 li
220.759 25.3833 li
220.973 25.3953 li
221.186 25.4083 li
221.399 25.4233 li
221.613 25.4403 li
221.826 25.4573 li
222.039 25.4773 li
222.253 25.4973 li
222.466 25.5193 li
222.68 25.5433 li
222.893 25.5683 li
223.106 25.5943 li
223.32 25.6223 li
223.533 25.6513 li
223.747 25.6823 li
223.96 25.7143 li
224.173 25.7473 li
224.387 25.7823 li
224.6 25.8193 li
224.814 25.8573 li
225.027 25.8963 li
225.24 25.9363 li
225.454 25.9783 li
225.667 26.0223 li
225.881 26.0673 li
226.094 26.1133 li
226.307 26.1613 li
226.521 26.2103 li
226.734 26.2613 li
226.947 26.3133 li
227.161 26.3663 li
227.374 26.4213 li
227.588 26.4773 li
227.801 26.5353 li
228.014 26.5943 li
228.228 26.6553 li
228.441 26.7173 li
228.655 26.7803 li
228.868 26.8453 li
229.081 26.9113 li
229.295 26.9793 li
229.508 27.0483 li
229.722 27.1193 li
229.935 27.1913 li
230.148 27.2643 li
230.362 27.3393 li
230.575 27.4153 li
230.789 27.4933 li
231.002 27.5723 li
231.215 27.6523 li
231.429 27.7343 li
231.642 27.8183 li
231.855 27.9033 li
232.069 27.9893 li
232.282 28.0763 li
232.496 28.1663 li
232.709 28.2563 li
232.922 28.3483 li
233.136 28.4413 li
233.349 28.5363 li
233.563 28.6323 li
233.776 28.7303 li
233.989 28.8293 li
234.203 28.9303 li
234.416 29.0313 li
234.63 29.1353 li
234.843 29.2403 li
235.056 29.3463 li
235.27 29.4533 li
235.483 29.5623 li
235.697 29.6733 li
235.91 29.7853 li
236.123 29.8983 li
236.337 30.0133 li
236.55 30.1293 li
236.763 30.2473 li
236.977 30.3663 li
237.19 30.4863 li
237.404 30.6083 li
237.617 30.7313 li
237.83 30.8563 li
238.044 30.9823 li
238.257 31.1103 li
238.471 31.2393 li
238.684 31.3693 li
238.897 31.5013 li
239.111 31.6343 li
239.324 31.7693 li
239.538 31.9053 li
239.751 32.0423 li
239.964 32.1813 li
240.178 32.3223 li
240.391 32.4643 li
240.604 32.6073 li
240.818 32.7523 li
241.031 32.8983 li
241.245 33.0453 li
241.458 33.1943 li
241.671 33.3443 li
241.885 33.4963 li
242.098 33.6493 li
242.312 33.8043 li
242.525 33.9603 li
242.738 34.1183 li
242.952 34.2773 li
243.165 34.4373 li
243.379 34.5993 li
243.592 34.7623 li
243.805 34.9273 li
244.019 35.0933 li
244.232 35.2603 li
244.446 35.4293 li
244.659 35.5993 li
244.872 35.7713 li
245.086 35.9443 li
245.299 36.1193 li
245.512 36.2953 li
245.726 36.4723 li
245.939 36.6513 li
246.153 36.8323 li
246.366 37.0133 li
246.579 37.1963 li
246.793 37.3813 li
247.006 37.5673 li
247.22 37.7543 li
247.433 37.9433 li
247.646 38.1343 li
247.86 38.3253 li
248.073 38.5183 li
248.287 38.7133 li
248.5 38.9093 li
248.713 39.1063 li
248.927 39.3053 li
249.14 39.5053 li
249.354 39.7073 li
249.567 39.9103 li
249.78 40.1153 li
249.994 40.3213 li
250.207 40.5283 li
250.42 40.7373 li
250.634 40.9473 li
250.847 41.1593 li
251.061 41.3723 li
251.274 41.5863 li
251.487 41.8023 li
251.701 42.0203 li
251.914 42.2383 li
252.128 42.4593 li
252.341 42.6803 li
252.554 42.9033 li
252.768 43.1283 li
252.981 43.3543 li
253.195 43.5813 li
253.408 43.8103 li
253.621 44.0403 li
253.835 44.2723 li
254.048 44.5053 li
254.262 44.7393 li
254.475 44.9753 li
254.688 45.2123 li
254.902 45.4513 li
255.115 45.6913 li
255.328 45.9333 li
255.542 46.1763 li
255.755 46.4203 li
255.969 46.6663 li
256.182 46.9143 li
256.395 47.1623 li
256.609 47.4123 li
256.822 47.6643 li
257.036 47.9173 li
257.249 48.1713 li
257.462 48.4273 li
257.676 48.6853 li
257.889 48.9433 li
258.103 49.2033 li
258.316 49.4653 li
258.529 49.7283 li
258.743 49.9923 li
258.956 50.2583 li
259.17 50.5253 li
259.383 50.7943 li
259.596 51.0643 li
259.81 51.3363 li
260.023 51.6093 li
260.236 51.8833 li
260.45 52.1593 li
260.663 52.4363 li
260.877 52.7153 li
261.09 52.9953 li
261.303 53.2763 li
261.517 53.5593 li
261.73 53.8433 li
261.944 54.1293 li
262.157 54.4163 li
262.37 54.7053 li
262.584 54.9953 li
262.797 55.2873 li
263.011 55.5803 li
263.224 55.8743 li
263.437 56.1703 li
263.651 56.4673 li
263.864 56.7653 li
264.078 57.0653 li
264.291 57.3673 li
264.504 57.6703 li
264.718 57.9743 li
264.931 58.2803 li
265.144 58.5873 li
265.358 58.8963 li
265.571 59.2063 li
265.785 59.5173 li
265.998 59.8303 li
266.211 60.1443 li
266.425 60.4603 li
266.638 60.7773 li
266.852 61.0953 li
267.065 61.4153 li
267.278 61.7373 li
267.492 62.0603 li
267.705 62.3843 li
267.919 62.7103 li
268.132 63.0373 li
268.345 63.3653 li
268.559 63.6953 li
268.772 64.0273 li
268.986 64.3593 li
269.199 64.6943 li
269.412 65.0293 li
269.626 65.3663 li
269.839 65.7053 li
270.052 66.0453 li
270.266 66.3863 li
270.479 66.7293 li
270.693 67.0733 li
270.906 67.4193 li
271.119 67.7663 li
271.333 68.1153 li
271.546 68.4643 li
271.76 68.8163 li
271.973 69.1693 li
272.186 69.5233 li
272.4 69.8783 li
272.613 70.2353 li
272.827 70.5943 li
273.04 70.9543 li
273.253 71.3153 li
273.467 71.6783 li
273.68 72.0423 li
273.893 72.4083 li
274.107 72.7753 li
274.32 73.1433 li
274.534 73.5133 li
274.747 73.8843 li
274.96 74.2573 li
275.174 74.6313 li
275.387 75.0073 li
275.601 75.3843 li
275.814 75.7623 li
276.027 76.1423 li
276.241 76.5233 li
276.454 76.9063 li
276.668 77.2903 li
276.881 77.6763 li
277.094 78.0633 li
277.308 78.4513 li
277.521 78.8413 li
277.735 79.2323 li
277.948 79.6253 li
278.161 80.0193 li
278.375 80.4143 li
278.588 80.8113 li
278.801 81.2103 li
279.015 81.6093 li
279.228 82.0113 li
279.442 82.4133 li
279.655 82.8173 li
279.868 83.2233 li
280.082 83.6303 li
280.295 84.0383 li
280.509 84.4483 li
280.722 84.8593 li
280.935 85.2723 li
281.149 85.6863 li
281.362 86.1013 li
281.576 86.5183 li
281.789 86.9373 li
282.002 87.3563 li
282.216 87.7783 li
282.429 88.2003 li
282.643 88.6243 li
282.856 89.0503 li
283.069 89.4773 li
283.283 89.9053 li
283.496 90.3353 li
283.709 90.7663 li
283.923 91.1983 li
284.136 91.6323 li
284.35 92.0683 li
284.563 92.5053 li
284.776 92.9433 li
284.99 93.3833 li
285.203 93.8243 li
285.417 94.2663 li
285.63 94.7103 li
285.843 95.1563 li
286.057 95.6033 li
286.27 96.0513 li
286.484 96.5013 li
286.697 96.9523 li
286.91 97.4043 li
287.124 97.8583 li
287.337 98.3143 li
287.551 98.7703 li
287.764 99.2293 li
287.977 99.6883 li
288.191 100.149 li
288.404 100.612 li
288.617 101.076 li
288.831 101.541 li
289.044 102.008 li
289.258 102.476 li
289.471 102.946 li
289.684 103.417 li
289.898 103.889 li
290.111 104.363 li
290.325 104.839 li
290.538 105.315 li
290.751 105.794 li
290.965 106.273 li
291.178 106.754 li
291.392 107.237 li
291.605 107.721 li
291.818 108.206 li
292.032 108.693 li
292.245 109.181 li
292.459 109.671 li
292.672 110.162 li
292.885 110.654 li
293.099 111.148 li
293.312 111.643 li
293.525 112.14 li
293.739 112.638 li
293.952 113.138 li
294.166 113.639 li
294.379 114.141 li
294.592 114.645 li
294.806 115.15 li
295.019 115.657 li
295.233 116.165 li
295.446 116.675 li
295.659 117.186 li
295.873 117.698 li
296.086 118.212 li
296.3 118.727 li
296.513 119.244 li
296.726 119.762 li
296.94 120.281 li
297.153 120.802 li
297.367 121.325 li
297.58 121.848 li
297.793 122.374 li
298.007 122.9 li
298.22 123.428 li
298.433 123.958 li
298.647 124.489 li
298.86 125.021 li
299.074 125.555 li
299.287 126.09 li
299.5 126.627 li
299.714 127.165 li
299.927 127.704 li
300.141 128.245 li
300.354 128.788 li
300.567 129.331 li
300.781 129.877 li
300.994 130.423 li
301.208 130.971 li
301.421 131.521 li
301.634 132.072 li
301.848 132.624 li
302.061 133.178 li
302.275 133.733 li
302.488 134.289 li
302.701 134.847 li
302.915 135.407 li
303.128 135.968 li
303.341 136.53 li
303.555 137.094 li
303.768 137.659 li
303.982 138.225 li
304.195 138.793 li
304.408 139.363 li
304.622 139.934 li
304.835 140.506 li
305.049 141.08 li
305.262 141.655 li
305.475 142.231 li
305.689 142.809 li
305.902 143.389 li
306.116 143.969 li
306.329 144.552 li
306.542 145.135 li
306.756 145.72 li
306.969 146.307 li
307.182 146.895 li
307.396 147.484 li
307.609 148.075 li
307.823 148.667 li
308.036 149.261 li
308.249 149.856 li
308.463 150.453 li
308.676 151.05 li
308.89 151.65 li
309.103 152.251 li
309.316 152.853 li
309.53 153.456 li
309.743 154.061 li
309.957 154.668 li
310.17 155.276 li
310.383 155.885 li
310.597 156.496 li
310.81 157.108 li
311.024 157.722 li
311.237 158.337 li
311.45 158.953 li
311.664 159.571 li
311.877 160.19 li
312.09 160.811 li
312.304 161.433 li
312.517 162.057 li
312.731 162.682 li
312.944 163.308 li
313.157 163.936 li
313.371 164.565 li
313.584 165.196 li
313.798 165.828 li
314.011 166.462 li
314.224 167.097 li
314.438 167.733 li
314.651 168.371 li
314.865 169.01 li
315.078 169.651 li
315.291 170.293 li
315.505 170.937 li
315.718 171.582 li
315.932 172.228 li
316.145 172.876 li
316.358 173.525 li
316.572 174.176 li
316.785 174.828 li
316.998 175.481 li
317.212 176.136 li
317.425 176.793 li
317.639 177.45 li
317.852 178.11 li
318.065 178.77 li
318.279 179.432 li
318.492 180.096 li
318.706 180.761 li
318.919 181.427 li
319.132 182.095 li
319.346 182.764 li
319.559 183.435 li
319.773 184.107 li
319.986 184.78 li
320.199 185.455 li
320.413 186.131 li
320.626 186.809 li
320.84 187.488 li
321.053 188.169 li
321.266 188.851 li
321.48 189.534 li
321.693 190.219 li
321.906 190.905 li
322.12 191.593 li
322.333 192.282 li
322.547 192.973 li
322.76 193.665 li
322.973 194.358 li
323.187 195.053 li
323.4 195.749 li
323.614 196.447 li
323.827 197.146 li
324.04 197.847 li
324.254 198.549 li
324.467 199.252 li
324.681 199.957 li
324.894 200.663 li
325.107 201.371 li
325.321 202.08 li
325.534 202.79 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /NOGAAA+NimbusSanL-Regu def/FontInfo 7 dict dup begin/Notice (Copyright \\050URW\\051++,Copyright 1999 by \\050URW\\051++ Design & Development) def/Weight (Regular) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdef/UniqueID 5020902 def/FontBBox {-174 -285 1001 953} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 0 524 544 729 749 686 709] def/BlueScale 0.0396249 def/StdHW [78] def/StdVW [85] def/StemSnapH [69 74 78 83] def/StemSnapV [78 85 94] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE99CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C577426BB5FA04F8E4DB> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu /NOGAAA+NimbusSanL-Regu findfont ct_VMDictPut/PBVMPT+NimbusSanL-Regu*1 [46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf213.513 132.495 mo(0.0)[4.42329 2.20763 0 ]xshgsave
271.293 123.46 mo
272.293 123.46 li
272.293 118.46 li
271.293 118.46 li
cp
clp
271.793 122.96 mo
271.793 118.96 li
@
grestore
gsave
271.293 28.1 mo
272.293 28.1 li
272.293 23.1 li
271.293 23.1 li
cp
clp
271.793 27.6 mo
271.793 23.6 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPT+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A897151E1AAB5D613DEBEA5766F929AE7> |-/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B35143997141C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E31F3559988F254DAAC1F1AB8281F76> |-/H <1C60D8A8C9B6079F1E4952376D4581366636A6F2021940B707EDEA571DC6ABE0FB549193DC07876B02876B570C4E8DB38E1ED598341CFB3C83BAC587F34EA3C7CDE14BFD64909CFC7BE7164548353E044D4BCB4820652C4DB9ECD632E5D535A1AB8C7BE1E194> |-/z <1C60D8A8C9B7A73DC507CAD0E5DFE643D31A4E6B11FABD4208D5037743204B31FEF10DBD97DC6225A0AD01031FB41D73CCE7> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPT+NimbusSanL-Regu /Encoding getdup 49 /one putdup 53 /five putdup 72 /H putdup 122 /z putpop%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu*1 [46{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five 18{/.notdef}rp /H 49{/.notdef}rp /z 133{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf266.754 132.495 mo(0.5)[4.42328 2.20764 0 ]xsh319.995 132.495 mo(1.0)[4.42328 2.20764 0 ]xshPBVMPT+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf266.206 144.737 mo(Hz)[7.18326 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: OIHRMX+CMSY8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /OIHRMX+CMSY8 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 0 /minus putdup 161 /minus putdef/UniqueID 5000818 def/FontBBox {-30 -955 1185 779} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 704] def/OtherBlues [-126 -118] def/BlueScale 0.0396249 def/StdHW [46] def/StdVW [89] def/StemSnapH [46 61] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B08A953C5C2645FEB08D0F605D4538696964B7A1C2728DEF7C170C67D122DB85A4226362FADE57C92E833FF0895D3F> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPU+CMSY8 /OIHRMX+CMSY8 findfont ct_VMDictPut/PBVMPU+CMSY8*1 [161{/.notdef}rp /minus 94{/.notdef}rp]PBVMPU+CMSY8 nfPBVMPU+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf195.172 124.969 mo(\241)shPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf201.755 124.969 mo(100)[4.42329 4.42329 0 ]xshgsave
218.552 89.84 mo
223.552 89.84 li
223.552 88.84 li
218.552 88.84 li
cp
clp
219.052 89.34 mo
223.052 89.34 li
@
grestore
gsave
321.034 89.84 mo
326.034 89.84 li
326.034 88.84 li
321.034 88.84 li
cp
clp
321.534 89.34 mo
325.534 89.34 li
@
grestore
PBVMPU+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf199.603 91.849 mo(\241)shtrue set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPT+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F9576032E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F07261FF3C441AA69FD4> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPT+NimbusSanL-Regu /Encoding getdup 54 /six putpop%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu*1 [46{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five /six 17{/.notdef}rp /H 49{/.notdef}rp /z 133{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf206.186 91.849 mo(60)[4.42329 0 ]xshgsave
218.552 56.72 mo
223.552 56.72 li
223.552 55.72 li
218.552 55.72 li
cp
clp
219.052 56.22 mo
223.052 56.22 li
@
grestore
gsave
321.034 56.72 mo
326.034 56.72 li
326.034 55.72 li
321.034 55.72 li
cp
clp
321.534 56.22 mo
325.534 56.22 li
@
grestore
PBVMPU+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf199.603 58.729 mo(\241)shtrue set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPT+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C131F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C63EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0CCC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPT+NimbusSanL-Regu /Encoding getdup 50 /two putpop%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /six 17{/.notdef}rp /H 49{/.notdef}rp /z 133{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf206.186 58.729 mo(20)[4.42329 0 ]xsh206.19 26.296 mo(20)[4.42329 0 ]xsh219.052 122.96 mo
325.534 122.96 li
325.534 23.6 li
219.052 23.6 li
219.052 122.96 li
@
true set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPT+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C34BC1722FEFB37BB58C35B527AE6A09491FA40D7E8E5CDDF40B1FA04CF4C0C7382C2F861C47E3D9F31951A352479B61220DAE3010153555D> |-/parenright <1C60D8A8C9B81F2C34BC1722DDC8F1B2A5255D3125BF196E18CC504ED91C8305BA71730C40B22B521DE97A022B4A559586A56D21ED89F0FFA70036F1C6B28C3F> |-/B <1C60D8A8C9B64EDF8862D7741422B35DDD963797F577F66A64697F7272AAE0B6264ACD14181E5F10E4FB0514D6221FE5FAC758C7522BB31C58F1CFA62FEAB298AC88BCB0ABBC0C7AE7457D34C5849B2B2A97077BAE7F25A07EADAC5FC12790407A6AF84D856082C55B9BBC3CB54627BBA20011301E4CCA064CABD12DD2C3703CD52014EEA9DC5B2F2392CED1F890926BDF04A6C3F612BEA9E943B7AD0869A984C8976A9B268EFF958A411E3CC5326CE6ACCEB18F2EB1B99D9198AD1603C5F4DAD6E642E2D4BA50B6D9D677AF975761BF5F50BDC379E2C127D9> |-/P <1C60D8A8C9B64EDF88209F7A97EBCA021BD485E107F2B7F48F28A615216ABC23146CC805D621E6F303BD17890284CBC7F6C7066E0A59D376428DF23A5E8B4FE40F7ADC431E558DFFC35223DE8FA0FB4FCFFB4B5195> |-/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F882286BFB8558FFDC99835F6318B6ABFB469C2D564BB0F5E9BE77FB785FF0A01ACB21DC4B97A4A57F1F7492892F8DC448ACB9AF11A554513DBE4F7C862B67B87DD442F1A03C816B99> |-/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E00493971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D3491A9F18F05171ED970B25AFE0F35A1> |-/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B92B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E22FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D2161CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361A4431D76AF6F> |-/w <1C60D8A8C9B6079F1E495238D734F67FB5E2A2BA6F1F073975099C28237272C5E468B93051F423D5D62417FF2745759EEEF7FD240DC4B0B2C13B5678A844> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPT+NimbusSanL-Regu /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 66 /B putdup 80 /P putdup 100 /d putdup 101 /e putdup 111 /o putdup 114 /r putdup 119 /w putpop%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu*1 [40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /six 11{/.notdef}rp /B 5{/.notdef}rp /H 7{/.notdef}rp /P 19{/.notdef}rp /d /e 9{/.notdef}rp /o 2{/.notdef}rp /r 4{/.notdef}rp /w 2{/.notdef}rp /z 133{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [0 -9.963 -9.963 0 0 0 ]msf192.268 98.12 mo(Power\(dB\))[-6.13721 -5.37995 -7.18325 -5.52939 -5.97781 -3.30772 -5.52939 -6.63536 0 ]yshtrue set_gvm
%ADOBeginSubsetFont: MCAQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /MCAQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 23 /nu putdup 186 /nu putdef/UniqueID 5087385 def/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/nu <1C60D8A8C9B08A95DCEF526C39F84819D72EDDE93B47177B9240566F5A194746061611C671FC7098497F3B354A5BC64E727AD886DE9AC9D4485989A7429BD8E6FC9F2385D2FD890FC63F057BA76B2FE576A24D289F822D59D4BDB0FA1FFD658B15DEF1E326AA6D1AEC1B5CDE9F251ADCECC4490B33C10C2C84A3E1> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPV+CMMI10 /MCAQMX+CMMI10 findfont ct_VMDictPut/PBVMPV+CMMI10*1 [186{/.notdef}rp /nu 69{/.notdef}rp]PBVMPV+CMMI10 nfPBVMPV+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf256.32 39.7936 mo(\272)shtrue set_gvm
%ADOBeginSubsetFont: YZLAAA+NimbusSanL-ReguItal Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /YZLAAA+NimbusSanL-ReguItal def/FontInfo 7 dict dup begin/Notice (Copyright \\050URW\\051++,Copyright 1999 by \\050URW\\051++ Design & Development) def/Weight (Regular) def/ItalicAngle -12 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 99 /c putdef/UniqueID 5020908 def/FontBBox {-178 -284 1108 953} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 0 524 544 729 749 686 709] def/BlueScale 0.0396249 def/StdHW [78] def/StdVW [88] def/StemSnapH [68 73 78 83] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/c <1C60D8A8C9B7A73D3A65C15B5AE8DFFC8DBD41DCD3B13190BA074B317A232F479B6C7DFF162FD103777E2D70073F113467A9FA2F2E7305FADB4F4C1124E80C463FB140856C093E031888B886F0595FCDF5522C20D69ABC56C824E7A5C7A022C64D97A26FD02A0FD9E7371DC8E3FEDCE99B60044E5A0130F6E0D8E9092FA99A63148349468A75637C> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPW+NimbusSanL-ReguItal /YZLAAA+NimbusSanL-ReguItal findfont ct_VMDictPut/PBVMPW+NimbusSanL-ReguItal*1 [99{/.notdef}rp /c 156{/.notdef}rp]PBVMPW+NimbusSanL-ReguItal nfPBVMPW+NimbusSanL-ReguItal*1 [6.974 0 0 -6.974 0 0 ]msf261.241 41.2876 mo(c)shtrue set_gvm
%ADOBeginSubsetFont: ACGAAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /ACGAAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 30 /phi putdup 193 /phi putdef/UniqueID 5087382 def/FontBBox {0 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 441 451 463] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/phi <1C60D8A8C9B08A95065CB4F0A15E479283300A2BA8B3A0F1A9E550E3F5A3E93EB4324D57A138FFA90CB415F25021CF79C732C8D5A97BE951610FB607ED7C779810019CDA25BBCF9089DF78755D71DA6ADAA245A6C349BCA9574C8C3CACD67D407A8911523D0DEE0BABF1BE81A86CA5467695C4E2D35F49AF46DB80500BD60CF3BBE1510D7477B93E5831479A6398BE42E75ED0D2888542462536A4FFD976A676A6468D302A80DB4D31A1> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPX+CMMI7 /ACGAAA+CMMI7 findfont ct_VMDictPut/PBVMPX+CMMI7*1 [193{/.notdef}rp /phi 62{/.notdef}rp]PBVMPX+CMMI7 nfPBVMPX+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf265.094 41.2876 mo(\301)shtrue set_gvm
%ADOBeginSubsetFont: PDBQMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /PDBQMX+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 25 /approxequal putdup 188 /approxequal putdef/UniqueID 5000820 def/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/approxequal <1C60D8A8C9B08A94618283762900B9CBD3167E5EA7F6C2AA682C7DDB038CEE493C0219BC5323ADD0F2586BC2139ED5697AC4854C63C1FBD2A6828B19F08503465D01528F1BC1137D7D92274B0D452D233BC777DB5C21295E4658E06DABAAC729A4FE42C2375C3C8BB6E5CF6AFD91FEBDBCA0D8622595D02D7F49350A5DC908FA632555EDB71DCC1D84B8AEB64DCB3AD1A14110CC7892306CC7437014048115B15D22BA2E43AB3DB9CDB1EAFF21EE331C4B3AC0FE2DE9BBBF078B31693AEF32E3> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPY+CMSY10 /PDBQMX+CMSY10 findfont ct_VMDictPut/PBVMPY+CMSY10*1 [188{/.notdef}rp /approxequal 67{/.notdef}rp]PBVMPY+CMSY10 nfPBVMPY+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf273.15 39.7936 mo(\274)shPBVMPT+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf283.666 39.7936 mo(0.12)[5.52939 2.75967 5.52939 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: OUKRMX+NimbusSanL-Bold Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /OUKRMX+NimbusSanL-Bold def/FontInfo 7 dict dup begin/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 66 /B putdef/UniqueID 5020904 def/FontBBox {-173 -307 1003 949} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 0 540 560 729 749 701 724] def/BlueScale 0.0396249 def/StdHW [118] def/StdVW [141] def/StemSnapH [106 114 118 127] def/StemSnapV [141 151] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/B <1C60D8A8C9B6079F1E2103EDDC87A248A71D1E8C449C6A83B61B5DADF70A37274F2F54AF40BE63A4237A961E0D99E85ACEE00BF17E2C8EFC428A7A2AA341B09104EFBB1A9F8DC1B5920C54C43B0315EDC679D9BD2F81915C535136DEAB827D2DDC070FACD7B285913C3699E414A221C5E340E9298E91556161B2512E7EBA48C1973D8910B0339A0BD02FE5099A33213C71E678A5735ED92D2695E4FFDF64BC722F39F21C8DF899DD114C83B8369158> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/PBVMPZ+NimbusSanL-Bold /OUKRMX+NimbusSanL-Bold findfont ct_VMDictPut/PBVMPZ+NimbusSanL-Bold*1 [66{/.notdef}rp /B 189{/.notdef}rp]PBVMPZ+NimbusSanL-Bold nfPBVMPZ+NimbusSanL-Bold*1 [11.955 0 0 -11.955 0 0 ]msf176.458 21.9436 mo(B)sh377.103 122.96 mo
482.44 122.96 li
482.44 23.6 li
377.103 23.6 li
cp
1 gry
f
377.103 122.96 mo
482.44 122.96 li
482.44 23.6 li
377.103 23.6 li
cp
0 gry
@
gsave
377.103 122.96 mo
482.44 122.96 li
482.44 23.6 li
377.103 23.6 li
cp
clp
0 lc
[6 6 ] 0 dsh
399.057 122.96 mo
399.057 34.274 li
@
377.103 35.9267 mo
399.057 35.9267 li
@
2 lc
[] 0 dsh
377.103 33.4427 mo
377.314 33.4427 li
377.525 33.4437 li
377.736 33.4447 li
377.947 33.4467 li
378.158 33.4487 li
378.37 33.4507 li
378.581 33.4537 li
378.792 33.4577 li
379.003 33.4617 li
379.214 33.4657 li
379.425 33.4707 li
379.636 33.4757 li
379.847 33.4817 li
380.058 33.4877 li
380.269 33.4947 li
380.481 33.5017 li
380.692 33.5097 li
380.903 33.5177 li
381.114 33.5257 li
381.325 33.5347 li
381.536 33.5447 li
381.747 33.5547 li
381.958 33.5647 li
382.169 33.5757 li
382.38 33.5867 li
382.592 33.5987 li
382.803 33.6107 li
383.014 33.6237 li
383.225 33.6367 li
383.436 33.6507 li
383.647 33.6647 li
383.858 33.6787 li
384.069 33.6937 li
384.28 33.7097 li
384.491 33.7257 li
384.702 33.7417 li
384.914 33.7587 li
385.125 33.7757 li
385.336 33.7937 li
385.547 33.8117 li
385.758 33.8307 li
385.969 33.8497 li
386.18 33.8697 li
386.391 33.8897 li
386.602 33.9107 li
386.813 33.9317 li
387.025 33.9527 li
387.236 33.9747 li
387.447 33.9967 li
387.658 34.0197 li
387.869 34.0437 li
388.08 34.0667 li
388.291 34.0917 li
388.502 34.1157 li
388.713 34.1407 li
388.924 34.1667 li
389.136 34.1927 li
389.347 34.2197 li
389.558 34.2467 li
389.769 34.2737 li
389.98 34.3017 li
390.191 34.3307 li
390.402 34.3587 li
390.613 34.3887 li
390.824 34.4187 li
391.035 34.4487 li
391.246 34.4797 li
391.458 34.5107 li
391.669 34.5417 li
391.88 34.5737 li
392.091 34.6067 li
392.302 34.6397 li
392.513 34.6727 li
392.724 34.7067 li
392.935 34.7417 li
393.146 34.7767 li
393.357 34.8117 li
393.569 34.8477 li
393.78 34.8837 li
393.991 34.9207 li
394.202 34.9577 li
394.413 34.9957 li
394.624 35.0337 li
394.835 35.0717 li
395.046 35.1107 li
395.257 35.1507 li
395.468 35.1907 li
395.679 35.2307 li
395.891 35.2717 li
396.102 35.3127 li
396.313 35.3547 li
396.524 35.3967 li
396.735 35.4397 li
396.946 35.4827 li
397.157 35.5267 li
397.368 35.5707 li
397.579 35.6157 li
397.79 35.6607 li
398.002 35.7057 li
398.213 35.7517 li
398.424 35.7977 li
398.635 35.8447 li
398.846 35.8927 li
399.057 35.9397 li
399.268 35.9887 li
399.479 36.0367 li
399.69 36.0867 li
399.901 36.1357 li
400.113 36.1857 li
400.324 36.2367 li
400.535 36.2877 li
400.746 36.3387 li
400.957 36.3907 li
401.168 36.4437 li
401.379 36.4967 li
401.59 36.5497 li
401.801 36.6037 li
402.012 36.6577 li
402.223 36.7127 li
402.435 36.7677 li
402.646 36.8237 li
402.857 36.8797 li
403.068 36.9357 li
403.279 36.9927 li
403.49 37.0507 li
403.701 37.1087 li
403.912 37.1667 li
404.123 37.2257 li
404.334 37.2847 li
404.546 37.3447 li
404.757 37.4057 li
404.968 37.4657 li
405.179 37.5267 li
405.39 37.5887 li
405.601 37.6507 li
405.812 37.7137 li
406.023 37.7767 li
406.234 37.8397 li
406.445 37.9037 li
406.657 37.9687 li
406.868 38.0337 li
407.079 38.0987 li
407.29 38.1647 li
407.501 38.2307 li
407.712 38.2977 li
407.923 38.3647 li
408.134 38.4327 li
408.345 38.5007 li
408.556 38.5687 li
408.767 38.6377 li
408.979 38.7077 li
409.19 38.7777 li
409.401 38.8477 li
409.612 38.9187 li
409.823 38.9897 li
410.034 39.0617 li
410.245 39.1347 li
410.456 39.2067 li
410.667 39.2797 li
410.878 39.3537 li
411.09 39.4277 li
411.301 39.5027 li
411.512 39.5777 li
411.723 39.6527 li
411.934 39.7287 li
412.145 39.8057 li
412.356 39.8827 li
412.567 39.9597 li
412.778 40.0377 li
412.989 40.1157 li
413.201 40.1947 li
413.412 40.2737 li
413.623 40.3537 li
413.834 40.4337 li
414.045 40.5137 li
414.256 40.5947 li
414.467 40.6767 li
414.678 40.7587 li
414.889 40.8407 li
415.1 40.9237 li
415.311 41.0077 li
415.523 41.0907 li
415.734 41.1757 li
415.945 41.2597 li
416.156 41.3457 li
416.367 41.4307 li
416.578 41.5167 li
416.789 41.6037 li
417 41.6907 li
417.211 41.7787 li
417.422 41.8667 li
417.634 41.9547 li
417.845 42.0437 li
418.056 42.1327 li
418.267 42.2227 li
418.478 42.3127 li
418.689 42.4037 li
418.9 42.4947 li
419.111 42.5867 li
419.322 42.6787 li
419.533 42.7717 li
419.744 42.8647 li
419.956 42.9577 li
420.167 43.0517 li
420.378 43.1467 li
420.589 43.2417 li
420.8 43.3367 li
421.011 43.4327 li
421.222 43.5287 li
421.433 43.6257 li
421.644 43.7227 li
421.855 43.8207 li
422.067 43.9187 li
422.278 44.0167 li
422.489 44.1157 li
422.7 44.2157 li
422.911 44.3157 li
423.122 44.4157 li
423.333 44.5167 li
423.544 44.6187 li
423.755 44.7197 li
423.966 44.8227 li
424.178 44.9257 li
424.389 45.0287 li
424.6 45.1317 li
424.811 45.2367 li
425.022 45.3407 li
425.233 45.4457 li
425.444 45.5517 li
425.655 45.6577 li
425.866 45.7637 li
426.077 45.8707 li
426.288 45.9777 li
426.5 46.0857 li
426.711 46.1947 li
426.922 46.3027 li
427.133 46.4127 li
427.344 46.5217 li
427.555 46.6317 li
427.766 46.7427 li
427.977 46.8537 li
428.188 46.9657 li
428.399 47.0777 li
428.611 47.1897 li
428.822 47.3027 li
429.033 47.4157 li
429.244 47.5297 li
429.455 47.6437 li
429.666 47.7587 li
429.877 47.8737 li
430.088 47.9897 li
430.299 48.1057 li
430.51 48.2227 li
430.721 48.3397 li
430.933 48.4567 li
431.144 48.5747 li
431.355 48.6937 li
431.566 48.8127 li
431.777 48.9317 li
431.988 49.0517 li
432.199 49.1717 li
432.41 49.2927 li
432.621 49.4137 li
432.832 49.5357 li
433.044 49.6577 li
433.255 49.7807 li
433.466 49.9037 li
433.677 50.0267 li
433.888 50.1507 li
434.099 50.2757 li
434.31 50.4007 li
434.521 50.5257 li
434.732 50.6517 li
434.943 50.7777 li
435.155 50.9047 li
435.366 51.0317 li
435.577 51.1597 li
435.788 51.2877 li
435.999 51.4167 li
436.21 51.5457 li
436.421 51.6747 li
436.632 51.8047 li
436.843 51.9357 li
437.054 52.0667 li
437.265 52.1977 li
437.477 52.3297 li
437.688 52.4617 li
437.899 52.5947 li
438.11 52.7277 li
438.321 52.8617 li
438.532 52.9957 li
438.743 53.1307 li
438.954 53.2657 li
439.165 53.4007 li
439.376 53.5367 li
439.588 53.6737 li
439.799 53.8107 li
440.01 53.9477 li
440.221 54.0857 li
440.432 54.2237 li
440.643 54.3627 li
440.854 54.5017 li
441.065 54.6417 li
441.276 54.7817 li
441.487 54.9227 li
441.699 55.0637 li
441.91 55.2047 li
442.121 55.3467 li
442.332 55.4897 li
442.543 55.6327 li
442.754 55.7757 li
442.965 55.9197 li
443.176 56.0637 li
443.387 56.2087 li
443.598 56.3537 li
443.809 56.4997 li
444.021 56.6457 li
444.232 56.7927 li
444.443 56.9397 li
444.654 57.0867 li
444.865 57.2347 li
445.076 57.3837 li
445.287 57.5327 li
445.498 57.6817 li
445.709 57.8317 li
445.92 57.9817 li
446.132 58.1327 li
446.343 58.2837 li
446.554 58.4357 li
446.765 58.5877 li
446.976 58.7407 li
447.187 58.8937 li
447.398 59.0477 li
447.609 59.2017 li
447.82 59.3557 li
448.031 59.5107 li
448.243 59.6657 li
448.454 59.8217 li
448.665 59.9787 li
448.876 60.1347 li
449.087 60.2927 li
449.298 60.4497 li
449.509 60.6077 li
449.72 60.7667 li
449.931 60.9257 li
450.142 61.0857 li
450.353 61.2457 li
450.565 61.4057 li
450.776 61.5667 li
450.987 61.7287 li
451.198 61.8897 li
451.409 62.0527 li
451.62 62.2157 li
451.831 62.3787 li
452.042 62.5417 li
452.253 62.7067 li
452.464 62.8707 li
452.676 63.0357 li
452.887 63.2017 li
453.098 63.3677 li
453.309 63.5337 li
453.52 63.7007 li
453.731 63.8687 li
453.942 64.0367 li
454.153 64.2047 li
454.364 64.3737 li
454.575 64.5427 li
454.787 64.7127 li
454.998 64.8827 li
455.209 65.0537 li
455.42 65.2247 li
455.631 65.3957 li
455.842 65.5677 li
456.053 65.7407 li
456.264 65.9137 li
456.475 66.0867 li
456.686 66.2607 li
456.897 66.4347 li
457.109 66.6097 li
457.32 66.7847 li
457.531 66.9607 li
457.742 67.1367 li
457.953 67.3137 li
458.164 67.4907 li
458.375 67.6677 li
458.586 67.8467 li
458.797 68.0247 li
459.008 68.2037 li
459.22 68.3827 li
459.431 68.5627 li
459.642 68.7437 li
459.853 68.9237 li
460.064 69.1057 li
460.275 69.2867 li
460.486 69.4697 li
460.697 69.6517 li
460.908 69.8347 li
461.119 70.0187 li
461.33 70.2027 li
461.542 70.3867 li
461.753 70.5717 li
461.964 70.7577 li
462.175 70.9437 li
462.386 71.1297 li
462.597 71.3167 li
462.808 71.5037 li
463.019 71.6917 li
463.23 71.8797 li
463.441 72.0687 li
463.653 72.2577 li
463.864 72.4467 li
464.075 72.6367 li
464.286 72.8277 li
464.497 73.0187 li
464.708 73.2097 li
464.919 73.4017 li
465.13 73.5937 li
465.341 73.7867 li
465.552 73.9797 li
465.764 74.1737 li
465.975 74.3677 li
466.186 74.5627 li
466.397 74.7577 li
466.608 74.9537 li
466.819 75.1497 li
467.03 75.3457 li
467.241 75.5427 li
467.452 75.7407 li
467.663 75.9377 li
467.874 76.1367 li
468.086 76.3357 li
468.297 76.5347 li
468.508 76.7347 li
468.719 76.9347 li
468.93 77.1347 li
469.141 77.3367 li
469.352 77.5377 li
469.563 77.7397 li
469.774 77.9427 li
469.985 78.1457 li
470.197 78.3487 li
470.408 78.5527 li
470.619 78.7567 li
470.83 78.9617 li
471.041 79.1667 li
471.252 79.3727 li
471.463 79.5787 li
471.674 79.7857 li
471.885 79.9927 li
472.096 80.2007 li
472.308 80.4087 li
472.519 80.6167 li
472.73 80.8257 li
472.941 81.0357 li
473.152 81.2457 li
473.363 81.4557 li
473.574 81.6667 li
473.785 81.8777 li
473.996 82.0897 li
474.207 82.3017 li
474.418 82.5147 li
474.63 82.7277 li
474.841 82.9407 li
475.052 83.1547 li
475.263 83.3697 li
475.474 83.5847 li
475.685 83.7997 li
475.896 84.0157 li
476.107 84.2327 li
476.318 84.4487 li
476.529 84.6667 li
476.741 84.8837 li
476.952 85.1027 li
477.163 85.3207 li
477.374 85.5397 li
477.585 85.7597 li
477.796 85.9797 li
478.007 86.1997 li
478.218 86.4207 li
478.429 86.6427 li
478.64 86.8647 li
478.852 87.0867 li
479.063 87.3097 li
479.274 87.5327 li
479.485 87.7567 li
479.696 87.9807 li
479.907 88.2057 li
480.118 88.4307 li
480.329 88.6567 li
480.54 88.8827 li
480.751 89.1087 li
480.962 89.3357 li
481.174 89.5637 li
481.385 89.7907 li
481.596 90.0197 li
481.807 90.2487 li
482.018 90.4777 li
482.229 90.7077 li
482.44 90.9377 li
@
grestore
PBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf371.564 132.495 mo(0.0)[4.42328 2.20764 0 ]xshgsave
428.772 123.46 mo
429.772 123.46 li
429.772 118.46 li
428.772 118.46 li
cp
clp
429.272 122.96 mo
429.272 118.96 li
@
grestore
gsave
428.772 28.1 mo
429.772 28.1 li
429.772 23.1 li
428.772 23.1 li
cp
clp
429.272 27.6 mo
429.272 23.6 li
@
grestore
PBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf424.233 132.495 mo(0.5)[4.42328 2.20764 0 ]xsh476.902 132.495 mo(1.0)[4.42328 2.20764 0 ]xshPBVMPT+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf423.685 144.737 mo(Hz)[7.18326 0 ]xshPBVMPU+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf353.223 124.969 mo(\241)shPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf359.806 124.969 mo(100)[4.42328 4.42331 0 ]xshgsave
376.603 89.84 mo
381.603 89.84 li
381.603 88.84 li
376.603 88.84 li
cp
clp
377.103 89.34 mo
381.103 89.34 li
@
grestore
gsave
477.94 89.84 mo
482.94 89.84 li
482.94 88.84 li
477.94 88.84 li
cp
clp
478.44 89.34 mo
482.44 89.34 li
@
grestore
PBVMPU+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf357.654 91.849 mo(\241)shPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf364.237 91.849 mo(60)[4.42328 0 ]xshgsave
376.603 56.72 mo
381.603 56.72 li
381.603 55.72 li
376.603 55.72 li
cp
clp
377.103 56.22 mo
381.103 56.22 li
@
grestore
gsave
477.94 56.72 mo
482.94 56.72 li
482.94 55.72 li
477.94 55.72 li
cp
clp
478.44 56.22 mo
482.44 56.22 li
@
grestore
PBVMPU+CMSY8*1 [7.97 0 0 -7.97 0 0 ]msf357.654 58.729 mo(\241)shPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf364.237 58.729 mo(20)[4.42328 0 ]xsh364.241 26.296 mo(20)[4.42328 0 ]xsh377.103 122.96 mo
482.44 122.96 li
482.44 23.6 li
377.103 23.6 li
377.103 122.96 li
@
PBVMPV+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf424.505 39.664 mo(\272)shtrue set_gvm
%ADOBeginSubsetFont: YZLAAA+NimbusSanL-ReguItal AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPW+NimbusSanL-ReguItal dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/y <1C60D8A8C9B7A73DB5828FFBFAF9B7C4546BB576976F03AC701A7CFD517B3A1F37AD4BDA05816FFD5F312273EAD6C6FBDBDDB1B538DF826D9971790FEB3EA69231FED670D6F25383D75845270D> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPW+NimbusSanL-ReguItal /Encoding getdup 121 /y putpop%ADOEndSubsetFont
reset_gvm
/PBVMPW+NimbusSanL-ReguItal*1 [99{/.notdef}rp /c 21{/.notdef}rp /y 134{/.notdef}rp]PBVMPW+NimbusSanL-ReguItal nfPBVMPW+NimbusSanL-ReguItal*1 [6.974 0 0 -6.974 0 0 ]msf429.426 41.158 mo(cy)[3.487 0 ]xshPBVMPY+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf440.363 39.664 mo(\274)shPBVMPT+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf450.879 39.664 mo(0.2)[5.52939 2.75967 0 ]xshPBVMPT+NimbusSanL-Regu*1 [0 -9.963 -9.963 0 0 0 ]msf350.663 98.12 mo(Power\(dB\))[-6.13721 -5.37995 -7.18325 -5.52939 -5.97781 -3.30772 -5.52939 -6.63536 0 ]yshtrue set_gvm
%ADOBeginSubsetFont: OUKRMX+NimbusSanL-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPZ+NimbusSanL-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D81C0850CB4C47B2D1F7BBABC42B7D9A> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPZ+NimbusSanL-Bold /Encoding getdup 67 /C putpop%ADOEndSubsetFont
reset_gvm
/PBVMPZ+NimbusSanL-Bold*1 [66{/.notdef}rp /B /C 188{/.notdef}rp]PBVMPZ+NimbusSanL-Bold nfPBVMPZ+NimbusSanL-Bold*1 [11.955 0 0 -11.955 0 0 ]msf334.968 21.7766 mo(C)sh39.681 122.96 mo
139.041 122.96 li
139.041 23.6 li
39.681 23.6 li
cp
1 gry
f
39.681 122.96 mo
139.041 122.96 li
139.041 23.6 li
39.681 23.6 li
cp
0 gry
@
39.6813 122.96 mo
139.041 122.96 li
139.041 23.6 li
39.6813 23.6 li
cp
gsave
/1 
[/DeviceRGB] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 148 ]ct
[99.36 0 0 99.36 39.6813 25.04 ]ct
snap_to_device
<<
/T 1
/W 414 
/H 414 
/M[414 0 0 -414 0 414 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [cf /ASCII85Decode fl dup/DCTDecode fl]
/O 2
>>
%%BeginBinary: 1
img
s4IA0!"_al8O`[\!WW7m!M08ks6]js6"FnCAH67k!!!!"s4[O,!!WQ/"9\i3"9\o7"pP8;$4$kA#RUtI
$47+I$k<[S$k*OQ%L`gY&.f<[',2,p'GDB)*#ok=+!2RH+!2RH*ruTN"pbG>'+PKc)ANi!)BTk9)B'\>
+!2RH+!2RH+!2RH+!2RO-71&d+"Sro/1`>'/1`>'/1`>'/1`>'/1gh:!"fJ;ScPDb!>,;5&HMtG!WU(=
U&Y/n#6=i+!<E0#!!!!!!!!-*!s/Z-!!`c9$4?k7!WiH)!<E3%!!!!!!!!!"!!36*"U52;#mq%O!!30'
!s/T,"pY55!X8^I!<N?8"98TK&hu[L"qtDhEIefZOeE!pYsK\O;UOGZ(1QbYEe<g-6Sq`)U9\9M_DO_/
PG>HB(K=pe_p[NM-A)U3(`A!k77O)[<mt%s)Y2q[`73l?AT`]lV7":mjn35/L6e^F`n';G2b-q^GDDN_
\&[+`pGb]GBR#?#W49q$kkHSe8QfbQM4(?Rak>qS.QU1*C3kc+Wk-@,lM;(m!WiB(!sJi2"U5)8!s<B@
!!3`7"<eC45m:+!@3PnqJWV^]Z1&IDdGZ<:'iJL]nM;FI6\6):;^J/JZGHifdP^#PK,7LN#RLhT)(%71
)CK';<B'KDZbn1?e)U%QPbb\)eE$75FbQ*W[Dg\XogVtoG(u<[[`6n\p.&1sGDDN_\&[+`pGb]GBR#?#
W49q$kkI/0=_W/<RAma=g$/;^3_ERjHA\/k]#ralqZ#7L$j-M1!YGMH!'^JU-@FnAh28fZ974SU!$)"=
p1p'7?`hMuIspfr3L]?kMRsUKVrkblF`dW`q1`h`3-1qiHi'62!*f(YGI$,]AH'(%@/7E\-Xs5A%Ohp/
dD+_&@K-<]Yl=^F[E^!qrVZZqXFBohFe@\-riu@JR7foP</8eLnqcR<nVocoib![NrrA(sn^+m#_uB^r
%"@gB(Q2p<q?+!(@]VZ_(]16DoqhU[Rsr?>5D/.6n4<QI#JOQ=K]_OjLLRF*?&H6/Ft2iYfW28Y@]m[U
MRsUH.dU0fX0G^Wm15T_GRl(?l3sjRDg^nOfW-q.UAk4XW_`GCQi89PBmlcV!#$I*+/Q:Kf(MetgrEm,
`D]JYqhP1O?hb&Ke9sX"eU9_&Pdp/#?&GL.p(udS<b!1g.H\5WFt2iYR-([#3u)ogQMH143WB*Gf.o1t
>F2#^qr#J82;>_XFt3)Zc%#NRl2LbT%,^Vpk=b19pG;fXk^)]/^UVDaDpZ>lG4\PK>^@Af*p'/H`u`.t
@:B09PA?[XVu-;i!*K3gSEiDZ-iIQLUGA-j@]9m0rrD-meA(#^J'#XQrlP0?*J`[KG$Tn'!#c^QkO'u=
cHYtd@]m[PGNLRQ<ZgX#qNj,=Mp?eWc[Xl8rSA'4^I&=Pe)q4[?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0f
X0G`8XfpG#1&CA\8WV@=?>A?mfW28XD>?X#!%Cm>o*6rH8j(Q!8,ai"X?T?i&$>2da175L?&GMJ:\PD!
^[N,!W;;.#Wqq<+.<41$]+n"<ln?G/XN!BX;pBJ8lrD]=1!O4$Ft2iY/b95FF8l6nY%26q[kC&GpVDgN
CU\I:lrE2?Rf<BXe^ONujr(qpiQdeCn*XieDp\16bC=MqqVS!!k3_B'MR`:<UclmjrrA'BL]#$,rr=Ct
3/p`.oDZ#lh`98;N)0;jmm^k?%`M<f4oYN),H6142#dQ>M4+=+r]:Y26L;;pr\QA,ceMhYSX\gQ`EeA*
n'#/,X?Y:&oe(+Y(S(I8T)Sf,,Q#+pq0n&3S#=OPMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EQ]V
5%F9D4Hgkc1;)/No<DA+XP<<(r_f^[jpkbnP^0,!O8M\$=FQR[+'[DSO)l>!]+n$sTC*g"J)E+!;=t/%
<V6K4;WGA(Ft/lWfO'a==c@X9VjcsPfW28VfDK:CrrDfjrrC->5N\K2q)_I0p4inK+'JO!Zoe1ujo5>T
qu6Z;WB]O8J!78\he6BXI:r/#d-pLsQi@'Cn,EA3V#LF`EW/__GC?07OnG?kqa(Bgo597FQO)b`H)^f1
rr@ku[/(3jI(n2[8(fr%A[4MHOT,<:FH?1^J&"#8bg4CDmWO*%qMt$Phr5Y$rVGF@%K/$ZQ@@rp:XjT:
Y5\J5ko]BFrr@Rfl&Xo3pFl)dUV#o'*c1E(Z0,>lHf$En[h2f^@?mEQKSM/#$987VRm,-L@-m(ojtpUb
D1?W9m&nabG"t%b3T2_O-kj)+,Q@b/:ZoLg@>FiF@K-=rZTJ*sp36+hqGQ[pd8sn/4T>DXQg/emWdd23
!6Yd8oTKg`eW9PMm-j*ZoVI&b=(QkDrrAm^l=g/qH0gCr(q9MFQ^E9bXFJV.B7Do@!2V4FMRtD7kPZsH
;`:u5o\DRV%6j2L8aTtX-;]Z:8K*7i#S]@\\Y[EEbEca[)bAWV]_5VHD##A:O%bBTgij+?idDXAr87&s
rrAo`neq>=efW#&T's$Jr(j'e!5G$&7DJK8neq>=ec&7lpO/_Zo?WhHGOh?"M_buC.JpRR!.H<(B6I=2
37^H8\&c+.SYsT)eOLrP;3*r*`r?$6Bts,Srr<&VdlSYoAaXl*jinV5^;B?fRW&)mrrBhnoZ-NjH^FPL
7JuVY]Cb6Trqo"M%K/$ZVI&B`>g\$_lmu5aGP9XnfaDsT_5+2!*CBP`e$<sh)3t"[2n.N-)Rs562b%/J
M!!CKSVk#oFt2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/OUP[(e?ln/b/^e/<0/nBFsgcoa<MK6Um7HoX9@
G[k003AOARC\h+u2944SWEL6a[s3NT1l%PUO=6coff?5&I3rfKT7[uk?2$(>BPBsNq/Uctr2oE1rrC5i
^\!LEr6q29!;[]&+6F++_2n04PJ?HKWSd9U]S$4a/b8oAdPTkQ:-[r`[""H-dfo_RdWbYFofN.RpQ0md
^0g_+S,R-Br=4"3o*>,"^WSZ5rrB;&VH`-M2X!>7Yb(;SSY_2m]f.M^V&P5*;1S"S;qbNJW7#2ga=*0u
dPF6nlA"55TD`rfq2a<P"2^5r'6i&F^R4u?*st[!:#B6braY[BHmpGZRUVVlg_\s5#@l_[`tYYo3+m$@
]5@JdmPsu>?NtEEmC2[/\DuO>Hl9Q^[bo;Xj,\m?n7KYGB^Qmu]+m]irr@'<aCOgh9t5YZ#%T_H`EeA-
YKP8ekMC^.FoMGt%+4dppTaHTkHl>g6i+QoQ0,'o3u)RS+$9^"`AN/?lX,.c9],D\ZaA22F!'\.\b$mi
pq/hk53+%ohX"5go9]BM2rEmJr1%$9m*G43IQB<#rrBS_.*f*H]+oK=PPL.'g\fh!%*R&i00S\UduW@8
6;*`-2XFGrX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(\rMB=Nf7<EcI\=ok;#38Y=(8*[>Q*Y*l]9P9
m6B1fHXlt\r8<fO>L'hqFt35NaC"a4FV";/5OrDKiVfqZ!#p^d5=p(tM>br;rrA]T1HD@NlrD]<@_ZK'
6hP%Ok2IG!i)aBj`DW5MF'X[8'gpjX!-/"ZAFY(B\:1dhA2u9]?&GtlbKotHhLEOfrr@i`dIto\Z1gBD
Zle0mqS/klk,Hcj'l8"749\Bs21PDe?[p9nhstcn[*sMG+6notoGo=S]K`D[j<e'elr>A'Qi*U;hs)Te
S6X;)cgeMo3](UO!4aa2cEYj1'm;'jq2=Uor7glQbL,o74maoOO5>@Q9::i!lrD]=YubD;`EeA5'm;(n
<S4@W=(8>O?&H6/Ft25EV>62(JFZB_TZj`=qE(r`@]1k_rT,-eO484;5M#.IA,K^3i07hXcFXg7.ec0K
?hm06&,D8Nnn(#CrN?/#)i+)N8U(,irRAO\!2)J23N$c]<S4<\^L_j]ok$5HiZ;sp=(8>O;OksP?&H6/
6f.hCEW4$inU4-AI^B;i3A/9VMR0M0chQ\[J&ZX2!/M'2p<WK<pH7WG+5]H^^SR4XWR<jCCipg^"\Zfl
J,&>:J':UDno;"CdslE\lArLJ*@LWp5H6p.-<f9m<@.7'r1c4.l6lM">g2Q\n[O$/1i!$j\M#AVZ.$<"
Ft/^OMsT3rg[tuudIT"Sm4ZqLhL@jbR?'8m<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.baitq2a-X
nk=M*bd1.B40_jrW%D6PjWEfLe8jq@f'@Zmr*TB[P\+.F]+oK=pHQ`+q*oK;q2[c2Aj#&NY5\J@L\3l'
GQ!Bse@kk^TKP(kVf(j$fW&DqAU[#>Ai]#5*c9h:@]m[H?W/&kpgsFLOlH0ul=9Y)%"(M6I%Bpbr835m
,5AlD2k)GFMkh<R:KWHN3"s@"=*j>oR@Tt2o,7=KD!(G-5;SpeQHV#[G:3<n0Dpbno1j1QP"5,Xa*7HE
5FqL0r-'OdYqQ$65P%W7aWpW=@fHERO6:qOrr=(]rr=TCrr=8Sr6p_t8H*hc^W@_rhdUron'2fX)gS)^
-9;$-"4YW>8d\L-3J4I-DE=a!i`18Qf)o=FXECf]nHc8-Iam-O=7sW4=Q9>\UmD#\Wd0O%KHpJrJ(">J
&,cStrE0("V>[Rs!1!M&rr?(Z^Zd&ZlCL6(69jb5r@dPFoF2?(A,_hg\:/p4<.DD;^Zd&ZlCL6(69jb5
r@dPFoF1p%=T8AtrNA*.5;]7,:qE.gC(F3V*hKXkP8!k^dGaEt`uISk6.>P&o-[?2]"T7\qmJll!6WTV
riO<B!$dR&d?]8*8,</bBC/4[KYO#Mrl9N2cC=g8ao;>cO8RCdne?SGp3tQk:m^d&hq47jO7Nugh%K#&
fHLQ#*5,6a7oRlmnB@F>@Z5VhbE)"04%H\iMb>L<o(2JI0H]furrC5'rrBm-l'q.`Nq\tA!(=-m!)jt(
f^J>DrrC5'rrBm-l&XoGHN*u>=b!E3TBpdsM>mS;SU]SDoZ-N4]mnE\^XU<Mp)u:&8[$'?`Y3nN@p7HT
_o"(DLVga\Iqa(of*I!M*Zm3[>jIr<]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O>6]a&"'eeD.ED4?
rrD/OJ)JZFbWj40pS7`g7'cgm;]e6Vn*q(k!6[G'!5TcAO6"?-rrAcrrrB$ZTBpdsM>mS;SU]RYoZ-N4
]mnE\rrCQhch8rS<,;1!$pc:e<#YE*#EBYZn@,hD4':gh!KRatC4;97a`004?>fCjN]]tnH+VKG3:SYU
k4F/H5<;BtI3.[q/JdD?F6`=1$<-\6[%L@VSF:@h@+OM"\>l</]\].2r>1<B7fNIHoEJb(!%VZ"qR+BD
!$e!4B[''D*KU&pg&#(,nos_srr=Q]Du-l^rr=:5rb0@N%`eNHm/=!_Sc'nMj_W3A!*6K,!0PP+!&S3b
LL^=_p3tQk:B$I(X`_(DeesDhHBFuOOkZ%O:79GhdYQ,*lKdQ-(3`dW/Dooirr<1OVFU4;]cWL[men]o
n"Ka]"Fm:5QQ>Df;;Ucic2RP]n43=bq/P9+Po])$WM.tFYuWOROoGD0bC@`(?h(R@q\/mGi*ENpIu]#I
?;[7deiOUi._0k7=iZ_N)*8RPl\^EIF8kgVrr<oUopjarq?+QK^W%Z"A+us5RN79Z2.-.A:\#Ut+dVBm
!5/jICk%8eh>0JWc'-+.'m;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G[W)*8RV.^*L`
l2L`_j>)-9<f?k4Ji>*$DT,n=Z4ASf!5+Kp!6.h0e7JoolQ55kp1O;,J(FQ!29]-LlrD*'.e_[[r]/Q%
nU`FhJBfZ(pTjO[;(nlB1:0+XFt0'F)m=E7lrAuCA:M`Wht%Err,%oe`;]fVp_R_u?fRd@Q]u,\oo@!s
MQU9QQ>u!B##<-B3oZijh#@Af1OmD6rF\$urdaKAYORJL!*K3b=XJo5W(g@m3Rdn]r((D1J+#aUgE5E2
pO84DZXiT$`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU/Y##<-CMQ>G1!.'.F3=MNQ
Q(n9Pi/Pl"S$?%(XFn^2mj,[<PQ!EWJZ\dh\a+[3rr<h,otNadEu!Ro'liJq]sgc:!023"r*YH^+>\o"
rTq5Ze4]'TN3*T/?&GP*K^7HO]+nfT!1=r"N48`'7K3?,B%+"L`r6.qp)!Meq5*0je@f@s=(84sVBqaX
2h@0t<t;a=@^eSj9],B&^KJga5G1+SX8HFVej"JH8YOe:(KLJ8Ncb:$+o_NT)/c)Dd,9)fpl,1/UbSCm
4B&Ld@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'jZBSYubD7p4(qkohIk%dcG.l^%`gm
LM#mQfW-.cn,(3[r+,g-NCI;kI^/<ehe%AWVu:P\'3rM#cGa%7@]s[u^Z1l!rr<l[rr@i`ij4,]06q[Q
qMHLJ6a9^%Y5nS&(&=3qY'47D0seRm:==VI5:9TOrr<f0Qi=.3?h,qVr_Cmk1-[(oIu=0Irr?+^YPB$f
rr=E\5FEUVg<"`[Y$S$"GCM`[f"<$F'cdcV3\<NOEI\5%:QftcEAXH`X.T.PIJH);*R8<\2':*rqUNph
otL?O3-R%=2':*rqUNphotL?O3-R%=2':*nEaE#Q.4^IW,V_ZsX!Y;R&(Xe[G45D-rr@Ki$6@>T4fSF.
^2Ef7hu!6Kr-To:0B]`-c^2o6?+^+:Im;hOKb!5Bp8@`Wq6=_)bJ1,Oqrdinhq[A>(u`=iG[4@Z;rc3T
I\YN>:[=?sn)sT=?5u%qIljY/H25)<Q[eJeqsj17gqTE0rr>1Zg3]<G'VianVl1tZ+qY&f`d4`XN>W?C
Z:usj?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD:X"p-C+Q+Hm)+l8c]@E8D
O5GSC1@_YoQ[5t;!&=B@i="[Vmk49EraY]__AC56hGI=?G>Y%Gb3B;8!QstCJNJWK8$19NJJ":hX8RMA
rVljFr"7*L*.?+6ns6KX;I;A2IeWg@!%7[Va2,gO^WK`pogsPdDsqE=r1EIK%tfqR#ILm]rT(\/\dpN2
Wru&(o7.E<*7$kSC+#b)R3+\?lr0%e'7Bq[plAb]!1*MCpbS'1QCI]$T+Q;BO'_hdQMZa<1QUV(holJH
?2c)#^ZE2irX@i_/N<8&nJ%<G>W6,p`E1+RYY10B?W+$q^"BBj<B5Aa0knhT.HHrRMRsU4pHS+7^[&Ap
3O=Lh*ZJ,Xr;QbuIe>ge9<hQ-Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y
@]m[UMRsUH.dU/Ahs?u,=$CLsTBRi9(AD:@4Y]65d/O)e+8UolZWf)]]tPTVU[B4Elj\uo?&G?H`t?t)
YuU>mX:jU?(Y#LJDg!Vs<DHkq$sI]C$@*u-@]m[P^!HT'0Db)4c>;J3LPF?/Im<6@]h]p%lrD]=YubD;
`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+nDVq^:Qlc^U,rqF[nZ
^"BBH9MekK5MX<YUAh7FbN^a!L\n%ILYTKDA$K*EWGh#_&,5SjO7^Yg""//dr`7Er4FOuDhk]U'ho"kH
diSZ>ErQ+iBYU-&hph,CFs$23pE/X\JWmWoQ*aoE+)gFLR]`5#VK)>hoY>SE8EA)=CZn1#Z1e0n:X])X
qu)!+rg=kOjmI!b=jVYu&%D3noY-gorr?E:^SX5^bM9kU3Y1mLpAUt=Qd^HAlh<@1a7B%QQhb8[rhr$<
e?VeM:LYb6T:s#s&Z<c42<=.Q#s2Z>DsCL%:;d&.53)Ss?3X0e^ZB;Ko>fV^Sbc+!rVSk>rA!dsG;&Nq
MtuE#rD!9TYl=]Q&%MW>9RI8>ao5>gIlr.oW?@aabp+[9B4;CV3LpaZ%jdf6=_(#H8tJVVfW28Y@]m[U
MRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft0U%U8\Q8^-Y)Nr%j:$
jaXBSo43)=Di5,"HI;`m2EW:5=Eh9u*Br$q&uR9BfaLs5Jg:OtZAuuCjdQ!RSXl@i(MIMP3;U2rp&>#!
Zi:#SO1>2i9TOfik'tN7?g%CUqYd&`oR4dVA)P\DJ!>&ichlPkq`ji=qiCBi_4PcJ!%@)]TD,TAgH5SC
=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O
?&H6/Ft2iYfW28Y@]m[UMRsUH.dU!!0A0]ob]D%a6g4u`AF*=KW`tl$RFnRF=(8>O?&H6/Ft2iYfW28Y
@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[U
MRsUH-qkHDYK1<9k3aDbL"N\S.dU.eb_JmY<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8
Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsQL$hdZ_1E?"1&Ge`[
=Z[@A.[K3aVKOHU<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;
`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMP::-!"L"Q3otf0Q8PHFVZ+)TPOZ]2?d>;+]Bb7J
59,&.r9=2r^:8ZVn]/OScCa6mZH!R0X0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/
Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iY
fW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y
@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[U
MRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH
.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0f
X0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8
Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(
]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=
lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=
YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;
`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5
'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n
<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W
=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O
?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YuU>6A8WO=^A&#-cPA="<#%TqrrC9X
N^q"srrA4SG^%[[q3UWl`!cAipP4/orrAI:*.1#dP+QttQ6QtBLc+(+0p`PK>XoC#ZR",g<S4@W=(8>O
?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/
Ft2iYfW28Y@]m[UMQ9q\!.4>XL/4YedXQS%b+4Hq=(8+4^UCm1j-F39i+me7LW^Z=@]m[UMRsUH.dU0f
X0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8
Y/O\(]+oK=lr@6@qqn(-14:cEPP`jA<:!nJ]+mZgrO)HN*4$_7"'bF$5$6gV'm;(n<S4@W=(8>O?&H6/
Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iY
fW28Y@]J"ohYd[&PNd*ETAH=uVdf!mfW#_UmB=_.jd>j')W.J:o#DKtX0G`8Y/O\(]+oK=lrD]=YubD;
`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD6n*!Ct
)*d&7oZSE%AFb&=j;fW?^43EFTe*ierr@WmdiZhFnmCGu-hP-&Z/;6+]O_$BJfiG`c"-BPj;fW?^43Cc
%3!JtTZP[YL\/[6;_f;2Frlr*Z,Q>5MZ3[NXaFLE+4DD/M7J,X)Lq"!h>/VQ`W#E+1&SuAq'/]60:T^F
>55kh5GgZ4Rf<@5C&\10o1O4A-t/DqS@;C?55CD?b:*MW4(CX9%S2.uO?S8CjkOFtra$*,'Ajid^R'Sd
"S_f`j"'qM-nq>>^uWCm+[rI\Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5
'm;(n<S4@W=(8>O?&GL?DP(ik$csi4X&*dmg48s15((f!.LtLE]/L5'&X;`o>9c@!=a8'g!!GN`;u*Md
:<3/88c:<7m!%Yd0,["4L\/XY=Zi&H#>+kITBpdc9.q/Ii.psFo3"2<r.CgEQd>@TN<6nQekc&arA$U-
alM;AS^I2TkPH;!+0b:%rWn!IIlES5J'd>=^0a+Wn*p:2N5+jLqIB?6SkK'<1k"rjrl9MDlo\kZ!.l<A
+3im;?h?@Rn!DAo,-n+SlrD]<pqG;cEbC<q<QI01`Ee@t)V=`2J#Ij'Aa+Z,oA.+Yloj7&0$K)ElrD]<
&\cZgS@!<U-1r%XU"HEN=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;
`EeA5'm;'tk^W%XTCJ-?%)UPC60Wfiro.;9r<\Ko];K,@`<_%AA/q;bfVR6$YuEn]`HE`t<IA.h"M$>-
od]#BLLRF*;N5JhkeGV3Y;5ab8U9a\rq7E%d[+Q5VKOHU<=%Jqr6AJ+3"l(G=A\?afW28Y@]m[UMRsUH
.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=(8>O?&H6/:@pdFRSW_#r!$SE^7b,4ci3ub
0C+(?a"cE!YubCf5j0s5:upt@lrD]<c`:=N!5>9/!.dA`%uCej(#N'&rr@I=rr<+MVEQ7ee_aE<rr@I=
rr<+MVEQ7eeT?!/!Ompc!8pZF_(!C7Zc2SerEb!Jg]%8hS;/)2gkU;aJ+q^t!5P+Lj5-s8]`/!#\,QGZ
3:Y&&;LNR7<d96A%tO<Xa"oQ8"t+VemF]MAKas`O/`?X/b'rB=(*,Vp53Hm7jZdb)_YA3?G6e+GpDe!&
"T+9u%jSQ)QOZd)@.>#2Hnf,"e34_O(Js+u>/IG]?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(
]+oK=lrD]=YubD:J58I9<!$@E]FWhM_K[B^mOd@Glte<X]:HpR&)E5!i0SJ.TrWTF:PA`JH/\*G%ou13
H>dHT0*5@-([+P;\+60'0s!I.$$SIhIjt9"Ye1V:G8C0VpL@WV-/=:`e/KLA+^rM*Q#_'an3;(S(PZ5@
inaq.`kq5g\_LE)rRfb/)0\9=qR*g0k!/VQrA2ZBjkf%0lIOk]R/[0E8+ai^?0^mZ>CX@srr@TldiLMn
WZ(ljgfs.Y%u>\Urg@@9bDVj-&$7JV+TDFiVu-hEN]D<oDY,(O!.CdC#fhs2lL.%MpY(,4N-OI@Y<Dg-
MC$bg\>#&>2aBTtk<[`u-PX&Tk%Ncf%>Gh<5EpT62\oZ%%NWjQT?9@VNKs"lgtr86;>1K8W5fD1+*7b=
VV$BCrrDR6Rqu`a4jT^7_#2.N!3CYB.LurW70cY6@^Hj;!;%B2qrFID2!TV\8cp_h0#_+RZuH@'@7.;$
@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`Ee@u3Y2Mfe5uB]qSm%1rrB\+]74J/3j\c`q@i9I
i'-MCZLs_"mWTE8+*KPDJj%E=^'!fCb4%p34O@)WX!Ya]cOXHO>/GO)\`u>KKRYX,^Ph^ec\hK.].pD!
^'OHpMYI^o)_8`GkAai0pL@cZ,M]Z+f:`#FfkW='F'Me^IG!4Z)#$+Lp^atU/&NFkEF/b@@qBmph"h+4
-dUV+]+m\?rrB_3!:5GCL[&`moqf3\jgu7N.eD!1htZEgJ':!(`6NHfL&KN7rrAb;d;gcs2\'&s=(7kY
h>[Jg;h)eWrr@lqgZ/,8\b!LIpr*14XFBgnP=)TT/"c5Okl#cdI8(W`mRdR7FY:X=MR7@//R_#O=(8>O
?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(VE,Ojgje?'I^,::^[D(Rj4XG4n[&0mq@ieBHH0Kt
`Db"drT07B14K=l3mXmSSu:9!nTfUgoE<JpS_LDN@]N:0/S2"[lrD]=ht)JJq:MaQ<&O[Uqp58_AXIqD
g`K^(R1<H+=(8?qr6>6ANfBD'_mfP;k<mm/h+QZ%*8MDT_fKeY]+oK=(k(<=eMmD:J,#/N^-A9;T0(VR
N)0;jmo%7a3u(Z(ro*j;f9;!>dAm3,TJH7>lrD]=7hC:''K[%Q.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;
`EeA5'm;(n<S4<]Tmsbrr\:nJ)3:itn)EauTDnm15Lhul5KjA6Ft2iY4OAT7=[1pon/6k[qT$/3I@^B<
(ROg05YUbeh7FDF.^\lcelp$&`EeA7kNbulrRo'_A`13M46oajrRgmVHmq/C;1&8opgnh%/<p*Q4W(o`
C[l3h1/\#'ZC(XTfhq\aF5igAp141'0a>tJ_p.)5mX.t%rlfjH"oQS,h>/be`BO;%m)S]/?d-F4Lj@as
3mP-YD)IeJ(-%2\2^$VT4d>*dZFa$>RM$7HbE\pTj+'8Ehu'MS!&B$eVu2Nmq4fi4bM$:eI(sH\r1T%n
ht!iGao(k)nhn2EN.72$^!c_*ec&Cak1KU8o-JkAVu2Nmq4f%nm4WRq?aYBJ0mUEi<K4+<9?TnUg_UUC
r-'-Cb*mb3enO2#@>ot<$c-Sa7-C!;Oo*M>UAO&b-)\_?]g_\9KWg:MH>Rg(Nu-MuKm"DRNUUge_`G!W
a-lC?kSrt-rrCu<oZ-QJr6bM![@Qj`rl9J=^@@9`#laluIlEG5J'dnq^-=j7n'F#M1&h6i+6ejKnbKBb
*nGPUkPGhB\pX2p%)mZN5iQS.kS[t`dE-Lhlao5:L]]]q\I4_50#_+R]+oK=lrD]=YubD;`EeA5'm;(n
<S4@W=(8:_;?r43"dHps%JPg2n43=e5N_M3]8uSIXRD4rp,hmUpPaUk8,?`k]RFYqLUE]Cq>SE`J\LZ8
rWrN(9Rf!^c%"+6ZbAXgfUVb9b'KqYW\b8D+bVK*'9FULrrA40Et>W>6OkY*Dk"*"DT1.6eF?1ekrjIO
9Y::(f9edog\sZ$r6^sojfLI`^0e;3rr=:1akuZl]YXO>hsrM:k)=eU[,'1+Ib"@V?RL?G](60ugOI;a
rrAKBr`[cp9BH%Pni;)cB9YV.r7@q#:GoeN5uMSJPfsS]KD_>:WpMHR1jF$@7(IMjf/$.U3e#,+a-]K\
lL^#*nkXbs7etC/qdKL),MW3sjq%;=d.^>tqcj(#d@Y&q:Z_IZrr=N-c@><;&,@:(ohQ\%=/#&SbP&.9
1[OPor4d#Wni+j:rq=8/8%8Fqa8Hb:H`-H5X8\(T41]npg;`:G2R<h?6LSj82InXc8u\N_SCkliE(V8@
m%`:e-P/O)XT&8(CELe+r#,M7RW/9,.U_jDntlpVItG(hk(EXArrC;'rr=NVo3^TQ*cCuX"`#4)#Q,J>
!1Ip,<5I_3b*Y<JT:FBR]+oK=Y@[\4!;dFpjn`0PI0fbkELi!!'ggdU[/#1k],)g\4Gk4-g?_hWW;5GL
nt2?M!9GNW^ZI`Cr_BnJVM"eJ+8$lQ4EdLsl$lh6l"4J63u(.trrDLu?ShP==.AD+B4h/DNCWNd4No1O
Ft2iY-hA/,\,!Mu)4.)[??=h=V]WSNKTe2uC"TJk=(8>O?&H6/Ft2iYfW28Y@]m[UMRsUH.dU0Cqa9L1
?3A;(qL^NI9B`5)U"HCnr4Dt/Nr/hVbVYs^,gB\5Iu=j'3I2e9ILf&rD;%&dFt3-&b<Pd^h>[K!=8^6H
kBh:Iq#:=qoXq*/TAq[*YN[UQ2(ja<X)%EacN-r7$h*i$kPd8/rr<]mfAcet52c0;5IuocIEEEca'u3j
;gcN&?&H6/=0hi*!<%bso)1.c^4^rF\B`'!MP4s;g3gYq?&Oni*^pU'D0@Dfe9pdaq+o67!:l<<ht%q2
rr=EN4]=ZG/!'OhqjolHrUdk+Ie9s%>+LPF2#dRMZ7hXE7k;jV(GiCI`hW=mSn8Yc3u)ogPPL.'>Q!7K
%*R%>00/DYduW@86:mTK2!e5pX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'm;(\rLrg)Y6!^OrBZh5V=[[P
;!_2Gra#O(a*msfjr.%jP%Lo+^Vu!$S@oI-^B^TJ2XMNB]+oWNje)Hjmf*:L/,j+_F1o-_r-tdD?;oQR
nX0=V=7hecR[6G/<OM]kkCBOW"o%oMF8l4XV#LFOSEo]pG9:dNX<67ggcjg.Rq&^)@]@(N3%i0UMQ>E[
J,[CJH%)'lha0O^gh1*!`DF%YD*D=I0#brE%jHeN[_!8nl99HlI&H+Vq+5^Iq2`)d!0aOVWM'7k(!$8D
rQcL_rq^!Q5C-J#/Pa8^)LqY;(X2lRQ0.oNRG#@8;>bN31C<=eMRsTpr5J@]rb_LdAa$[kSG&H:a6u6d
,g=l/Ft2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+o13d.raSJFZB_TZhITqC-S9Ft1W6!&"9Oj1bNn
o*m)F8MaH&?fK!"c<c;'hh0@`Rs'h2?&H<7o$@:ppODcLrr=h+3SrQjr]es30.H99prn5gqF`Kd9;6SZ
gAR`:^f7suqu,rnrrA#+J&KWTpqOG%\38CRm\B1lEe[;nfW28YX+,\B?g"'\%=dN1k'rWeGs#I)k,5dT
0A>ma/rTZ!rrBm=r6p_tSo5qS>h&L<jni?_"jqgkJ+to$!1Ip,;pFC<bF5$dr4ctfqoX4kSHm_RBoCIo
`5%6Pp*1poIU&b02W3t-q;oJ-0D^>DjaI./fp;E=EkH\0l4AH1p\t5*4tN&@S%bR$q-SXFA)bUXH(clB
+Qg;F:EP(P>Dk>;]+0,7LX[I:DnLQnZc82AO#MJR%i5&_oZ+t7q"&I/K"YCW+4D;I9B4:YqNp:#PV7.u
X3%0Nod?>&?]:og-Z[5!]087(@.p'oNtc%+BE1&Aet^mm1*.W7qk=#ij[j_RrV:sC!$d^,WTBc9Vd8*h
Oo8tm7+:msJ'*rFBD_9"!<,J9rDUc8'^NB)nis7+OYm$u/+Z!e?^<gfTj?tFHek0L<E>&M+u3/h<7D%W
c/Y3q*oGN5ob#4f*Z9/4g<)RFLJKN^h1qQtNL^RcDt,+A;6f'fi^r"%A&9&#P#JQhAV.WJqM&Qq"VUG+
dE'Hir]d)'bf?8t.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;`EeA5'jVZXL_"YNY6!_-(qG]PHC+DUa2UpM
+oO3ar8pd&g]%881nF45rl9MDm!N@D!.l<A+3nEf?fVYDI(k*8hr4GS)*d&7oZ-Qk4I>jG8`)1nlt*qt
?<bmTo-:#uC%YV(bWhLYZW#Vim'5!!?Vp\R#AWJ-p21BS*V!EQofqr3PPimZ_2nDi3Ig-1hG0.-=&J&I
n<T:9dso2pq55=r*8X?dX/PT5pe+3XBtrTHr6p_tNc-6C<Rc:>g>A@,:EWo_V<B*=L?1V(+h:MrF/_lk
Z>E#JRAK9J4fK)W[ps>Pcct*U].XD+5ig1;;*6(YD7TJ=ht"<?j8>3-ng4;9lDA*ATq)^A^16gr?g'_\
]BAc-WSd9W4QH@*5Op-#!:$FGk\!9?0:;]2re()0^4.m6RQm>!EDap.Z.jcr?iI'8re>MBXM/3;0DZ4G
j48]7qO*9\'ohPl?HcsQ/eM]ZMZ>b."#U5leN'S"Y9l7HMP7N$d,`ei`A7Np'1:`aVtamunX'4\J'Btq
cfO_-r2$%-hr1+^`aAKarr=n9q>@s"r2$%-hr1+^`aAKarr=n9q>@s"r2$%-l+,-QK<\KeWIDJYn:.cL
^JFO5=s*38p1?Bf@]m[HQ_/,D?cOb;ah&?75$6J(<S4<=5PNTUY2?E=U%F+Q&#:bu13P.f5;<*;jUBZ=
!95&KnoZ`sf\b`9r,aMn^4Pj5m[QdVY/O;@HgJT?Dq$Qn8^+afBRZJ$+4-6a>L,AGFt2iYfW28Y@]m[U
MRsUH.dU0fX0G`8Y/O\(Y)E2,rr?2O?3A9T`VnkGiU"+q^I('tFt1]8!%YhG-@biEQi87uW9sTbnNm+^
qHXoErrD%GqSVs=@l[&:Ft2iYk'rgan_(;L!17-hR+]p]&,-_9\*/.qAj=84rGU%"DJgKlYu[@\T96uN
UiUn>S,WI.gHYLhL]/F,_.Wc@?M!p*B;tn0J(?i1-S&qT.dU0*AuXs!MRsTrp##LrrL2jEJ$$l?rr@Ac
ZSC1G'm;'[]_cL8r]+jK:"[!"o#A^ZY/O9VrrBcsrHA-bSI_MX3.2r^8X$D[3VeI1!%;HWrr<nrrrA7^
Rh!I<!$6pUTk_jE(PHFCi]@lu.[=f,Ae1A[Tp](ZA^L<Ao],`GKVL<ZH.]1&=(8>O?&H6/Ft2iYfW28Y
@]m[UMRsUH.dU/W?f%^WbPL]L7@l1$,OZ.Sc9;"AfW28X?hn"-!%B`(!6c_'nKc@LDuTfp&*jbSke3no
!"pC)+/S9@auiV-=(8?hr6bNENm4L"_Z'V[`m0pTJ%1j<^I-TL1&`ahl[FB%F)^U(MR;8Or/MB6,FdQ^
htZ?errC8*5Oep&$U=BkpRf.j4\thDriu@J3EoFe=(88k2,?:"<S4<WY5\L7+7.T4e,=/bL\oXeR?#hM
X0GVMkM'@1n]PomDT0^.Q8Uf>Ft/U"rUc`J\*M9%r?9k3kmK7<Ft1O^0`M.7%+P:WiuER>FYdIYhrE)]
F=hdPK(+0US4@%k`DWgbm(r:3e2&UHbdnm0I[km0d$/-HcT;kb.dU0fX0G`8Y/O\(]+oK=lrD]=YubD;
`EeA(Mu2$(!*OeX"3@gfrT&Ccm((0O6TZ$+.a.hl/&10mJ,+barZmo1mJd1V62b6g>o0mJ!9-BB_t:WP
3CepL.dU0tJ!rUlfsLbZQs]ZVg!]R!pCdJ7k^)]05K0Q!DpT><7W'7DW\IPAN[Nn,NbKKipSRrja#;9C
@H%4dLb<XLrrBa!]`%;el@6R@ooIsdb1`DD]+o]lr]Tl)rChOPr?kj"eP,[tjIX]t!)^f9P!>r+32PJ;
r]Tl)rChOPr?kj"eP(IUHU%I!+8SP-V;dheGPLpY?hH/=rrD\^EW6#=1&ac2rrD^3J*A3SQ\o)1lp(*!
^16aM^%naq)Wn#GW7q62\pm'7i`Y=&V't+EAm1)QUY/fOr^S(,=T5-W-QY[ib5E9WJ'0Abnh#?g9DL5.
rhU.tU\,l'3PV)5DZ(NPJ'0Abnh#?g5KS3nodG<d+/s`GS,(+en'S^jr3F0=!$^%kA,M[err>rPqGI*U
o/XRUIV_O"G.,cS>HBNuJAb"dTRPLsc3)g[(ps.0@iRm,&+GJBjR5/P/EMmm8_oGREW6"grPLVl0%5XN
]@2i:=7-pY?6e=ZN]N5TIc69NE?=k;C6pk0WST,L+9LP!!+GpJcb=Oh+VT_pF<>SZBsGJ3L;W6tEYn%c
?gm5Di7n+i^)T4eGD2*f46q)tn**'pg\Tsh_mh@RO16HAHF^RM;q++%69$=Ig\po=q461mLZ]hbr!-BZ
Z&Cb/+TdXPOR\rD?fuA&,Ft/0H_3OmZ@=k3h<N2]mJd.hET)t!pt7m%IW"girc\;AJiN8?\U84cc9F-K
j1>HT`OA!)Ed5A8iTk,*!G9]hCP;%SfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oK=f[td<EDat>r?8+h
b?Y&InhpFIY$uW8^R@>^62[L[rr?&kqItDfIZW&DjfX+/)ZKfh*s3>N8'-7FFhd4Jrr>bHf'h$*L]"R+
rr=9NqW$LCrb2*\nrC3X<e'A1qUofKQD:C>0tf4&rr@=Trr@5Wo-_7eHZorQb)]*iLJN9-p30B';lh^q
.8DuQBbEojhXs[m>*o/pgjdDsrjg3s35:nG:Lj3J5Ko2047ni8rr=Wp+7_;h!3SKq0BS=Yra-3-,Ou?C
-)lC;?,ul&J*W/JMts./^R)k9aS^ZInjTspVl&6DWP]b;M*D`%KG(So"[#(i`!W*(VX7O4%T"9m7<I;P
H2cO>4[*P<AAiHe!"Rh4R2>'m(]LPfJ+SdDr6q,7!6o0UI(j1BIWnfkWB^$ohk>.!qR9W-!7EuZo1hN=
ci!Tdb5QTbri&-S`M90k[/U,dFeAUWa8Z,rj8#fIoB#Qn27g!a8cJdf02o.)1uG9:daA0nUta<njW<+A
3\J_*cV4I\5a)fX,Iuj@C300Uouicg<PM";^[fJOr/4qHR30P>+8%%3V&u\?o/ZgNSM-CTkfl'c=Wm_E
O_anMr_1]=!3&?a./cg7SGrT7Qd!)6At/f#/<GA&[JlQn!%)B/e=ll+I\ltfJ*0Je?^DXpY/O\(]smu\
"9/?K$@gecn+F_S0UqJm/00V['k,sCrr@C_^Z,q+!/Y?YH[YlNMu(2bhf^[I;YRH/in^Z?<l\)/^ong0
^Z2AArr=bdrrC!_Fo$UUA*tF[h<BF!L\40mKZdTUMPOR(rrA9^;#^Mm5NLg9G@c8a6h/RSG5hR?B&r[s
]KC6s(XAS/]+m]hoM;A4NQ'H=#^inqFt2iYfW28Y@]m[UMRsUH.dU0fX0G`8Y/O\(]+oO;<-(_gLMZ<R
lrBAN=b"R`rrDWu-i?Ol;qo(HU\_n#]DhkB^W2E.&)JA*S?q%`'m;)!+3Uk_jP>=0:]+n:T^ArOU]"QJ
o,c9Y!/sGE^SJ0:e[e7[Y!"L4e*MS@.t@?4TCEMbje2VR'Z^/CrQcRTqq6>=[UceX'm;))YK417'm;)#
htb2$r1#59!,Tinf,bL?Dn,;@Ft2iYLO%eUmC*#pN(<jnSoO/lpsq+`rg/&c^YMQ>`q,+3Y/OTc8'_7L
HWL.HNihdJ`(U+1'04\/rrBTj\:)\IV>fHreK8fF/T5e^Oa6-h;,'FV7/m7NM4*1br](M07oe=D!:cPB
gck5tbj8[tFt2iY%sQDbS=VYU=3)QU`t?t)YubD;`EeA5'm;(n<S4@W=(8>O?&H6/Ft2iYh=4@e0ZkEB
YsYcs>PVk1!%Ale!6d!dnKc@TDZ9]oO6[>)n,8RP!$4AS5BqLGEmJpq<S4A!IkJLrPBHm*0gG3&k(C+W
^5qr:9?_`Mr\5M[rfYF1<p:W^\Fd`n:U0p"GcguGit?j[7XLGRr)4^1,PO<LDsq9+.bU!9lrD]=o"QC(
lrD]=gOJAt5OrckrNe-V!*jb9$,5H:_:Yfn<ZU@QpU8iU0d$1VH,mDOj&j'sqH`i)rr@0pHQ16^g:J)9
FWW^Qna0Q[3k)lq&MO&Uk?k.dk!%bu4l2P&LjrBPa@s"TfW%C'TD:o5&+pV8:*sUs=8:i@*?A4"rrC&V
:N63Ka"suJl.E&A<'B,,qJpi9?!e_0b8a#]Y/O\(]+oK=lrD]=YubD;`EeA5'm;(n<S4@W=*MVR1rC_b
cG^:4=`<Dgr1n92!&1^.`03&A]Da9EX?T@mp07H>rr>moiTb^34km5C@]r)q])Mbj:"T<]rrC&sRL\'N
qENO/0/;i)pr%Z_qF`<_>GQElj3n^U50*W]\,QGe8cJc&)=CZ=nP"G^O50:$^V,uHX(G"/YubD<s4I~>
%%EndBinary
grestore
np
0 gry
PBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf34.142 132.495 mo(0.0)[4.42329 2.20763 0 ]xshgsave
129.009 123.46 mo
130.009 123.46 li
130.009 118.46 li
129.009 118.46 li
cp
clp
129.509 122.96 mo
129.509 118.96 li
@
grestore
gsave
129.009 28.1 mo
130.009 28.1 li
130.009 23.1 li
129.009 23.1 li
cp
clp
129.509 27.6 mo
129.509 23.6 li
@
grestore
PBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf124.469 132.495 mo(0.6)[4.42329 2.20764 0 ]xshgsave
39.1813 32.6327 mo
44.1813 32.6327 li
44.1813 31.6327 li
39.1813 31.6327 li
cp
clp
39.6813 32.1327 mo
43.6813 32.1327 li
@
grestore
gsave
134.541 32.6327 mo
139.541 32.6327 li
139.541 31.6327 li
134.541 31.6327 li
cp
clp
135.041 32.1327 mo
139.041 32.1327 li
@
grestore
PBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf24.603 35.329 mo(0.6)[4.42329 2.20763 0 ]xsh39.6813 122.96 mo
139.041 122.96 li
139.041 23.6 li
39.6813 23.6 li
39.6813 122.96 li
@
PBVMPT+NimbusSanL-Regu*1 [0 -9.963 -9.963 0 0 0 ]msf28.7142 85.3236 mo(Hz)[-7.18325 0 ]yshPBVMPT+NimbusSanL-Regu*1 [9.963 0 0 -9.963 0 0 ]msf84.845 141.025 mo(Hz)[7.18325 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: OUKRMX+NimbusSanL-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPZ+NimbusSanL-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B6079F1E495237AA3F64441E4A131C11FB3E8512A0B86473A2F60C423CF878E88E0F4833552CCA1B70C921FDFE4A9F47B1CA4B5C61C70FFA4765A82B6DBE934516EF> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPZ+NimbusSanL-Bold /Encoding getdup 65 /A putpop%ADOEndSubsetFont
reset_gvm
/PBVMPZ+NimbusSanL-Bold*1 [65{/.notdef}rp /A /B /C 188{/.notdef}rp]PBVMPZ+NimbusSanL-Bold nfPBVMPZ+NimbusSanL-Bold*1 [11.955 0 0 -11.955 0 0 ]msf2.045 21.3415 mo(A)sh148.327 131.6 mo
148.327 131.15 li
148.327 16.85 li
148.327 16.4 li
154.087 16.4 li
154.087 16.85 li
154.087 131.15 li
154.087 131.6 li
148.327 131.6 li
cp
1 gry
f
0.01 lw
148.327 131.6 mo
148.327 131.15 li
148.327 16.85 li
148.327 16.4 li
154.087 16.4 li
154.087 16.85 li
154.087 131.15 li
154.087 131.6 li
148.327 131.6 li
cp
@
gsave
148.327 131.6 mo
154.087 131.6 li
154.087 16.4 li
148.327 16.4 li
cp
clp
148.327 131.6 mo
154.087 131.6 li
154.087 131.15 li
148.327 131.15 li
cp
0.042 0 0 rgb
f
148.327 131.15 mo
154.087 131.15 li
154.087 130.7 li
148.327 130.7 li
cp
0.052 0 0 rgb
f
148.327 130.7 mo
154.087 130.7 li
154.087 130.25 li
148.327 130.25 li
cp
0.062 0 0 rgb
f
148.327 130.25 mo
154.087 130.25 li
154.087 129.8 li
148.327 129.8 li
cp
0.072 0 0 rgb
f
148.327 129.8 mo
154.087 129.8 li
154.087 129.35 li
148.327 129.35 li
cp
0.083 0 0 rgb
f
148.327 129.35 mo
154.087 129.35 li
154.087 128.9 li
148.327 128.9 li
cp
0.093 0 0 rgb
f
148.327 128.9 mo
154.087 128.9 li
154.087 128.45 li
148.327 128.45 li
cp
0.103 0 0 rgb
f
148.327 128.45 mo
154.087 128.45 li
154.087 128 li
148.327 128 li
cp
0.114 0 0 rgb
f
148.327 128 mo
154.087 128 li
154.087 127.55 li
148.327 127.55 li
cp
0.124 0 0 rgb
f
148.327 127.55 mo
154.087 127.55 li
154.087 127.1 li
148.327 127.1 li
cp
0.134 0 0 rgb
f
148.327 127.1 mo
154.087 127.1 li
154.087 126.65 li
148.327 126.65 li
cp
0.145 0 0 rgb
f
148.327 126.65 mo
154.087 126.65 li
154.087 126.2 li
148.327 126.2 li
cp
0.155 0 0 rgb
f
148.327 126.2 mo
154.087 126.2 li
154.087 125.75 li
148.327 125.75 li
cp
0.165 0 0 rgb
f
148.327 125.75 mo
154.087 125.75 li
154.087 125.3 li
148.327 125.3 li
cp
0.175 0 0 rgb
f
148.327 125.3 mo
154.087 125.3 li
154.087 124.85 li
148.327 124.85 li
cp
0.186 0 0 rgb
f
148.327 124.85 mo
154.087 124.85 li
154.087 124.4 li
148.327 124.4 li
cp
0.196 0 0 rgb
f
148.327 124.4 mo
154.087 124.4 li
154.087 123.95 li
148.327 123.95 li
cp
0.206 0 0 rgb
f
148.327 123.95 mo
154.087 123.95 li
154.087 123.5 li
148.327 123.5 li
cp
0.217 0 0 rgb
f
148.327 123.5 mo
154.087 123.5 li
154.087 123.05 li
148.327 123.05 li
cp
0.227 0 0 rgb
f
148.327 123.05 mo
154.087 123.05 li
154.087 122.6 li
148.327 122.6 li
cp
0.237 0 0 rgb
f
148.327 122.6 mo
154.087 122.6 li
154.087 122.15 li
148.327 122.15 li
cp
0.247 0 0 rgb
f
148.327 122.15 mo
154.087 122.15 li
154.087 121.7 li
148.327 121.7 li
cp
0.258 0 0 rgb
f
148.327 121.7 mo
154.087 121.7 li
154.087 121.25 li
148.327 121.25 li
cp
0.268 0 0 rgb
f
148.327 121.25 mo
154.087 121.25 li
154.087 120.8 li
148.327 120.8 li
cp
0.278 0 0 rgb
f
148.327 120.8 mo
154.087 120.8 li
154.087 120.35 li
148.327 120.35 li
cp
0.289 0 0 rgb
f
148.327 120.35 mo
154.087 120.35 li
154.087 119.9 li
148.327 119.9 li
cp
0.299 0 0 rgb
f
148.327 119.9 mo
154.087 119.9 li
154.087 119.45 li
148.327 119.45 li
cp
0.309 0 0 rgb
f
148.327 119.45 mo
154.087 119.45 li
154.087 119 li
148.327 119 li
cp
0.32 0 0 rgb
f
148.327 119 mo
154.087 119 li
154.087 118.55 li
148.327 118.55 li
cp
0.33 0 0 rgb
f
148.327 118.55 mo
154.087 118.55 li
154.087 118.1 li
148.327 118.1 li
cp
0.34 0 0 rgb
f
148.327 118.1 mo
154.087 118.1 li
154.087 117.65 li
148.327 117.65 li
cp
0.35 0 0 rgb
f
148.327 117.65 mo
154.087 117.65 li
154.087 117.2 li
148.327 117.2 li
cp
0.361 0 0 rgb
f
148.327 117.2 mo
154.087 117.2 li
154.087 116.75 li
148.327 116.75 li
cp
0.371 0 0 rgb
f
148.327 116.75 mo
154.087 116.75 li
154.087 116.3 li
148.327 116.3 li
cp
0.381 0 0 rgb
f
148.327 116.3 mo
154.087 116.3 li
154.087 115.85 li
148.327 115.85 li
cp
0.392 0 0 rgb
f
148.327 115.85 mo
154.087 115.85 li
154.087 115.4 li
148.327 115.4 li
cp
0.402 0 0 rgb
f
148.327 115.4 mo
154.087 115.4 li
154.087 114.95 li
148.327 114.95 li
cp
0.412 0 0 rgb
f
148.327 114.95 mo
154.087 114.95 li
154.087 114.5 li
148.327 114.5 li
cp
0.423 0 0 rgb
f
148.327 114.5 mo
154.087 114.5 li
154.087 114.05 li
148.327 114.05 li
cp
0.433 0 0 rgb
f
148.327 114.05 mo
154.087 114.05 li
154.087 113.6 li
148.327 113.6 li
cp
0.443 0 0 rgb
f
148.327 113.6 mo
154.087 113.6 li
154.087 113.15 li
148.327 113.15 li
cp
0.453 0 0 rgb
f
148.327 113.15 mo
154.087 113.15 li
154.087 112.7 li
148.327 112.7 li
cp
0.464 0 0 rgb
f
148.327 112.7 mo
154.087 112.7 li
154.087 112.25 li
148.327 112.25 li
cp
0.474 0 0 rgb
f
148.327 112.25 mo
154.087 112.25 li
154.087 111.8 li
148.327 111.8 li
cp
0.484 0 0 rgb
f
148.327 111.8 mo
154.087 111.8 li
154.087 111.35 li
148.327 111.35 li
cp
0.495 0 0 rgb
f
148.327 111.35 mo
154.087 111.35 li
154.087 110.9 li
148.327 110.9 li
cp
0.505 0 0 rgb
f
148.327 110.9 mo
154.087 110.9 li
154.087 110.45 li
148.327 110.45 li
cp
0.515 0 0 rgb
f
148.327 110.45 mo
154.087 110.45 li
154.087 110 li
148.327 110 li
cp
0.525 0 0 rgb
f
148.327 110 mo
154.087 110 li
154.087 109.55 li
148.327 109.55 li
cp
0.536 0 0 rgb
f
148.327 109.55 mo
154.087 109.55 li
154.087 109.1 li
148.327 109.1 li
cp
0.546 0 0 rgb
f
148.327 109.1 mo
154.087 109.1 li
154.087 108.65 li
148.327 108.65 li
cp
0.556 0 0 rgb
f
148.327 108.65 mo
154.087 108.65 li
154.087 108.2 li
148.327 108.2 li
cp
0.567 0 0 rgb
f
148.327 108.2 mo
154.087 108.2 li
154.087 107.75 li
148.327 107.75 li
cp
0.577 0 0 rgb
f
148.327 107.75 mo
154.087 107.75 li
154.087 107.3 li
148.327 107.3 li
cp
0.587 0 0 rgb
f
148.327 107.3 mo
154.087 107.3 li
154.087 106.85 li
148.327 106.85 li
cp
0.598 0 0 rgb
f
148.327 106.85 mo
154.087 106.85 li
154.087 106.4 li
148.327 106.4 li
cp
0.608 0 0 rgb
f
148.327 106.4 mo
154.087 106.4 li
154.087 105.95 li
148.327 105.95 li
cp
0.618 0 0 rgb
f
148.327 105.95 mo
154.087 105.95 li
154.087 105.5 li
148.327 105.5 li
cp
0.628 0 0 rgb
f
148.327 105.5 mo
154.087 105.5 li
154.087 105.05 li
148.327 105.05 li
cp
0.639 0 0 rgb
f
148.327 105.05 mo
154.087 105.05 li
154.087 104.6 li
148.327 104.6 li
cp
0.649 0 0 rgb
f
148.327 104.6 mo
154.087 104.6 li
154.087 104.15 li
148.327 104.15 li
cp
0.659 0 0 rgb
f
148.327 104.15 mo
154.087 104.15 li
154.087 103.7 li
148.327 103.7 li
cp
0.67 0 0 rgb
f
148.327 103.7 mo
154.087 103.7 li
154.087 103.25 li
148.327 103.25 li
cp
0.68 0 0 rgb
f
148.327 103.25 mo
154.087 103.25 li
154.087 102.8 li
148.327 102.8 li
cp
0.69 0 0 rgb
f
148.327 102.8 mo
154.087 102.8 li
154.087 102.35 li
148.327 102.35 li
cp
0.7 0 0 rgb
f
148.327 102.35 mo
154.087 102.35 li
154.087 101.9 li
148.327 101.9 li
cp
0.711 0 0 rgb
f
148.327 101.9 mo
154.087 101.9 li
154.087 101.45 li
148.327 101.45 li
cp
0.721 0 0 rgb
f
148.327 101.45 mo
154.087 101.45 li
154.087 101 li
148.327 101 li
cp
0.731 0 0 rgb
f
148.327 101 mo
154.087 101 li
154.087 100.55 li
148.327 100.55 li
cp
0.742 0 0 rgb
f
148.327 100.55 mo
154.087 100.55 li
154.087 100.1 li
148.327 100.1 li
cp
0.752 0 0 rgb
f
148.327 100.1 mo
154.087 100.1 li
154.087 99.65 li
148.327 99.65 li
cp
0.762 0 0 rgb
f
148.327 99.65 mo
154.087 99.65 li
154.087 99.2 li
148.327 99.2 li
cp
0.773 0 0 rgb
f
148.327 99.2 mo
154.087 99.2 li
154.087 98.75 li
148.327 98.75 li
cp
0.783 0 0 rgb
f
148.327 98.75 mo
154.087 98.75 li
154.087 98.3 li
148.327 98.3 li
cp
0.793 0 0 rgb
f
148.327 98.3 mo
154.087 98.3 li
154.087 97.85 li
148.327 97.85 li
cp
0.803 0 0 rgb
f
148.327 97.85 mo
154.087 97.85 li
154.087 97.4 li
148.327 97.4 li
cp
0.814 0 0 rgb
f
148.327 97.4 mo
154.087 97.4 li
154.087 96.95 li
148.327 96.95 li
cp
0.824 0 0 rgb
f
148.327 96.95 mo
154.087 96.95 li
154.087 96.5 li
148.327 96.5 li
cp
0.834 0 0 rgb
f
148.327 96.5 mo
154.087 96.5 li
154.087 96.05 li
148.327 96.05 li
cp
0.845 0 0 rgb
f
148.327 96.05 mo
154.087 96.05 li
154.087 95.6 li
148.327 95.6 li
cp
0.855 0 0 rgb
f
148.327 95.6 mo
154.087 95.6 li
154.087 95.15 li
148.327 95.15 li
cp
0.865 0 0 rgb
f
148.327 95.15 mo
154.087 95.15 li
154.087 94.7 li
148.327 94.7 li
cp
0.875 0 0 rgb
f
148.327 94.7 mo
154.087 94.7 li
154.087 94.25 li
148.327 94.25 li
cp
0.886 0 0 rgb
f
148.327 94.25 mo
154.087 94.25 li
154.087 93.8 li
148.327 93.8 li
cp
0.896 0 0 rgb
f
148.327 93.8 mo
154.087 93.8 li
154.087 93.35 li
148.327 93.35 li
cp
0.906 0 0 rgb
f
148.327 93.35 mo
154.087 93.35 li
154.087 92.9 li
148.327 92.9 li
cp
0.917 0 0 rgb
f
148.327 92.9 mo
154.087 92.9 li
154.087 92.45 li
148.327 92.45 li
cp
0.927 0 0 rgb
f
148.327 92.45 mo
154.087 92.45 li
154.087 92 li
148.327 92 li
cp
0.937 0 0 rgb
f
148.327 92 mo
154.087 92 li
154.087 91.55 li
148.327 91.55 li
cp
0.948 0 0 rgb
f
148.327 91.55 mo
154.087 91.55 li
154.087 91.1 li
148.327 91.1 li
cp
0.958 0 0 rgb
f
148.327 91.1 mo
154.087 91.1 li
154.087 90.65 li
148.327 90.65 li
cp
0.968 0 0 rgb
f
148.327 90.65 mo
154.087 90.65 li
154.087 90.2 li
148.327 90.2 li
cp
0.978 0 0 rgb
f
148.327 90.2 mo
154.087 90.2 li
154.087 89.75 li
148.327 89.75 li
cp
0.989 0 0 rgb
f
148.327 89.75 mo
154.087 89.75 li
154.087 89.3 li
148.327 89.3 li
cp
0.999 0 0 rgb
f
148.327 89.3 mo
154.087 89.3 li
154.087 88.85 li
148.327 88.85 li
cp
1 0.009 0 rgb
f
148.327 88.85 mo
154.087 88.85 li
154.087 88.4 li
148.327 88.4 li
cp
1 0.02 0 rgb
f
148.327 88.4 mo
154.087 88.4 li
154.087 87.95 li
148.327 87.95 li
cp
1 0.03 0 rgb
f
148.327 87.95 mo
154.087 87.95 li
154.087 87.5 li
148.327 87.5 li
cp
1 0.04 0 rgb
f
148.327 87.5 mo
154.087 87.5 li
154.087 87.05 li
148.327 87.05 li
cp
1 0.05 0 rgb
f
148.327 87.05 mo
154.087 87.05 li
154.087 86.6 li
148.327 86.6 li
cp
1 0.061 0 rgb
f
148.327 86.6 mo
154.087 86.6 li
154.087 86.15 li
148.327 86.15 li
cp
1 0.071 0 rgb
f
148.327 86.15 mo
154.087 86.15 li
154.087 85.7 li
148.327 85.7 li
cp
1 0.081 0 rgb
f
148.327 85.7 mo
154.087 85.7 li
154.087 85.25 li
148.327 85.25 li
cp
1 0.092 0 rgb
f
148.327 85.25 mo
154.087 85.25 li
154.087 84.8 li
148.327 84.8 li
cp
1 0.102 0 rgb
f
148.327 84.8 mo
154.087 84.8 li
154.087 84.35 li
148.327 84.35 li
cp
1 0.112 0 rgb
f
148.327 84.35 mo
154.087 84.35 li
154.087 83.9 li
148.327 83.9 li
cp
1 0.123 0 rgb
f
148.327 83.9 mo
154.087 83.9 li
154.087 83.45 li
148.327 83.45 li
cp
1 0.133 0 rgb
f
148.327 83.45 mo
154.087 83.45 li
154.087 83 li
148.327 83 li
cp
1 0.143 0 rgb
f
148.327 83 mo
154.087 83 li
154.087 82.55 li
148.327 82.55 li
cp
1 0.153 0 rgb
f
148.327 82.55 mo
154.087 82.55 li
154.087 82.1 li
148.327 82.1 li
cp
1 0.164 0 rgb
f
148.327 82.1 mo
154.087 82.1 li
154.087 81.65 li
148.327 81.65 li
cp
1 0.174 0 rgb
f
148.327 81.65 mo
154.087 81.65 li
154.087 81.2 li
148.327 81.2 li
cp
1 0.184 0 rgb
f
148.327 81.2 mo
154.087 81.2 li
154.087 80.75 li
148.327 80.75 li
cp
1 0.195 0 rgb
f
148.327 80.75 mo
154.087 80.75 li
154.087 80.3 li
148.327 80.3 li
cp
1 0.205 0 rgb
f
148.327 80.3 mo
154.087 80.3 li
154.087 79.85 li
148.327 79.85 li
cp
1 0.215 0 rgb
f
148.327 79.85 mo
154.087 79.85 li
154.087 79.4 li
148.327 79.4 li
cp
1 0.225 0 rgb
f
148.327 79.4 mo
154.087 79.4 li
154.087 78.95 li
148.327 78.95 li
cp
1 0.236 0 rgb
f
148.327 78.95 mo
154.087 78.95 li
154.087 78.5 li
148.327 78.5 li
cp
1 0.246 0 rgb
f
148.327 78.5 mo
154.087 78.5 li
154.087 78.05 li
148.327 78.05 li
cp
1 0.256 0 rgb
f
148.327 78.05 mo
154.087 78.05 li
154.087 77.6 li
148.327 77.6 li
cp
1 0.267 0 rgb
f
148.327 77.6 mo
154.087 77.6 li
154.087 77.15 li
148.327 77.15 li
cp
1 0.277 0 rgb
f
148.327 77.15 mo
154.087 77.15 li
154.087 76.7 li
148.327 76.7 li
cp
1 0.287 0 rgb
f
148.327 76.7 mo
154.087 76.7 li
154.087 76.25 li
148.327 76.25 li
cp
1 0.298 0 rgb
f
148.327 76.25 mo
154.087 76.25 li
154.087 75.8 li
148.327 75.8 li
cp
1 0.308 0 rgb
f
148.327 75.8 mo
154.087 75.8 li
154.087 75.35 li
148.327 75.35 li
cp
1 0.318 0 rgb
f
148.327 75.35 mo
154.087 75.35 li
154.087 74.9 li
148.327 74.9 li
cp
1 0.328 0 rgb
f
148.327 74.9 mo
154.087 74.9 li
154.087 74.45 li
148.327 74.45 li
cp
1 0.339 0 rgb
f
148.327 74.45 mo
154.087 74.45 li
154.087 74 li
148.327 74 li
cp
1 0.349 0 rgb
f
148.327 74 mo
154.087 74 li
154.087 73.55 li
148.327 73.55 li
cp
1 0.359 0 rgb
f
148.327 73.55 mo
154.087 73.55 li
154.087 73.1 li
148.327 73.1 li
cp
1 0.37 0 rgb
f
148.327 73.1 mo
154.087 73.1 li
154.087 72.65 li
148.327 72.65 li
cp
1 0.38 0 rgb
f
148.327 72.65 mo
154.087 72.65 li
154.087 72.2 li
148.327 72.2 li
cp
1 0.39 0 rgb
f
148.327 72.2 mo
154.087 72.2 li
154.087 71.75 li
148.327 71.75 li
cp
1 0.4 0 rgb
f
148.327 71.75 mo
154.087 71.75 li
154.087 71.3 li
148.327 71.3 li
cp
1 0.411 0 rgb
f
148.327 71.3 mo
154.087 71.3 li
154.087 70.85 li
148.327 70.85 li
cp
1 0.421 0 rgb
f
148.327 70.85 mo
154.087 70.85 li
154.087 70.4 li
148.327 70.4 li
cp
1 0.431 0 rgb
f
148.327 70.4 mo
154.087 70.4 li
154.087 69.95 li
148.327 69.95 li
cp
1 0.442 0 rgb
f
148.327 69.95 mo
154.087 69.95 li
154.087 69.5 li
148.327 69.5 li
cp
1 0.452 0 rgb
f
148.327 69.5 mo
154.087 69.5 li
154.087 69.05 li
148.327 69.05 li
cp
1 0.462 0 rgb
f
148.327 69.05 mo
154.087 69.05 li
154.087 68.6 li
148.327 68.6 li
cp
1 0.473 0 rgb
f
148.327 68.6 mo
154.087 68.6 li
154.087 68.15 li
148.327 68.15 li
cp
1 0.483 0 rgb
f
148.327 68.15 mo
154.087 68.15 li
154.087 67.7 li
148.327 67.7 li
cp
1 0.493 0 rgb
f
148.327 67.7 mo
154.087 67.7 li
154.087 67.25 li
148.327 67.25 li
cp
1 0.503 0 rgb
f
148.327 67.25 mo
154.087 67.25 li
154.087 66.8 li
148.327 66.8 li
cp
1 0.514 0 rgb
f
148.327 66.8 mo
154.087 66.8 li
154.087 66.35 li
148.327 66.35 li
cp
1 0.524 0 rgb
f
148.327 66.35 mo
154.087 66.35 li
154.087 65.9 li
148.327 65.9 li
cp
1 0.534 0 rgb
f
148.327 65.9 mo
154.087 65.9 li
154.087 65.45 li
148.327 65.45 li
cp
1 0.545 0 rgb
f
148.327 65.45 mo
154.087 65.45 li
154.087 65 li
148.327 65 li
cp
1 0.555 0 rgb
f
148.327 65 mo
154.087 65 li
154.087 64.55 li
148.327 64.55 li
cp
1 0.565 0 rgb
f
148.327 64.55 mo
154.087 64.55 li
154.087 64.1 li
148.327 64.1 li
cp
1 0.575 0 rgb
f
148.327 64.1 mo
154.087 64.1 li
154.087 63.65 li
148.327 63.65 li
cp
1 0.586 0 rgb
f
148.327 63.65 mo
154.087 63.65 li
154.087 63.2 li
148.327 63.2 li
cp
1 0.596 0 rgb
f
148.327 63.2 mo
154.087 63.2 li
154.087 62.75 li
148.327 62.75 li
cp
1 0.606 0 rgb
f
148.327 62.75 mo
154.087 62.75 li
154.087 62.3 li
148.327 62.3 li
cp
1 0.617 0 rgb
f
148.327 62.3 mo
154.087 62.3 li
154.087 61.85 li
148.327 61.85 li
cp
1 0.627 0 rgb
f
148.327 61.85 mo
154.087 61.85 li
154.087 61.4 li
148.327 61.4 li
cp
1 0.637 0 rgb
f
148.327 61.4 mo
154.087 61.4 li
154.087 60.95 li
148.327 60.95 li
cp
1 0.648 0 rgb
f
148.327 60.95 mo
154.087 60.95 li
154.087 60.5 li
148.327 60.5 li
cp
1 0.658 0 rgb
f
148.327 60.5 mo
154.087 60.5 li
154.087 60.05 li
148.327 60.05 li
cp
1 0.668 0 rgb
f
148.327 60.05 mo
154.087 60.05 li
154.087 59.6 li
148.327 59.6 li
cp
1 0.678 0 rgb
f
148.327 59.6 mo
154.087 59.6 li
154.087 59.15 li
148.327 59.15 li
cp
1 0.689 0 rgb
f
148.327 59.15 mo
154.087 59.15 li
154.087 58.7 li
148.327 58.7 li
cp
1 0.699 0 rgb
f
148.327 58.7 mo
154.087 58.7 li
154.087 58.25 li
148.327 58.25 li
cp
1 0.709 0 rgb
f
148.327 58.25 mo
154.087 58.25 li
154.087 57.8 li
148.327 57.8 li
cp
1 0.72 0 rgb
f
148.327 57.8 mo
154.087 57.8 li
154.087 57.35 li
148.327 57.35 li
cp
1 0.73 0 rgb
f
148.327 57.35 mo
154.087 57.35 li
154.087 56.9 li
148.327 56.9 li
cp
1 0.74 0 rgb
f
148.327 56.9 mo
154.087 56.9 li
154.087 56.45 li
148.327 56.45 li
cp
1 0.75 0 rgb
f
148.327 56.45 mo
154.087 56.45 li
154.087 56 li
148.327 56 li
cp
1 0.761 0 rgb
f
148.327 56 mo
154.087 56 li
154.087 55.55 li
148.327 55.55 li
cp
1 0.771 0 rgb
f
148.327 55.55 mo
154.087 55.55 li
154.087 55.1 li
148.327 55.1 li
cp
1 0.781 0 rgb
f
148.327 55.1 mo
154.087 55.1 li
154.087 54.65 li
148.327 54.65 li
cp
1 0.792 0 rgb
f
148.327 54.65 mo
154.087 54.65 li
154.087 54.2 li
148.327 54.2 li
cp
1 0.802 0 rgb
f
148.327 54.2 mo
154.087 54.2 li
154.087 53.75 li
148.327 53.75 li
cp
1 0.812 0 rgb
f
148.327 53.75 mo
154.087 53.75 li
154.087 53.3 li
148.327 53.3 li
cp
1 0.823 0 rgb
f
148.327 53.3 mo
154.087 53.3 li
154.087 52.85 li
148.327 52.85 li
cp
1 0.833 0 rgb
f
148.327 52.85 mo
154.087 52.85 li
154.087 52.4 li
148.327 52.4 li
cp
1 0.843 0 rgb
f
148.327 52.4 mo
154.087 52.4 li
154.087 51.95 li
148.327 51.95 li
cp
1 0.853 0 rgb
f
148.327 51.95 mo
154.087 51.95 li
154.087 51.5 li
148.327 51.5 li
cp
1 0.864 0 rgb
f
148.327 51.5 mo
154.087 51.5 li
154.087 51.05 li
148.327 51.05 li
cp
1 0.874 0 rgb
f
148.327 51.05 mo
154.087 51.05 li
154.087 50.6 li
148.327 50.6 li
cp
1 0.884 0 rgb
f
148.327 50.6 mo
154.087 50.6 li
154.087 50.15 li
148.327 50.15 li
cp
1 0.895 0 rgb
f
148.327 50.15 mo
154.087 50.15 li
154.087 49.7 li
148.327 49.7 li
cp
1 0.905 0 rgb
f
148.327 49.7 mo
154.087 49.7 li
154.087 49.25 li
148.327 49.25 li
cp
1 0.915 0 rgb
f
148.327 49.25 mo
154.087 49.25 li
154.087 48.8 li
148.327 48.8 li
cp
1 0.925 0 rgb
f
148.327 48.8 mo
154.087 48.8 li
154.087 48.35 li
148.327 48.35 li
cp
1 0.936 0 rgb
f
148.327 48.35 mo
154.087 48.35 li
154.087 47.9 li
148.327 47.9 li
cp
1 0.946 0 rgb
f
148.327 47.9 mo
154.087 47.9 li
154.087 47.45 li
148.327 47.45 li
cp
1 0.956 0 rgb
f
148.327 47.45 mo
154.087 47.45 li
154.087 47 li
148.327 47 li
cp
1 0.967 0 rgb
f
148.327 47 mo
154.087 47 li
154.087 46.55 li
148.327 46.55 li
cp
1 0.977 0 rgb
f
148.327 46.55 mo
154.087 46.55 li
154.087 46.1 li
148.327 46.1 li
cp
1 0.987 0 rgb
f
148.327 46.1 mo
154.087 46.1 li
154.087 45.65 li
148.327 45.65 li
cp
1 0.998 0 rgb
f
148.327 45.65 mo
154.087 45.65 li
154.087 45.2 li
148.327 45.2 li
cp
1 1 0.012 rgb
f
148.327 45.2 mo
154.087 45.2 li
154.087 44.75 li
148.327 44.75 li
cp
1 1 0.027 rgb
f
148.327 44.75 mo
154.087 44.75 li
154.087 44.3 li
148.327 44.3 li
cp
1 1 0.043 rgb
f
148.327 44.3 mo
154.087 44.3 li
154.087 43.85 li
148.327 43.85 li
cp
1 1 0.058 rgb
f
148.327 43.85 mo
154.087 43.85 li
154.087 43.4 li
148.327 43.4 li
cp
1 1 0.074 rgb
f
148.327 43.4 mo
154.087 43.4 li
154.087 42.95 li
148.327 42.95 li
cp
1 1 0.089 rgb
f
148.327 42.95 mo
154.087 42.95 li
154.087 42.5 li
148.327 42.5 li
cp
1 1 0.104 rgb
f
148.327 42.5 mo
154.087 42.5 li
154.087 42.05 li
148.327 42.05 li
cp
1 1 0.12 rgb
f
148.327 42.05 mo
154.087 42.05 li
154.087 41.6 li
148.327 41.6 li
cp
1 1 0.135 rgb
f
148.327 41.6 mo
154.087 41.6 li
154.087 41.15 li
148.327 41.15 li
cp
1 1 0.151 rgb
f
148.327 41.15 mo
154.087 41.15 li
154.087 40.7 li
148.327 40.7 li
cp
1 1 0.166 rgb
f
148.327 40.7 mo
154.087 40.7 li
154.087 40.25 li
148.327 40.25 li
cp
1 1 0.182 rgb
f
148.327 40.25 mo
154.087 40.25 li
154.087 39.8 li
148.327 39.8 li
cp
1 1 0.197 rgb
f
148.327 39.8 mo
154.087 39.8 li
154.087 39.35 li
148.327 39.35 li
cp
1 1 0.212 rgb
f
148.327 39.35 mo
154.087 39.35 li
154.087 38.9 li
148.327 38.9 li
cp
1 1 0.228 rgb
f
148.327 38.9 mo
154.087 38.9 li
154.087 38.45 li
148.327 38.45 li
cp
1 1 0.243 rgb
f
148.327 38.45 mo
154.087 38.45 li
154.087 38 li
148.327 38 li
cp
1 1 0.259 rgb
f
148.327 38 mo
154.087 38 li
154.087 37.55 li
148.327 37.55 li
cp
1 1 0.274 rgb
f
148.327 37.55 mo
154.087 37.55 li
154.087 37.1 li
148.327 37.1 li
cp
1 1 0.29 rgb
f
148.327 37.1 mo
154.087 37.1 li
154.087 36.65 li
148.327 36.65 li
cp
1 1 0.305 rgb
f
148.327 36.65 mo
154.087 36.65 li
154.087 36.2 li
148.327 36.2 li
cp
1 1 0.321 rgb
f
148.327 36.2 mo
154.087 36.2 li
154.087 35.75 li
148.327 35.75 li
cp
1 1 0.336 rgb
f
148.327 35.75 mo
154.087 35.75 li
154.087 35.3 li
148.327 35.3 li
cp
1 1 0.351 rgb
f
148.327 35.3 mo
154.087 35.3 li
154.087 34.85 li
148.327 34.85 li
cp
1 1 0.367 rgb
f
148.327 34.85 mo
154.087 34.85 li
154.087 34.4 li
148.327 34.4 li
cp
1 1 0.382 rgb
f
148.327 34.4 mo
154.087 34.4 li
154.087 33.95 li
148.327 33.95 li
cp
1 1 0.398 rgb
f
148.327 33.95 mo
154.087 33.95 li
154.087 33.5 li
148.327 33.5 li
cp
1 1 0.413 rgb
f
148.327 33.5 mo
154.087 33.5 li
154.087 33.05 li
148.327 33.05 li
cp
1 1 0.429 rgb
f
148.327 33.05 mo
154.087 33.05 li
154.087 32.6 li
148.327 32.6 li
cp
1 1 0.444 rgb
f
148.327 32.6 mo
154.087 32.6 li
154.087 32.15 li
148.327 32.15 li
cp
1 1 0.46 rgb
f
148.327 32.15 mo
154.087 32.15 li
154.087 31.7 li
148.327 31.7 li
cp
1 1 0.475 rgb
f
148.327 31.7 mo
154.087 31.7 li
154.087 31.25 li
148.327 31.25 li
cp
1 1 0.49 rgb
f
148.327 31.25 mo
154.087 31.25 li
154.087 30.8 li
148.327 30.8 li
cp
1 1 0.506 rgb
f
148.327 30.8 mo
154.087 30.8 li
154.087 30.35 li
148.327 30.35 li
cp
1 1 0.521 rgb
f
148.327 30.35 mo
154.087 30.35 li
154.087 29.9 li
148.327 29.9 li
cp
1 1 0.537 rgb
f
148.327 29.9 mo
154.087 29.9 li
154.087 29.45 li
148.327 29.45 li
cp
1 1 0.552 rgb
f
148.327 29.45 mo
154.087 29.45 li
154.087 29 li
148.327 29 li
cp
1 1 0.568 rgb
f
148.327 29 mo
154.087 29 li
154.087 28.55 li
148.327 28.55 li
cp
1 1 0.583 rgb
f
148.327 28.55 mo
154.087 28.55 li
154.087 28.1 li
148.327 28.1 li
cp
1 1 0.599 rgb
f
148.327 28.1 mo
154.087 28.1 li
154.087 27.65 li
148.327 27.65 li
cp
1 1 0.614 rgb
f
148.327 27.65 mo
154.087 27.65 li
154.087 27.2 li
148.327 27.2 li
cp
1 1 0.629 rgb
f
148.327 27.2 mo
154.087 27.2 li
154.087 26.75 li
148.327 26.75 li
cp
1 1 0.645 rgb
f
148.327 26.75 mo
154.087 26.75 li
154.087 26.3 li
148.327 26.3 li
cp
1 1 0.66 rgb
f
148.327 26.3 mo
154.087 26.3 li
154.087 25.85 li
148.327 25.85 li
cp
1 1 0.676 rgb
f
148.327 25.85 mo
154.087 25.85 li
154.087 25.4 li
148.327 25.4 li
cp
1 1 0.691 rgb
f
148.327 25.4 mo
154.087 25.4 li
154.087 24.95 li
148.327 24.95 li
cp
1 1 0.707 rgb
f
148.327 24.95 mo
154.087 24.95 li
154.087 24.5 li
148.327 24.5 li
cp
1 1 0.722 rgb
f
148.327 24.5 mo
154.087 24.5 li
154.087 24.05 li
148.327 24.05 li
cp
1 1 0.738 rgb
f
148.327 24.05 mo
154.087 24.05 li
154.087 23.6 li
148.327 23.6 li
cp
1 1 0.753 rgb
f
148.327 23.6 mo
154.087 23.6 li
154.087 23.15 li
148.327 23.15 li
cp
1 1 0.768 rgb
f
148.327 23.15 mo
154.087 23.15 li
154.087 22.7 li
148.327 22.7 li
cp
1 1 0.784 rgb
f
148.327 22.7 mo
154.087 22.7 li
154.087 22.25 li
148.327 22.25 li
cp
1 1 0.799 rgb
f
148.327 22.25 mo
154.087 22.25 li
154.087 21.8 li
148.327 21.8 li
cp
1 1 0.815 rgb
f
148.327 21.8 mo
154.087 21.8 li
154.087 21.35 li
148.327 21.35 li
cp
1 1 0.83 rgb
f
148.327 21.35 mo
154.087 21.35 li
154.087 20.9 li
148.327 20.9 li
cp
1 1 0.846 rgb
f
148.327 20.9 mo
154.087 20.9 li
154.087 20.45 li
148.327 20.45 li
cp
1 1 0.861 rgb
f
148.327 20.45 mo
154.087 20.45 li
154.087 20 li
148.327 20 li
cp
1 1 0.876 rgb
f
148.327 20 mo
154.087 20 li
154.087 19.55 li
148.327 19.55 li
cp
1 1 0.892 rgb
f
148.327 19.55 mo
154.087 19.55 li
154.087 19.1 li
148.327 19.1 li
cp
1 1 0.907 rgb
f
148.327 19.1 mo
154.087 19.1 li
154.087 18.65 li
148.327 18.65 li
cp
1 1 0.923 rgb
f
148.327 18.65 mo
154.087 18.65 li
154.087 18.2 li
148.327 18.2 li
cp
1 1 0.938 rgb
f
148.327 18.2 mo
154.087 18.2 li
154.087 17.75 li
148.327 17.75 li
cp
1 1 0.954 rgb
f
148.327 17.75 mo
154.087 17.75 li
154.087 17.3 li
148.327 17.3 li
cp
1 1 0.969 rgb
f
148.327 17.3 mo
154.087 17.3 li
154.087 16.85 li
148.327 16.85 li
cp
1 1 0.985 rgb
f
148.327 16.85 mo
154.087 16.85 li
154.087 16.4 li
148.327 16.4 li
cp
1 gry
f
grestore
1 lw
148.327 131.6 mo
148.327 131.15 li
148.327 16.85 li
148.327 16.4 li
154.087 16.4 li
154.087 16.85 li
154.087 131.15 li
154.087 131.6 li
148.327 131.6 li
0 gry
@
true set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPT+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE719F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E58976995550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFFC73DA426D2C4> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPT+NimbusSanL-Regu /Encoding getdup 51 /three putpop%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu*1 [40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /six 11{/.notdef}rp /B 5{/.notdef}rp /H 7{/.notdef}rp /P 19{/.notdef}rp /d /e 9{/.notdef}rp /o 2{/.notdef}rp /r 4{/.notdef}rp /w 2{/.notdef}rp /z 133{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf158.087 134.296 mo(23)[4.42329 0 ]xshgsave
149.587 71.1666 mo
154.587 71.1666 li
154.587 70.1666 li
149.587 70.1666 li
cp
clp
150.087 70.6666 mo
154.087 70.6666 li
@
grestore
true set_gvm
%ADOBeginSubsetFont: NOGAAA+NimbusSanL-Regu AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginPBVMPT+NimbusSanL-Regu dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-systemdict /gcheck known {setglobal} if end {end} ifendPBVMPT+NimbusSanL-Regu /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
reset_gvm
/PBVMPT+NimbusSanL-Regu*1 [40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /six /seven 10{/.notdef}rp /B 5{/.notdef}rp /H 7{/.notdef}rp /P 19{/.notdef}rp /d /e 9{/.notdef}rp /o 2{/.notdef}rp /r 4{/.notdef}rp /w 2{/.notdef}rp /z 133{/.notdef}rp]PBVMPT+NimbusSanL-Regu nfPBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf158.087 74.006 mo(27)[4.42329 0 ]xshgsave
149.587 25.8415 mo
154.587 25.8415 li
154.587 24.8415 li
149.587 24.8415 li
cp
clp
150.087 25.3415 mo
154.087 25.3415 li
@
grestore
PBVMPT+NimbusSanL-Regu*1 [7.97 0 0 -7.97 0 0 ]msf158.087 28.537 mo(30)[4.42329 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/PBVMPT+NimbusSanL-Regu*1 uf/PBVMPT+NimbusSanL-Regu uf/NOGAAA+NimbusSanL-Regu uf/PBVMPZ+NimbusSanL-Bold*1 uf/PBVMPZ+NimbusSanL-Bold uf/OUKRMX+NimbusSanL-Bold uf/PBVMPY+CMSY10*1 uf/PBVMPY+CMSY10 uf/PDBQMX+CMSY10 uf/PBVMPX+CMMI7*1 uf/PBVMPX+CMMI7 uf/ACGAAA+CMMI7 uf/PBVMPV+CMMI10*1 uf/PBVMPV+CMMI10 uf/MCAQMX+CMMI10 uf/PBVMPU+CMSY8*1 uf/PBVMPU+CMSY8 uf/OIHRMX+CMSY8 uf/PBVMPW+NimbusSanL-ReguItal*1 uf/PBVMPW+NimbusSanL-ReguItal uf/YZLAAA+NimbusSanL-ReguItal ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
